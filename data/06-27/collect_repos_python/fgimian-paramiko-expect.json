{
    "repository": "fgimian/paramiko-expect",
    "stars": 195,
    "language": "python",
    "size": 118,
    "clone_url": "https://github.com/fgimian/paramiko-expect.git",
    "timestamp": "2023-06-28T10:00:38.136769Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_01_install_python",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_02_test_other_commnads",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_03_test_demo_helper",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_04_tail",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_04_tail_line_prefix",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_04_tail_callback",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_04_tail_empty_response",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_05_context",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_06_take_control_01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_06_take_control_02",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_06_take_control_03",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_06_take_control_no_termios_01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_06_take_control_no_termios_02",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_06_take_control_no_termios_03",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_07_close",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_08_issue_25_skip_newline",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_paramiko_expect",
                "name": "test_09_utf8",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test] \ud83d\ude80  Start image=crawlergpt:latest\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fgimian-paramiko-expect] user=0 workdir=\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test] \ud83e\uddea  Matrix: map[platform:ubuntu-latest python-version:3.6]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test] \u2b50 Run Main actions/checkout@v2\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2705  Success - Main actions/checkout@v2\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test] \u2b50 Run Main Set up Python 3.6\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/590162cf-db96-43ca-939e-5e29bb7bb211/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.6 is 3.6\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::isExplicit: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::explicit? false\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::explicit? true\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::explicit? true\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::explicit? true\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::explicit? true\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::explicit? true\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::explicit? true\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::matched: 3.6.14\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.6.14/x64\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.6.14 x64\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Successfully setup CPython (3.6.14)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2705  Success - Main Set up Python 3.6\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.6.14/x64\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.6.14/x64/lib\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2699  ::set-output:: python-version=3.6.14\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.6.14/x64\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.6.14/x64/bin\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test] \u2b50 Run Main Install dependencies\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (21.2.4)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting pip\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading pip-21.3.1-py3-none-any.whl (1.7 MB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages (40.6.2)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting setuptools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading setuptools-59.6.0-py3-none-any.whl (952 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Installing collected packages: setuptools, pip\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Attempting uninstall: setuptools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     Found existing installation: setuptools 40.6.2\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     Uninstalling setuptools-40.6.2:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |       Successfully uninstalled setuptools-40.6.2\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Attempting uninstall: pip\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     Found existing installation: pip 21.2.4\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     Uninstalling pip-21.2.4:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |       Successfully uninstalled pip-21.2.4\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Successfully installed pip-21.3.1 setuptools-59.6.0\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Processing /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fgimian-paramiko-expect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Preparing metadata (setup.py): started\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Preparing metadata (setup.py): finished with status 'done'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting paramiko>=1.10.1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading paramiko-3.2.0-py3-none-any.whl (224 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting cryptography>=3.3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading cryptography-40.0.2-cp36-abi3-manylinux_2_28_x86_64.whl (3.7 MB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting pynacl>=1.5\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (856 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting bcrypt>=3.2\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading bcrypt-4.0.1-cp36-abi3-manylinux_2_28_x86_64.whl (593 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting cffi>=1.12\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading cffi-1.15.1-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (402 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting pycparser\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Using legacy 'setup.py install' for paramiko-expect, since package 'wheel' is not installed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Installing collected packages: pycparser, cffi, pynacl, cryptography, bcrypt, paramiko, paramiko-expect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     Running setup.py install for paramiko-expect: started\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     Running setup.py install for paramiko-expect: finished with status 'done'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Successfully installed bcrypt-4.0.1 cffi-1.15.1 cryptography-40.0.2 paramiko-3.2.0 paramiko-expect-0.3.5 pycparser-2.21 pynacl-1.5.0\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Ignoring mock: markers 'python_version <= \"2.7\"' don't match your environment\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Ignoring contextlib2: markers 'python_version <= \"3.2\"' don't match your environment\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting pytest\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading pytest-7.0.1-py3-none-any.whl (296 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting pytest-cov\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading pytest_cov-4.0.0-py3-none-any.whl (21 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting codecov\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading codecov-2.1.13-py2.py3-none-any.whl (16 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting testcontainers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading testcontainers-3.7.0-py2.py3-none-any.whl (43 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting importlib-metadata>=0.12\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading importlib_metadata-4.8.3-py3-none-any.whl (17 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting pluggy<2.0,>=0.12\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading pluggy-1.0.0-py2.py3-none-any.whl (13 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting packaging\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading packaging-21.3-py3-none-any.whl (40 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting attrs>=19.2.0\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading attrs-22.2.0-py3-none-any.whl (60 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting py>=1.8.2\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting iniconfig\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading iniconfig-1.1.1-py2.py3-none-any.whl (5.0 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting tomli>=1.0.0\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading tomli-1.2.3-py3-none-any.whl (12 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting coverage[toml]>=5.2.1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading coverage-6.2-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (212 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting requests>=2.7.9\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading requests-2.27.1-py2.py3-none-any.whl (63 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting wrapt\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading wrapt-1.15.0-cp36-cp36m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (75 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting deprecation\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading deprecation-2.1.0-py2.py3-none-any.whl (11 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting docker>=4.0.0\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading docker-5.0.3-py2.py3-none-any.whl (146 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting websocket-client>=0.32.0\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading websocket_client-1.3.1-py3-none-any.whl (54 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting typing-extensions>=3.6.4\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading typing_extensions-4.1.1-py3-none-any.whl (26 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting zipp>=0.5\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading zipp-3.6.0-py3-none-any.whl (5.3 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting urllib3<1.27,>=1.21.1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting certifi>=2017.4.17\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting charset-normalizer~=2.0.0\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading charset_normalizer-2.0.12-py3-none-any.whl (39 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting idna<4,>=2.5\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Collecting pyparsing!=3.0.5,>=2.0.2\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   Downloading pyparsing-3.1.0-py3-none-any.whl (102 kB)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Installing collected packages: zipp, typing-extensions, urllib3, pyparsing, importlib-metadata, idna, charset-normalizer, certifi, websocket-client, tomli, requests, py, pluggy, packaging, iniconfig, coverage, attrs, wrapt, pytest, docker, deprecation, testcontainers, pytest-cov, codecov\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Successfully installed attrs-22.2.0 certifi-2023.5.7 charset-normalizer-2.0.12 codecov-2.1.13 coverage-6.2 deprecation-2.1.0 docker-5.0.3 idna-3.4 importlib-metadata-4.8.3 iniconfig-1.1.1 packaging-21.3 pluggy-1.0.0 py-1.11.0 pyparsing-3.1.0 pytest-7.0.1 pytest-cov-4.0.0 requests-2.27.1 testcontainers-3.7.0 tomli-1.2.3 typing-extensions-4.1.1 urllib3-1.26.16 websocket-client-1.3.1 wrapt-1.15.0 zipp-3.6.0\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u2705  Success - Main Install dependencies\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test] \u2b50 Run Main Test with pytest\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ============================= test session starts ==============================\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | platform linux -- Python 3.6.14, pytest-7.0.1, pluggy-1.0.0\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fgimian-paramiko-expect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | plugins: cov-4.0.0\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | collected 17 items\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py EEEEEEEEEEEEEEEEE\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ==================================== ERRORS ====================================\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ___________________ ERROR at setup of test_01_install_python ___________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ________________ ERROR at setup of test_02_test_other_commnads _________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | __________________ ERROR at setup of test_03_test_demo_helper __________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ________________________ ERROR at setup of test_04_tail ________________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | __________________ ERROR at setup of test_04_tail_line_prefix __________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ___________________ ERROR at setup of test_04_tail_callback ____________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ________________ ERROR at setup of test_04_tail_empty_response _________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ______________________ ERROR at setup of test_05_context _______________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | __________________ ERROR at setup of test_06_take_control_01 ___________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | __________________ ERROR at setup of test_06_take_control_02 ___________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | __________________ ERROR at setup of test_06_take_control_03 ___________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _____________ ERROR at setup of test_06_take_control_no_termios_01 _____________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _____________ ERROR at setup of test_06_take_control_no_termios_02 _____________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _____________ ERROR at setup of test_06_take_control_no_termios_03 _____________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _______________________ ERROR at setup of test_07_close ________________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _______________ ERROR at setup of test_08_issue_25_skip_newline ________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ________________________ ERROR at setup of test_09_utf8 ________________________\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       PermissionError: [Errno 13] Permission denied\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: PermissionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >                   timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:450: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # If we're going to release the connection in ``finally:``, then\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # the response doesn't need to know about the connection. Otherwise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # it will also try to release it and we'll have a double-release\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # mess.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_conn = conn if not release_conn else None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Pass method to Response for length checking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response_kw[\"request_method\"] = method\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Import httplib's response into our own wrapper object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             response = self.ResponseCls.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 httplib_response,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 pool=self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connection=response_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 retries=retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Everything went great!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except EmptyPoolError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Didn't get a connection from the pool, no need to clean up\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_this_conn = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             TimeoutError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTPException,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SocketError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ProtocolError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             BaseSSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             SSLError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             CertificateError,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Discard the connection for these exceptions. It will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # replaced during the next _get_conn() call.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # so we try to cover our bases here!\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 return (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Try to detect a common user error with proxies which is to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Instead we add a nice error message and point to a URL.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if (\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 isinstance(e, BaseSSLError)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and self.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 and conn.proxy.scheme == \"https\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     \"#https-proxy-error-http-proxy\",\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     SSLError(e),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = SSLError(e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = retries.increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:799: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', response = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | error = ProtocolError('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _pool = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _stacktrace = <traceback object at 0x7f0c1bf82a08>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def increment(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         response=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         error=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _pool=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         _stacktrace=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param response: A response object, or None, if the server did not\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return a response.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param Exception error: An error encountered during the request, or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             None if the response was received successfully.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :return: A new ``Retry`` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.total is False and error:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Disabled, indicate to re-raise the error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         total = self.total\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if total is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             total -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         connect = self.connect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         read = self.read\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect = self.redirect\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status_count = self.status\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         other = self.other\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         cause = \"unknown\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         status = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect_location = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if error and self._is_connection_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Connect retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if connect is False:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             elif connect is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect -= 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif error and self._is_read_error(error):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Read retry?\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if read is False or not self._is_method_retryable(method):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise six.reraise(type(error), error, _stacktrace)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/util/retry.py:550: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | tp = <class 'urllib3.exceptions.ProtocolError'>, value = None, tb = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def reraise(tp, value, tb=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 value = tp()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if value.__traceback__ is not tb:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               raise value.with_traceback(tb)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/packages/six.py:769: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | redirect = False, assert_same_host = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | release_conn = False, chunked = False, body_pos = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         headers=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         retries=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         redirect=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         assert_same_host=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout=_Default,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool_timeout=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_conn=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         **response_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         lowest level call for making a request, so you'll need to specify all\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         the raw details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            More commonly, it's appropriate to use a convenience method provided\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         .. note::\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `release_conn` will only behave as expected if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` because we want to make\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            `preload_content=False` the default behaviour someday soon without\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |            breaking backwards compatibility.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             The URL to perform the request on.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             these headers completely replace any pool-specific headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param retries:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Configure the number of retries to allow before raising a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             over different types of retries.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Pass an integer number to retry connection errors that many times,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             but no other types of errors. Pass zero to never retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``False``, then retries are disabled and any exception is raised\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the redirect response will be returned.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param redirect:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             will disable redirect, too.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param assert_same_host:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If ``True``, will make sure that the host of the pool requests is\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If specified, overrides the default timeout for this one\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             request. It may be a float (in seconds) or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param pool_timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If set and the pool is set to block=True, then this method will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             connection is available within the time period.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param release_conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If False, then the urlopen call will not release the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool once a response is received (but will release if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             you read the entire contents of the response such as when\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             `preload_content=True`). This is useful if you're not preloading\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the response's content immediately. You will need to call\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             back into the pool. If None, it takes the value of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``response_kw.get('preload_content', True)``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If True, urllib3 will send the body using chunked transfer\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content-length form. Defaults to False.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param int body_pos:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Position to seek to in file-like body in the event of a retry or\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auto-populate the value when needed.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\\\**response_kw:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Additional parameters are passed to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         parsed_url = parse_url(url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         destination_scheme = parsed_url.scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if headers is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = self.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not isinstance(retries, Retry):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if release_conn is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Check host\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if assert_same_host and not self.is_same_host(url):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise HostChangedError(self, url, retries)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if url.startswith(\"/\"):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(_encode_target(url))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url = six.ensure_str(parsed_url.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Track whether `conn` needs to be released before\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the function recurses, the original value of `release_conn` will be\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # passed down into the recursive call, and its value will be respected.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # See issue #651 [1] for details.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         #\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         release_this_conn = release_conn\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.proxy, self.proxy_config, destination_scheme\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # have to copy the headers dict so we can safely change it without those\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # changes being reflected in anyone else's copy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if not http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers = headers.copy()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers.update(self.proxy_headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # complains about UnboundLocalError.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         err = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Keep track of whether we cleanly exited the except block. This\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # ensures we do proper cleanup in finally.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         clean_exit = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Rewind body position, if needed. Record current position\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # for future rewinds in the event of a redirect/retry.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         body_pos = set_file_position(body, body_pos)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Request a connection from the queue.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn.timeout = timeout_obj.connect_timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn, \"sock\", None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 self._prepare_proxy(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Make the request on the httplib connection object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             httplib_response = self._make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout=timeout_obj,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 body=body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               chunked=chunked,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:721: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f0c1c01e6a0>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | conn = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout_obj = Timeout(connect=60, read=60, total=None)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _make_request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     ):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Perform a request on a given urllib connection object taken from our\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         pool.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param conn:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             a connection from one of our connection pools\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Socket timeout in seconds for the request. This can be a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             float or integer, which will set the same timeout value for\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the socket connect and the socket read, or an instance of\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             control over your timeouts.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.num_requests += 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj = self._get_timeout(timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         timeout_obj.start_connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Trigger any extra validation we need to do.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._validate_conn(conn)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conn.request() calls http.client.*.request, not the method in\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               conn.request(method, url, **httplib_request_kw)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/urllib3/connectionpool.py:415: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url, body=None, headers={}, *,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1291: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | method = 'GET', url = '/version', body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = {'User-Agent': 'docker-sdk-python/5.0.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         header_names = frozenset(k.lower() for k in headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         skips = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'host' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_host'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'accept-encoding' in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             skips['skip_accept_encoding'] = 1\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.putrequest(method, url, **skips)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the caller passes encode_chunked=True or the following\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # conditions hold:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 1. content-length has not been explicitly set\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'content-length' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # only chunk body if not explicitly set for backwards\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # compatibility, assuming the client code is already handling the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # chunking\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if 'transfer-encoding' not in header_names:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # if content-length cannot be automatically determined, fall\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # back to chunked encoding\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 content_length = self._get_content_length(body, method)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if content_length is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     if body is not None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         if self.debuglevel > 0:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                             print('Unable to determine size of %r' % body)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         encode_chunked = True\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     self.putheader('Content-Length', str(content_length))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         for hdr, value in headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.putheader(hdr, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(body, str):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # default charset of iso-8859-1.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             body = _encode(body, 'body')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1337: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         This method sends the request to the server.  The optional message_body\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         argument can be used to pass a message body associated with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.__state == _CS_REQ_STARTED:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             self.__state = _CS_REQ_SENT\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise CannotSendHeader()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1286: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | message_body = None, encode_chunked = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         A message_body may be specified, to be appended to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self._buffer.extend((b\"\", b\"\"))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         del self._buffer[:]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       self.send(msg)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:1046: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | data = b'GET /version HTTP/1.1\\r\\nHost: localhost\\r\\nUser-Agent: docker-sdk-python/5.0.3\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, data):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send `data' to the server.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         file-like object that supports a .read() method, or an iterable object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if self.sock is None:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if self.auto_open:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               self.connect()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/http/client.py:984: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f0c1bf7c0b8>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def connect(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         sock.settimeout(self.timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       sock.connect(self.unix_socket)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/transport/unixconn.py:30: ProtocolError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:214: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | api_version = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def version(self, api_version=True):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns version information from the server. Similar to the ``docker\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         version`` command.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             (dict): The server version information\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Raises:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :py:class:`docker.errors.APIError`\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 If the server returns an error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self._url(\"/version\", versioned_api=api_version)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self._result(self._get(url), json=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/daemon.py:181: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | args = ('http+docker://localhost/version',), kwargs = {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def inner(self, *args, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'HttpHeaders' in self._general_configs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not kwargs.get('headers'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'] = self._general_configs['HttpHeaders']\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 kwargs['headers'].update(self._general_configs['HttpHeaders'])\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return f(self, *args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/utils/decorators.py:46: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', kwargs = {'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @update_headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.get(url, **self._set_request_timeout(kwargs))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:237: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'allow_redirects': True, 'timeout': 60}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def get(self, url, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       return self.request('GET', url, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:542: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>, method = 'GET'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | url = 'http+docker://localhost/version', params = None, data = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | headers = None, cookies = None, files = None, auth = None, timeout = 60\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | cert = None, json = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def request(self, method, url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         Returns :class:`Response <Response>` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param method: method for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param url: URL for the new :class:`Request` object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             string for the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             object to send in the body of the :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param json: (optional) json to send in the body of the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             :class:`Request`.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             for multipart encoding upload.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             Basic/Digest/Custom HTTP Auth.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param allow_redirects: (optional) Set to True by default.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type allow_redirects: bool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hostname to the URL of the proxy.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) whether to immediately download the response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             content. Defaults to ``False``.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             ``False``, requests will accept any TLS certificate presented by\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             the server, and will ignore hostname mismatches and/or expired\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             certificates, which will make your application vulnerable to\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             may be useful during local development or testing.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             If Tuple, ('cert', 'key') pair.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Create the Request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         req = Request(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             method=method.upper(),\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             headers=headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             files=files,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data=data or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             json=json,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             params=params or {},\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             auth=auth,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             cookies=cookies,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             hooks=hooks,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         prep = self.prepare_request(req)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         proxies = proxies or {}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         settings = self.merge_environment_settings(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             prep.url, proxies, stream, verify, cert\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs = {\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'timeout': timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             'allow_redirects': allow_redirects,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         }\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         send_kwargs.update(settings)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       resp = self.send(prep, **send_kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:529: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': 60, ...}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | adapter = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | start = 1687946537.907242\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, **kwargs):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Send a given PreparedRequest.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # the correct parameters to reproduce the previous request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('stream', self.stream)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('verify', self.verify)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         kwargs.setdefault('cert', self.cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if 'proxies' not in kwargs:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             kwargs['proxies'] = resolve_proxies(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 request, self.proxies, self.trust_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # It's possible that users might accidentally send a Request object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Guard against that specific failure case.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(request, Request):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise ValueError('You can only send PreparedRequests.')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         stream = kwargs.get('stream')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         hooks = request.hooks\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Get the appropriate adapter to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         adapter = self.get_adapter(url=request.url)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Start time (approximately) of the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         start = preferred_clock()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         # Send the request\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       r = adapter.send(request, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/sessions.py:645: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f0c1bf7c208>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | request = <PreparedRequest [GET]>, stream = False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | proxies = OrderedDict()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param stream: (optional) Whether to stream the request content.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param timeout: (optional) How long to wait for the server to send\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             read timeout) <timeouts>` tuple.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             must be a path to a CA bundle to use\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         :rtype: requests.Response\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         \"\"\"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             conn = self.get_connection(request.url, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except LocationValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise InvalidURL(e, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         url = self.request_url(request, proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         if isinstance(timeout, tuple):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 connect, read = timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             except ValueError as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 # this may raise a string formatting error.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"timeout tuple, or a single float to set \"\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                        \"both timeouts to the same value\".format(timeout))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 raise ValueError(err)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         elif isinstance(timeout, TimeoutSauce):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             pass\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             if not chunked:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 resp = conn.urlopen(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     method=request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     url=url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     body=request.body,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     headers=request.headers,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     redirect=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     assert_same_host=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     decode_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     retries=self.max_retries,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     timeout=timeout\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             # Send the request.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             else:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 if hasattr(conn, 'proxy_pool'):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     conn = conn.proxy_pool\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     skip_host = 'Host' in request.headers\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.putrequest(request.method,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         url,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_accept_encoding=True,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                                         skip_host=skip_host)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for header, value in request.headers.items():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.putheader(header, value)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.endheaders()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     for i in request.body:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(i)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         low_conn.send(b'\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Receive the response from the server\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse(buffering=True)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     except TypeError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         # For compatibility with Python 3.3+\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r = low_conn.getresponse()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     resp = HTTPResponse.from_httplib(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         r,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         pool=conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         connection=low_conn,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         preload_content=False,\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                         decode_content=False\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 except:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # If we hit any problems here, clean up the connection.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     # Then, reraise so that we can handle the actual exception.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     low_conn.close()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                     raise\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except (ProtocolError, socket.error) as err:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >           raise ConnectionError(err, request=request)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/requests/adapters.py:501: ConnectionError\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | During handling of the above exception, another exception occurred:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     @pytest.fixture(scope=\"session\")\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def docker_ssh():\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >       with SshContainer() as container:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/test_paramiko_expect.py:28: \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | test/ssh.py:10: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     super().__init__('docker.io/panubo/sshd')\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/container.py:18: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._docker = DockerClient(**(docker_client_kw or {}))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/testcontainers/core/docker_client.py:23: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.client = docker.from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:101: in from_env\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     **kwargs_from_env(**kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/client.py:45: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self.api = APIClient(*args, **kwargs)\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:197: in __init__\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     self._version = self._retrieve_server_version()\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | self = <docker.api.client.APIClient object at 0x7f0c1c01ee80>\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     def _retrieve_server_version(self):\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         try:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except KeyError:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |                 ' is missing.'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |         except Exception as e:\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             raise DockerException(\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | >               f'Error while fetching server API version: {e}'\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |             )\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/docker/api/client.py:222: DockerException\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | =============================== warnings summary ===============================\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ../../../opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/paramiko/transport.py:32\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |   /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/paramiko/transport.py:32: CryptographyDeprecationWarning: Python 3.6 is no longer supported by the Python core team. Therefore, support for it is deprecated in cryptography. The next release of cryptography will remove support for Python 3.6.\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   |     from cryptography.hazmat.backends import default_backend\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fgimian-paramiko-expect/report.xml -\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ---------- coverage: platform linux, python 3.6.14-final-0 -----------\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | Name                                                                                    Stmts   Miss  Cover   Missing\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ---------------------------------------------------------------------------------------------------------------------\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | /opt/hostedtoolcache/Python/3.6.14/x64/lib/python3.6/site-packages/paramiko_expect.py     160    135    16%   38, 42-43, 71-87, 90, 93, 96, 100-103, 141-239, 243-250, 281-323, 332-395\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ---------------------------------------------------------------------------------------------------------------------\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | TOTAL                                                                                     160    135    16%\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | \n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | =========================== short test summary info ============================\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_01_install_python - docker.errors.Do...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_02_test_other_commnads - docker.erro...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_03_test_demo_helper - docker.errors....\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_04_tail - docker.errors.DockerExcept...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_04_tail_line_prefix - docker.errors....\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_04_tail_callback - docker.errors.Doc...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_04_tail_empty_response - docker.erro...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_05_context - docker.errors.DockerExc...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_06_take_control_01 - docker.errors.D...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_06_take_control_02 - docker.errors.D...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_06_take_control_03 - docker.errors.D...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_06_take_control_no_termios_01 - dock...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_06_take_control_no_termios_02 - dock...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_06_take_control_no_termios_03 - dock...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_07_close - docker.errors.DockerExcep...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_08_issue_25_skip_newline - docker.er...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ERROR test/test_paramiko_expect.py::test_09_utf8 - docker.errors.DockerExcept...\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   | ======================== 1 warning, 17 errors in 12.69s ========================\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test]   \u274c  Failure - Main Test with pytest\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test] exitcode '1': failure\n[af8ae67b-72bf-41b3-bea2-9afed49bbcb7/test] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'test' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fgimian-paramiko-expect/.github/workflows/test-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 112.3140230178833
    }
}