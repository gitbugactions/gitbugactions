{
    "repository": "MrPowers/chispa",
    "stars": 390,
    "language": "python",
    "size": 4105,
    "clone_url": "https://github.com/MrPowers/chispa.git",
    "timestamp": "2023-06-28T13:45:17.350850Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_column_comparer.describe_assert_column_equality",
                "name": "it_throws_error_with_data_mismatch",
                "time": 5.350421667098999,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": "\n[Stage 0:>                                                          (0 + 1) / 1]\n\n                                                                                \n"
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_column_equality",
                "name": "it_doesnt_throw_without_mismatch",
                "time": 0.21411848068237305,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_column_equality",
                "name": "it_works_with_integer_values",
                "time": 0.19562649726867676,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_approx_column_equality",
                "name": "it_works_with_no_mismatches",
                "time": 0.19805192947387695,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_approx_column_equality",
                "name": "it_throws_when_difference_is_bigger_than_precision",
                "time": 0.14481210708618164,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_approx_column_equality",
                "name": "it_throws_when_comparing_floats_with_none",
                "time": 0.14214706420898438,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_approx_column_equality",
                "name": "it_throws_when_comparing_none_with_floats",
                "time": 0.16506552696228027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_throws_with_schema_mismatches",
                "time": 0.08706808090209961,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_can_work_with_different_row_orders",
                "time": 1.3653559684753418,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_can_work_with_different_row_orders_with_a_flag",
                "time": 0.6339907646179199,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_can_work_with_different_row_and_column_orders",
                "time": 0.6204090118408203,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_raises_for_row_insensitive_with_diff_content",
                "time": 0.49483489990234375,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_throws_with_schema_column_order_mismatch",
                "time": 0.05498456954956055,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_does_not_throw_on_schema_column_order_mismatch_with_transforms",
                "time": 0.1981348991394043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_throws_with_schema_mismatch",
                "time": 0.07116103172302246,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_throws_with_content_mismatches",
                "time": 0.1868267059326172,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_throws_with_length_mismatches",
                "time": 0.23988747596740723,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_can_consider_nan_values_equal",
                "time": 0.14374208450317383,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_does_not_consider_nan_values_equal_by_default",
                "time": 0.19995999336242676,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_are_dfs_equal",
                "name": "it_returns_false_with_schema_mismatches",
                "time": 0.058548927307128906,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_are_dfs_equal",
                "name": "it_returns_false_with_content_mismatches",
                "time": 0.17239141464233398,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_are_dfs_equal",
                "name": "it_returns_true_when_dfs_are_same",
                "time": 0.1461334228515625,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_approx_df_equality",
                "name": "it_throws_with_content_mismatch",
                "time": 0.18039202690124512,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_approx_df_equality",
                "name": "it_throws_with_with_length_mismatch",
                "time": 0.18043231964111328,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_approx_df_equality",
                "name": "it_does_not_throw_with_no_mismatch",
                "time": 0.13589262962341309,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_approx_df_equality",
                "name": "it_does_not_throw_with_different_row_col_order",
                "time": 0.593787670135498,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_approx_df_equality",
                "name": "it_does_not_throw_with_nan_values",
                "time": 0.17630410194396973,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_column_equality",
                "name": "it_removes_non_word_characters_short",
                "time": 0.19336915016174316,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_column_equality",
                "name": "it_removes_non_word_characters_nice_error",
                "time": 0.09752035140991211,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "test_remove_non_word_characters_long",
                "time": 0.23307275772094727,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "test_remove_non_word_characters_long_error",
                "time": 0.15465426445007324,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "ignore_row_order",
                "time": 0.5283632278442383,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "ignore_column_order",
                "time": 0.1623544692993164,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "ignore_nullable_property",
                "time": 0.2171924114227295,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "ignore_nullable_property_array",
                "time": 0.20309829711914062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "consider_nan_values_equal",
                "time": 0.1782674789428711,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_assert_approx_column_equality",
                "name": "test_approx_col_equality_same",
                "time": 0.10420942306518555,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_assert_approx_column_equality",
                "name": "test_approx_col_equality_different",
                "time": 0.06584429740905762,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_assert_approx_column_equality",
                "name": "test_approx_df_equality_same",
                "time": 0.1925182342529297,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_assert_approx_column_equality",
                "name": "test_approx_df_equality_different",
                "time": 0.20408248901367188,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_schema_mismatch_messages",
                "name": "test_schema_mismatch_message",
                "time": 0.04793095588684082,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_row_comparer",
                "name": "test_are_rows_equal",
                "time": 0.0004975795745849609,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_row_comparer",
                "name": "test_are_rows_equal_enhanced",
                "time": 0.0005097389221191406,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_row_comparer",
                "name": "test_are_rows_approx_equal",
                "time": 0.0004715919494628906,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_rows_comparer.describe_assert_basic_rows_equality",
                "name": "it_throws_with_row_mismatches",
                "time": 0.17285919189453125,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_rows_comparer.describe_assert_basic_rows_equality",
                "name": "it_works_when_rows_are_the_same",
                "time": 0.1744248867034912,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality",
                "name": "it_does_nothing_when_equal",
                "time": 0.0005807876586914062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality",
                "name": "it_throws_when_column_names_differ",
                "time": 0.00220489501953125,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality",
                "name": "it_throws_when_schema_lengths_differ",
                "time": 0.0012524127960205078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality_ignore_nullable",
                "name": "it_has_good_error_messages_for_different_sized_schemas",
                "time": 0.00136566162109375,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality_ignore_nullable",
                "name": "it_does_nothing_when_equal",
                "time": 0.00041484832763671875,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality_ignore_nullable",
                "name": "it_does_nothing_when_only_nullable_flag_is_different",
                "time": 0.00041294097900390625,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_true_when_only_nullable_flag_is_different",
                "time": 0.0007045269012451172,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_true_when_only_nullable_flag_is_different_within_array_element",
                "time": 0.0004010200500488281,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_true_when_only_nullable_flag_is_different_within_nested_array_element",
                "time": 0.0004029273986816406,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_false_when_the_element_type_is_different_within_array",
                "time": 0.0003948211669921875,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_false_when_column_names_differ",
                "time": 0.000457763671875,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_false_when_columns_have_different_order",
                "time": 0.0003974437713623047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_true_when_only_nullable_flag_is_different_within_array_element",
                "time": 0.0003745555877685547,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_false_when_the_element_type_is_different_within_array",
                "time": 0.00037932395935058594,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_true_when_the_element_type_is_same_within_struct",
                "time": 0.0006210803985595703,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_false_when_the_element_type_is_different_within_struct",
                "time": 0.0003867149353027344,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_false_when_the_element_name_is_different_within_struct",
                "time": 0.0003936290740966797,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_true_when_different_nullability_within_struct",
                "time": 0.0003962516784667969,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_true_when_structfields_are_the_same",
                "time": 0.00038695335388183594,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_column_names_are_different",
                "time": 0.00037550926208496094,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_nullable_property_is_different",
                "time": 0.0003590583801269531,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_can_perform_nullability_insensitive_comparisons",
                "time": 0.00039267539978027344,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_true_when_nested_types_are_the_same",
                "time": 0.0009717941284179688,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_nested_names_are_different",
                "time": 0.0003807544708251953,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_nested_types_are_different",
                "time": 0.00039505958557128906,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_nested_types_have_different_nullability",
                "time": 0.00037980079650878906,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_nested_types_are_different_with_ignore_nullable_true",
                "time": 0.0003902912139892578,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_true_when_nested_types_have_different_nullability_with_ignore_null_true",
                "time": 0.00039577484130859375,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \ud83d\ude80  Start image=crawlergpt:latest\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/MrPowers-chispa] user=0 workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2601  git clone 'https://github.com/snok/install-poetry' # ref=v1\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Pre Install Poetry\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Pre Install Poetry\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2601  git clone 'https://github.com/actions/cache' # ref=v1\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Main actions/checkout@v1\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Main actions/checkout@v1\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Main Set up Python 3.9\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/e316c837-51c1-4ddd-8e5e-8cd289b3b15c/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::isExplicit: \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::explicit? false\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::explicit? true\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::explicit? true\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::explicit? true\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::explicit? true\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::explicit? true\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::explicit? true\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::matched: 3.9.6\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Successfully setup CPython (3.9.6)\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Main Set up Python 3.9\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2699  ::set-output:: python-version=3.9.6\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Main Install Poetry\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/e316c837-51c1-4ddd-8e5e-8cd289b3b15c/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Main Install and configure Poetry\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-0.sh] user= workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \u001b[33mSetting Poetry installation path as /home/runneradmin/.local\u001b[0m\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \u001b[33mInstalling Poetry \ud83d\udc77\u001b[0m\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Retrieving Poetry metadata\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | # Welcome to Poetry!\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | This will download and install the latest version of Poetry,\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | a dependency and package manager for Python.\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | /home/runneradmin/.local/bin\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | You can uninstall at any time by executing this script with the --uninstall option,\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | and these changes will be reverted.\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Installing Poetry (1.5.1)\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Installing Poetry (1.5.1): Creating environment\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Installing Poetry (1.5.1): Installing Poetry\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Installing Poetry (1.5.1): Creating script\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Installing Poetry (1.5.1): Done\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Poetry (1.5.1) is installed now. Great!\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | environment variable.\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | You can test that everything is set up by executing:\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | `poetry --version`\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \u001b[33mInstallation completed. Configuring settings \ud83d\udee0\u001b[0m\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \u001b[33mDone \u2705\u001b[0m\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \u001b[33mIf you are creating a venv in your project, you can activate it by running 'source .venv/bin/activate'. If you're running this in an OS matrix, you can use 'source $VENV' instead, as an OS agnostic option\u001b[0m\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Main Install and configure Poetry\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Main Install Poetry\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Main Cache Poetry virtualenv\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/e316c837-51c1-4ddd-8e5e-8cd289b3b15c/act/actions-cache@v1/ dst=/var/run/act/actions/actions-cache@v1/\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v1/] user=0 workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v1/dist/restore/index.js] user= workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::Cache Path: /home/runneradmin/.virtualenvs\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::Resolved Keys:\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::[\"poetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0\",\"poetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0\"]\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:43715/_apis/artifactcache/cache?keys=poetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0%252Cpoetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Cache not found for input keys: poetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0, poetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0.\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Main Cache Poetry virtualenv\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Main Install dependencies\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Creating virtualenv chispa-rheMFAkz-py3.9 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Installing dependencies from lock file\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Package operations: 6 installs, 1 update, 0 removals\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   |   \u2022 Installing py (1.11.0)\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   |   \u2022 Updating setuptools (67.8.0 -> 67.6.0)\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   |   \u2022 Installing py4j (0.10.9.5)\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   |   \u2022 Installing pytest (3.2.2)\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   |   \u2022 Installing findspark (1.4.2)\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   |   \u2022 Installing pyspark (3.3.2)\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   |   \u2022 Installing pytest-describe (1.0.0)\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | Installing the current project: chispa (0.9.2)\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Main Install dependencies\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Main Run tests with pytest\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | ============================= test session starts ==============================\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | platform linux -- Python 3.9.6, pytest-3.2.2, py-1.11.0, pluggy-0.4.0\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/MrPowers-chispa, inifile:\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | plugins: describe-1.0.0\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | collected 74 items\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | tests/test_column_comparer.py .......\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | tests/test_dataframe_comparer.py ....................\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | tests/test_readme_examples.py ..............\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | tests/test_row_comparer.py ...\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | tests/test_rows_comparer.py ..\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | tests/test_schema_comparer.py ..................\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | tests/test_structfield_comparer.py ..........\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/MrPowers-chispa/report.xml -\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | ========================== 74 passed in 23.65 seconds ==========================\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Main Run tests with pytest\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Post Cache Poetry virtualenv\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v1/dist/save/index.js] user= workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::State: \n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::Reserving Cache\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:43715/_apis/artifactcache/caches\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::Cache ID: 1\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::Cache Path: /home/runneradmin/.virtualenvs\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udcac  ::debug::Archive Path: /tmp/16aced0d-c6a6-489e-9c5d-2d4d1603a3b8/cache.tgz\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | [command]/usr/bin/tar -cz -f /tmp/16aced0d-c6a6-489e-9c5d-2d4d1603a3b8/cache.tgz -C /home/runneradmin/.virtualenvs .\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | /usr/bin/tar: /home/runneradmin/.virtualenvs: Cannot open: No such file or directory\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | /usr/bin/tar: Error is not recoverable: exiting now\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   | [warning]Tar failed with error: The process '/usr/bin/tar' failed with exit code 2\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Post Cache Poetry virtualenv\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Post Install Poetry\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/e316c837-51c1-4ddd-8e5e-8cd289b3b15c/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Post Install Poetry\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \u2b50 Run Post Set up Python 3.9\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/cache-save/index.js] user= workdir=\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test]   \u2705  Success - Post Set up Python 3.9\n[54fb6b10-0523-4ab6-bf92-feafdf4450ca/test] \ud83c\udfc1  Job succeeded\n",
        "stderr": "",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/MrPowers-chispa/.github/workflows/ci-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 287.5204086303711
    }
}