{
    "repository": "MrPowers/chispa",
    "stars": 391,
    "language": "python",
    "size": 4105,
    "clone_url": "https://github.com/MrPowers/chispa.git",
    "timestamp": "2023-07-01T13:16:27.209271Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_column_comparer.describe_assert_column_equality",
                "name": "it_throws_error_with_data_mismatch",
                "time": 4.854080677032471,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": "\n[Stage 0:>                                                          (0 + 1) / 1]\n\n                                                                                \n"
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_column_equality",
                "name": "it_doesnt_throw_without_mismatch",
                "time": 0.17707467079162598,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_column_equality",
                "name": "it_works_with_integer_values",
                "time": 0.18602895736694336,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_approx_column_equality",
                "name": "it_works_with_no_mismatches",
                "time": 0.21134400367736816,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_approx_column_equality",
                "name": "it_throws_when_difference_is_bigger_than_precision",
                "time": 0.14137768745422363,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_approx_column_equality",
                "name": "it_throws_when_comparing_floats_with_none",
                "time": 0.14615821838378906,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_column_comparer.describe_assert_approx_column_equality",
                "name": "it_throws_when_comparing_none_with_floats",
                "time": 0.15145111083984375,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_throws_with_schema_mismatches",
                "time": 0.05219602584838867,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_can_work_with_different_row_orders",
                "time": 1.2331373691558838,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_can_work_with_different_row_orders_with_a_flag",
                "time": 0.5169248580932617,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_can_work_with_different_row_and_column_orders",
                "time": 0.6831638813018799,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_raises_for_row_insensitive_with_diff_content",
                "time": 0.5051190853118896,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_throws_with_schema_column_order_mismatch",
                "time": 0.06670308113098145,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_does_not_throw_on_schema_column_order_mismatch_with_transforms",
                "time": 0.24828100204467773,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_throws_with_schema_mismatch",
                "time": 0.07857322692871094,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_throws_with_content_mismatches",
                "time": 0.20693349838256836,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_throws_with_length_mismatches",
                "time": 0.2122342586517334,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_can_consider_nan_values_equal",
                "time": 0.1612989902496338,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_df_equality",
                "name": "it_does_not_consider_nan_values_equal_by_default",
                "time": 0.19196414947509766,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_are_dfs_equal",
                "name": "it_returns_false_with_schema_mismatches",
                "time": 0.06536483764648438,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_are_dfs_equal",
                "name": "it_returns_false_with_content_mismatches",
                "time": 0.19227147102355957,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_are_dfs_equal",
                "name": "it_returns_true_when_dfs_are_same",
                "time": 0.1504983901977539,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_approx_df_equality",
                "name": "it_throws_with_content_mismatch",
                "time": 0.21612763404846191,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_approx_df_equality",
                "name": "it_throws_with_with_length_mismatch",
                "time": 0.2084343433380127,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_approx_df_equality",
                "name": "it_does_not_throw_with_no_mismatch",
                "time": 0.13552427291870117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_approx_df_equality",
                "name": "it_does_not_throw_with_different_row_col_order",
                "time": 0.5284392833709717,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dataframe_comparer.describe_assert_approx_df_equality",
                "name": "it_does_not_throw_with_nan_values",
                "time": 0.12832403182983398,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_column_equality",
                "name": "it_removes_non_word_characters_short",
                "time": 0.2080695629119873,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_column_equality",
                "name": "it_removes_non_word_characters_nice_error",
                "time": 0.10227179527282715,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "test_remove_non_word_characters_long",
                "time": 0.211777925491333,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "test_remove_non_word_characters_long_error",
                "time": 0.14828729629516602,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "ignore_row_order",
                "time": 0.4522085189819336,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "ignore_column_order",
                "time": 0.15849518775939941,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "ignore_nullable_property",
                "time": 0.1927168369293213,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "ignore_nullable_property_array",
                "time": 0.2144947052001953,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_dataframe_equality",
                "name": "consider_nan_values_equal",
                "time": 0.1639404296875,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_assert_approx_column_equality",
                "name": "test_approx_col_equality_same",
                "time": 0.11333107948303223,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_assert_approx_column_equality",
                "name": "test_approx_col_equality_different",
                "time": 0.07286477088928223,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_assert_approx_column_equality",
                "name": "test_approx_df_equality_same",
                "time": 0.2179100513458252,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_assert_approx_column_equality",
                "name": "test_approx_df_equality_different",
                "time": 0.2035365104675293,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_readme_examples.describe_schema_mismatch_messages",
                "name": "test_schema_mismatch_message",
                "time": 0.07774138450622559,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_row_comparer",
                "name": "test_are_rows_equal",
                "time": 0.0005095005035400391,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_row_comparer",
                "name": "test_are_rows_equal_enhanced",
                "time": 0.0006072521209716797,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_row_comparer",
                "name": "test_are_rows_approx_equal",
                "time": 0.0005402565002441406,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_rows_comparer.describe_assert_basic_rows_equality",
                "name": "it_throws_with_row_mismatches",
                "time": 0.1692500114440918,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_rows_comparer.describe_assert_basic_rows_equality",
                "name": "it_works_when_rows_are_the_same",
                "time": 0.16071319580078125,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality",
                "name": "it_does_nothing_when_equal",
                "time": 0.0006334781646728516,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality",
                "name": "it_throws_when_column_names_differ",
                "time": 0.0023245811462402344,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality",
                "name": "it_throws_when_schema_lengths_differ",
                "time": 0.001726388931274414,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality_ignore_nullable",
                "name": "it_has_good_error_messages_for_different_sized_schemas",
                "time": 0.0018949508666992188,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality_ignore_nullable",
                "name": "it_does_nothing_when_equal",
                "time": 0.0005984306335449219,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_assert_schema_equality_ignore_nullable",
                "name": "it_does_nothing_when_only_nullable_flag_is_different",
                "time": 0.0005657672882080078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_true_when_only_nullable_flag_is_different",
                "time": 0.0010232925415039062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_true_when_only_nullable_flag_is_different_within_array_element",
                "time": 0.0005571842193603516,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_true_when_only_nullable_flag_is_different_within_nested_array_element",
                "time": 0.0005452632904052734,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_false_when_the_element_type_is_different_within_array",
                "time": 0.0005333423614501953,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_false_when_column_names_differ",
                "time": 0.0005660057067871094,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_schemas_equal_ignore_nullable",
                "name": "it_returns_false_when_columns_have_different_order",
                "time": 0.0005452632904052734,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_true_when_only_nullable_flag_is_different_within_array_element",
                "time": 0.0005037784576416016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_false_when_the_element_type_is_different_within_array",
                "time": 0.0005261898040771484,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_true_when_the_element_type_is_same_within_struct",
                "time": 0.0009219646453857422,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_false_when_the_element_type_is_different_within_struct",
                "time": 0.0006482601165771484,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_false_when_the_element_name_is_different_within_struct",
                "time": 0.0005614757537841797,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_comparer.describe_are_structfield_types_equal_ignore_nullable",
                "name": "it_returns_true_when_different_nullability_within_struct",
                "time": 0.0005514621734619141,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_true_when_structfields_are_the_same",
                "time": 0.0004417896270751953,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_column_names_are_different",
                "time": 0.00036716461181640625,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_nullable_property_is_different",
                "time": 0.0005123615264892578,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_can_perform_nullability_insensitive_comparisons",
                "time": 0.0004169940948486328,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_true_when_nested_types_are_the_same",
                "time": 0.0010685920715332031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_nested_names_are_different",
                "time": 0.0003991127014160156,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_nested_types_are_different",
                "time": 0.0004298686981201172,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_nested_types_have_different_nullability",
                "time": 0.00041413307189941406,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_false_when_nested_types_are_different_with_ignore_nullable_true",
                "time": 0.0004169940948486328,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_structfield_comparer.describe_are_structfields_equal",
                "name": "it_returns_true_when_nested_types_have_different_nullability_with_ignore_null_true",
                "time": 0.00041794776916503906,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[a184c06a-2666-44f0-a203-cf1497a12368/test] \ud83d\ude80  Start image=crawlergpt:latest\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MrPowers-chispa] user=0 workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2601  git clone 'https://github.com/snok/install-poetry' # ref=v1\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Pre Install Poetry\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Pre Install Poetry\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2601  git clone 'https://github.com/actions/cache' # ref=v1\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Main actions/checkout@v1\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Main actions/checkout@v1\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Main Set up Python 3.9\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/dd15e1b2-9e7d-41a7-8fc2-fe6c0a09b6e7/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::isExplicit: \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::explicit? false\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::explicit? true\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::explicit? true\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::explicit? true\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::explicit? true\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::explicit? true\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::explicit? true\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::matched: 3.9.6\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Successfully setup CPython (3.9.6)\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Main Set up Python 3.9\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2699  ::set-output:: python-version=3.9.6\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Main Install Poetry\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/dd15e1b2-9e7d-41a7-8fc2-fe6c0a09b6e7/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Main Install and configure Poetry\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-0.sh] user= workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \u001b[33mSetting Poetry installation path as /home/runneradmin/.local\u001b[0m\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \u001b[33mInstalling Poetry \ud83d\udc77\u001b[0m\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Retrieving Poetry metadata\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | # Welcome to Poetry!\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | This will download and install the latest version of Poetry,\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | a dependency and package manager for Python.\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | /home/runneradmin/.local/bin\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | You can uninstall at any time by executing this script with the --uninstall option,\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | and these changes will be reverted.\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Installing Poetry (1.5.1)\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Installing Poetry (1.5.1): Creating environment\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Installing Poetry (1.5.1): Installing Poetry\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Installing Poetry (1.5.1): Creating script\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Installing Poetry (1.5.1): Done\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Poetry (1.5.1) is installed now. Great!\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | environment variable.\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | You can test that everything is set up by executing:\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | `poetry --version`\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \u001b[33mInstallation completed. Configuring settings \ud83d\udee0\u001b[0m\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \u001b[33mDone \u2705\u001b[0m\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \u001b[33mIf you are creating a venv in your project, you can activate it by running 'source .venv/bin/activate'. If you're running this in an OS matrix, you can use 'source $VENV' instead, as an OS agnostic option\u001b[0m\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Main Install and configure Poetry\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Main Install Poetry\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Main Cache Poetry virtualenv\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/dd15e1b2-9e7d-41a7-8fc2-fe6c0a09b6e7/act/actions-cache@v1/ dst=/var/run/act/actions/actions-cache@v1/\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v1/] user=0 workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v1/dist/restore/index.js] user= workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::Cache Path: /home/runneradmin/.virtualenvs\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::Resolved Keys:\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::[\"poetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0\",\"poetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0\"]\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:40309/_apis/artifactcache/cache?keys=poetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0%252Cpoetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Cache not found for input keys: poetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0, poetry-700080ff69ad268670a351087fc07fd6d3f61af6a67f5572b146e544481739f0.\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Main Cache Poetry virtualenv\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Main Install dependencies\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Creating virtualenv chispa-oRwF5F9n-py3.9 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Installing dependencies from lock file\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Package operations: 6 installs, 1 update, 0 removals\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   |   \u2022 Installing py (1.11.0)\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   |   \u2022 Updating setuptools (67.8.0 -> 67.6.0)\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   |   \u2022 Installing py4j (0.10.9.5)\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   |   \u2022 Installing pytest (3.2.2)\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   |   \u2022 Installing findspark (1.4.2)\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   |   \u2022 Installing pyspark (3.3.2)\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   |   \u2022 Installing pytest-describe (1.0.0)\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | Installing the current project: chispa (0.9.2)\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Main Install dependencies\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Main Run tests with pytest\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | ============================= test session starts ==============================\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | platform linux -- Python 3.9.6, pytest-3.2.2, py-1.11.0, pluggy-0.4.0\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MrPowers-chispa, inifile:\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | plugins: describe-1.0.0\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | collected 74 items\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | tests/test_column_comparer.py .......\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | tests/test_dataframe_comparer.py ....................\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | tests/test_readme_examples.py ..............\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | tests/test_row_comparer.py ...\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | tests/test_rows_comparer.py ..\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | tests/test_schema_comparer.py ..................\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | tests/test_structfield_comparer.py ..........\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/MrPowers-chispa/report.xml -\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | ========================== 74 passed in 22.80 seconds ==========================\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Main Run tests with pytest\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Post Cache Poetry virtualenv\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v1/dist/save/index.js] user= workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::State: \n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::Reserving Cache\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:40309/_apis/artifactcache/caches\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::Cache ID: 1\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::Cache Path: /home/runneradmin/.virtualenvs\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udcac  ::debug::Archive Path: /tmp/174afe6e-ea53-4c16-b0e7-36d56f6ae667/cache.tgz\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | [command]/usr/bin/tar -cz -f /tmp/174afe6e-ea53-4c16-b0e7-36d56f6ae667/cache.tgz -C /home/runneradmin/.virtualenvs .\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | /usr/bin/tar: /home/runneradmin/.virtualenvs: Cannot open: No such file or directory\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | /usr/bin/tar: Error is not recoverable: exiting now\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   | [warning]Tar failed with error: The process '/usr/bin/tar' failed with exit code 2\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Post Cache Poetry virtualenv\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Post Install Poetry\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/dd15e1b2-9e7d-41a7-8fc2-fe6c0a09b6e7/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Post Install Poetry\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \u2b50 Run Post Set up Python 3.9\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/cache-save/index.js] user= workdir=\n[a184c06a-2666-44f0-a203-cf1497a12368/test]   \u2705  Success - Post Set up Python 3.9\n[a184c06a-2666-44f0-a203-cf1497a12368/test] \ud83c\udfc1  Job succeeded\n",
        "stderr": "",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/MrPowers-chispa/.github/workflows/ci-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "a184c06a-2666-44f0-a203-cf1497a12368",
        "build_tool": "pytest",
        "elapsed_time": 218.48263001441956
    }
}