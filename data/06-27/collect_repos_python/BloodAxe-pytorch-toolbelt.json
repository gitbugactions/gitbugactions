{
    "repository": "BloodAxe/pytorch-toolbelt",
    "stars": 1402,
    "language": "python",
    "size": 3160,
    "clone_url": "https://github.com/BloodAxe/pytorch-toolbelt.git",
    "timestamp": "2023-06-28T13:43:36.695545Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_activations",
                "name": "test_activations[none]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations[relu]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations[relu6]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations[leaky_relu]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations[elu]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations[selu]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations[celu]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations[mish]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations[swish]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations[hard_sigmoid]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations[hard_swish]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[none]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[relu]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[relu6]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[leaky_relu]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[elu]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[selu]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[celu]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[mish]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[swish]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[hard_sigmoid]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_activations",
                "name": "test_activations_cuda[hard_swish]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ddp_utils",
                "name": "test_approximate_bucket_assignment",
                "time": 0.179,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[FPNDecoder-decoder_params0]",
                "time": 1.155,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[FPNDecoder-decoder_params1]",
                "time": 0.372,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[FPNDecoder-decoder_params2]",
                "time": 0.452,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[BiFPNDecoder-decoder_params3]",
                "time": 1.757,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[DeeplabV3PlusDecoder-decoder_params4]",
                "time": 0.7,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[DeeplabV3Decoder-decoder_params5]",
                "time": 0.547,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[CANDecoder-decoder_params6]",
                "time": 1.547,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[UNetDecoder-decoder_params7]",
                "time": 1.109,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[UNetDecoder-decoder_params8]",
                "time": 0.93,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[UNetDecoder-decoder_params9]",
                "time": 0.951,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[UNetDecoder-decoder_params10]",
                "time": 0.687,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_decoders",
                "name": "test_decoders[UNetDecoder-decoder_params11]",
                "time": 1.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_mobilenetv3_encoders[MobileNetV3Large-encoder_params0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_mobilenetv3_encoders[MobileNetV3Small-encoder_params1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[MobilenetV2Encoder-encoder_params0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[Resnet34Encoder-encoder_params1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[Resnet50Encoder-encoder_params2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[SEResNeXt50Encoder-encoder_params3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[SEResnet50Encoder-encoder_params4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[Resnet152Encoder-encoder_params5]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[Resnet101Encoder-encoder_params6]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[SEResnet152Encoder-encoder_params7]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[SEResNeXt101Encoder-encoder_params8]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[SEResnet101Encoder-encoder_params9]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[SENet154Encoder-encoder_params10]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[WiderResnet16Encoder-encoder_params11]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[WiderResnet20Encoder-encoder_params12]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[WiderResnet38Encoder-encoder_params13]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[WiderResnet16A2Encoder-encoder_params14]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[WiderResnet20A2Encoder-encoder_params15]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[WiderResnet38A2Encoder-encoder_params16]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[DenseNet121Encoder-encoder_params17]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[DenseNet161Encoder-encoder_params18]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[DenseNet169Encoder-encoder_params19]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_encoders[DenseNet201Encoder-encoder_params20]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_unet_encoder",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_inceptionv4_encoder",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_densenet",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_hrnet_encoder[HRNetV2Encoder18-encoder_params0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_hrnet_encoder[HRNetV2Encoder34-encoder_params1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_hrnet_encoder[HRNetV2Encoder48-encoder_params2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_xresnet_encoder[XResNet18Encoder-encoder_params0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_xresnet_encoder[XResNet34Encoder-encoder_params1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_xresnet_encoder[XResNet50Encoder-encoder_params2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_xresnet_encoder[XResNet101Encoder-encoder_params3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_xresnet_encoder[XResNet152Encoder-encoder_params4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_xresnet_encoder[SEXResNet18Encoder-encoder_params5]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_xresnet_encoder[SEXResNet34Encoder-encoder_params6]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_xresnet_encoder[SEXResNet50Encoder-encoder_params7]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_xresnet_encoder[SEXResNet101Encoder-encoder_params8]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_xresnet_encoder[SEXResNet152Encoder-encoder_params9]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmB0Encoder-encoder_params0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmB0Encoder-encoder_params1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmB1Encoder-encoder_params2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmB1Encoder-encoder_params3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmB2Encoder-encoder_params4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmB3Encoder-encoder_params5]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmB4Encoder-encoder_params6]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmB5Encoder-encoder_params7]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmB6Encoder-encoder_params8]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmB7Encoder-encoder_params9]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmMixNetXLEncoder-encoder_params10]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[SKResNet18Encoder-encoder_params11]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[SKResNeXt50Encoder-encoder_params12]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[SWSLResNeXt101Encoder-encoder_params13]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmResnet200D-encoder_params14]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[HRNetW18Encoder-encoder_params15]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[HRNetW32Encoder-encoder_params16]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[HRNetW48Encoder-encoder_params17]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[DPN68Encoder-encoder_params18]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[DPN68BEncoder-encoder_params19]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[DPN92Encoder-encoder_params20]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[DPN107Encoder-encoder_params21]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[DPN131Encoder-encoder_params22]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFNetF0Encoder-encoder_params23]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFNetF1Encoder-encoder_params24]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFNetF2Encoder-encoder_params25]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFNetF3Encoder-encoder_params26]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFNetF4Encoder-encoder_params27]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFNetF5Encoder-encoder_params28]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFNetF6Encoder-encoder_params29]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFNetF7Encoder-encoder_params30]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFRegNetB0Encoder-encoder_params31]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFRegNetB1Encoder-encoder_params32]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFRegNetB2Encoder-encoder_params33]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFRegNetB3Encoder-encoder_params34]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFRegNetB4Encoder-encoder_params35]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[NFRegNetB5Encoder-encoder_params36]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmRes2Net101Encoder-encoder_params37]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmRes2Next50Encoder-encoder_params38]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_timm_encoders[TimmEfficientNetV2-encoder_params39]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_hourglass_encoder[StackedHGEncoder-encoder_params0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_hourglass_encoder[StackedHGEncoder-encoder_params1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_hourglass_encoder[StackedHGEncoder-encoder_params2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_hourglass_encoder[StackedHGEncoder-encoder_params3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_hourglass_encoder[StackedHGEncoder-encoder_params4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_hourglass_encoder[StackedHGEncoder-encoder_params5]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_supervised_hourglass_encoder[StackedSupervisedHGEncoder-encoder_params0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_swin_encoder[SwinT-encoder_params0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_swin_encoder[SwinS-encoder_params1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_swin_encoder[SwinB-encoder_params2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_swin_encoder[SwinL-encoder_params3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_mit_encoder[MitB0Encoder-encoder_params0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_mit_encoder[MitB1Encoder-encoder_params1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_mit_encoder[MitB2Encoder-encoder_params2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_mit_encoder[MitB3Encoder-encoder_params3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_mit_encoder[MitB4Encoder-encoder_params4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_encoders",
                "name": "test_mit_encoder[MitB5Encoder-encoder_params5]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_filesystem_utils",
                "name": "test_read_rgb_image_str",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_filesystem_utils",
                "name": "test_read_rgb_image_pathlib",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_filesystem_utils",
                "name": "test_read_image_as_is_str",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_filesystem_utils",
                "name": "test_read_image_as_is_pathlib",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_filesystem_utils",
                "name": "test_change_extension_str",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_filesystem_utils",
                "name": "test_change_extension_pathlib",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_init",
                "name": "test_first_class_background_init_conv",
                "time": 0.062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_init",
                "name": "test_first_class_background_init_linear",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_sigmoid_focal_loss_with_logits",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_softmax_focal_loss_with_logits",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_jaccard_score[y_true0-y_pred0-1.0-1e-05]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_jaccard_score[y_true1-y_pred1-1.0-1e-05]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_jaccard_score[y_true2-y_pred2-0.5-1e-05]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_jaccard_score_2[y_true0-y_pred0-1.0-1e-05]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_jaccard_score_2[y_true1-y_pred1-0.0-1e-05]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_jaccard_score_2[y_true2-y_pred2-0.5-1e-05]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_dice_score[y_true0-y_pred0-1.0-1e-05]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_dice_score[y_true1-y_pred1-1.0-1e-05]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_dice_score[y_true2-y_pred2-0.6666666666666666-1e-05]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_dice_loss_binary",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_binary_jaccard_loss",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_multiclass_jaccard_loss",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_multilabel_jaccard_loss",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_ce_loss",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_soft_bce_loss",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_classification_losses[criterion0]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_classification_losses[criterion1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_classification_losses[criterion2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_classification_losses[criterion3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_classification_losses[criterion4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_classification_losses[criterion5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_binary_bi_tempered_loss",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_losses",
                "name": "test_bbce",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_model_export",
                "name": "test_jit_trace[TimmB0Encoder-encoder_params0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_model_export",
                "name": "test_jit_trace[TimmMixNetXLEncoder-encoder_params1]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_model_export",
                "name": "test_jit_trace[SKResNet18Encoder-encoder_params2]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_model_export",
                "name": "test_jit_trace[SWSLResNeXt101Encoder-encoder_params3]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_model_export",
                "name": "test_jit_trace[TimmResnet200D-encoder_params4]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_model_export",
                "name": "test_jit_trace[HRNetW18Encoder-encoder_params5]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_model_export",
                "name": "test_jit_trace[DPN68Encoder-encoder_params6]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_model_export",
                "name": "test_jit_trace[NFNetF0Encoder-encoder_params7]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_model_export",
                "name": "test_jit_trace[NFRegNetB0Encoder-encoder_params8]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_model_export",
                "name": "test_jit_trace[TimmRes2Next50Encoder-encoder_params9]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "CUDA is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_modules",
                "name": "test_hff_dynamic_size",
                "time": 0.034,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_modules",
                "name": "test_hff_static_size",
                "time": 0.063,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_modules",
                "name": "test_residualdeconvolutionupsampleblock",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_modules",
                "name": "test_kmax_pool",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_optimizer",
                "name": "test_build_optimizer_param_groups",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tiles",
                "name": "test_tiles_split_merge",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tiles",
                "name": "test_tiles_split_merge_non_dividable",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tiles",
                "name": "test_tiles_split_merge_non_dividable_cuda",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tiles",
                "name": "test_tiles_split_merge_2",
                "time": 3.888,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tiles",
                "name": "test_tiles_split_merge_cuda",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Cuda is not available",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tta",
                "name": "test_d4_image2mask",
                "time": 0.106,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tta",
                "name": "test_flips_image2mask_v2",
                "time": 0.071,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tta",
                "name": "test_d2_image2mask_v2",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tta",
                "name": "test_d4_image2mask_v2",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tta",
                "name": "test_fliplr_image2mask",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tta",
                "name": "test_d4_image2label",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tta",
                "name": "test_fliplr_image2label",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tta",
                "name": "test_fivecrop_image2label",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tta",
                "name": "test_tencrop_image2label",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_unpad_xyxy_bboxes",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_make_n_channel_input",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_pad_unpad[shape0-32]",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_pad_unpad[shape1-32]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_pad_unpad[shape2-16]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_pad_unpad[shape3-7]",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_pad_unpad_nonsymmetric[shape0-padding0]",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_match_bboxes[gt_bboxes0-pred_bboxes0-1-true_positives0-false_positives0-false_negatives0-confusion_matrix0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_match_bboxes[gt_bboxes1-pred_bboxes1-2-true_positives1-false_positives1-false_negatives1-confusion_matrix1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_match_bboxes[gt_bboxes2-pred_bboxes2-1-true_positives2-false_positives2-false_negatives2-confusion_matrix2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_match_bboxes_hungarian[gt_bboxes0-pred_bboxes0-1-true_positives0-false_positives0-false_negatives0-confusion_matrix0]",
                "time": 0.39,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_match_bboxes_hungarian[gt_bboxes1-pred_bboxes1-2-true_positives1-false_positives1-false_negatives1-confusion_matrix1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_match_bboxes_hungarian[gt_bboxes2-pred_bboxes2-1-true_positives2-false_positives2-false_negatives2-confusion_matrix2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils_functional",
                "name": "test_get_collate_for_dataset",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_visualization",
                "name": "test_plot_confusion_matrix",
                "time": 2.825,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black] \ud83d\ude80  Start image=crawlergpt:latest\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \ud83d\ude80  Start image=crawlergpt:latest\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BloodAxe-pytorch-toolbelt] user=0 workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BloodAxe-pytorch-toolbelt] user=0 workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \ud83e\uddea  Matrix: map[operating-system:ubuntu-latest python-version:3.8 pytorch-toolbelt-version:tests]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \u2b50 Run Main Checkout\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2705  Success - Main Checkout\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black] \ud83e\uddea  Matrix: map[python-version:3.8]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black] \u2b50 Run Main Checkout\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2705  Success - Main Checkout\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \u2b50 Run Main Set up Python\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker cp src=/tmp/act-cache/de5bbf27-77d5-47d3-9854-d0b4d4b32571/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black] \u2b50 Run Main Set up Python\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker cp src=/tmp/act-cache/de5bbf27-77d5-47d3-9854-d0b4d4b32571/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::isExplicit: \n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::explicit? false\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::evaluating 6 versions\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::matched: 3.8.11\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::isExplicit: \n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::explicit? false\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Successfully setup CPython (3.8.11)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::explicit? true\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::matched: 3.8.11\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2705  Success - Main Set up Python\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Successfully setup CPython (3.8.11)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2705  Success - Main Set up Python\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2699  ::set-output:: python-version=3.8.11\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2699  ::set-output:: python-version=3.8.11\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \u2b50 Run Main Update pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black] \u2b50 Run Main Update pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (21.2.4)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (21.2.4)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Collecting pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Installing collected packages: pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Attempting uninstall: pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |     Found existing installation: pip 21.2.4\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Installing collected packages: pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |   Attempting uninstall: pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |     Found existing installation: pip 21.2.4\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |     Uninstalling pip-21.2.4:\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |     Uninstalling pip-21.2.4:\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |       Successfully uninstalled pip-21.2.4\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |       Successfully uninstalled pip-21.2.4\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Successfully installed pip-23.1.2\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Successfully installed pip-23.1.2\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2705  Success - Main Update pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2705  Success - Main Update pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \u2b50 Run Main Install PyTorch\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black] \u2b50 Run Main Install Black\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Looking in indexes: https://pypi.org/simple, https://download.pytorch.org/whl/cpu\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Collecting black==23.3.0\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |   Downloading black-23.3.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 12.7 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Collecting click>=8.0.0 (from black==23.3.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 1.9 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Collecting mypy-extensions>=0.4.3 (from black==23.3.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Collecting packaging>=22.0 (from black==23.3.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 959.4 kB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Collecting pathspec>=0.9.0 (from black==23.3.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |   Downloading pathspec-0.11.1-py3-none-any.whl (29 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting torch\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading https://download.pytorch.org/whl/cpu/torch-2.0.1%2Bcpu-cp38-cp38-linux_x86_64.whl (195.4 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Collecting platformdirs>=2 (from black==23.3.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Collecting tomli>=1.1.0 (from black==23.3.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Collecting typing-extensions>=3.10.0.0 (from black==23.3.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Installing collected packages: typing-extensions, tomli, platformdirs, pathspec, packaging, mypy-extensions, click, black\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Successfully installed black-23.3.0 click-8.1.3 mypy-extensions-1.0.0 packaging-23.1 pathspec-0.11.1 platformdirs-3.8.0 tomli-2.0.1 typing-extensions-4.6.3\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | \n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | [notice] A new release of pip is available: 21.1.1 -> 23.1.2\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | [notice] To update, run: pip install --upgrade pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2705  Success - Main Install Black\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black] \u2b50 Run Main Run Black\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | Skipping .ipynb files as Jupyter dependencies are not installed.\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | You can fix this by running ``pip install \"black[jupyter]\"``\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | All done! \u2728 \ud83c\udf70 \u2728\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   | 123 files would be left unchanged.\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2705  Success - Main Run Black\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black] \u2b50 Run Post Set up Python\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 195.4/195.4 MB 6.2 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/cache-save/index.js] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting torchvision\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading https://download.pytorch.org/whl/cpu/torchvision-0.15.2%2Bcpu-cp38-cp38-linux_x86_64.whl (24.9 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 24.9/24.9 MB 31.9 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting torchaudio\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading https://download.pytorch.org/whl/cpu/torchaudio-2.0.2%2Bcpu-cp38-cp38-linux_x86_64.whl (4.1 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.1/4.1 MB 6.8 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black]   \u2705  Success - Post Set up Python\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting filelock (from torch)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting typing-extensions (from torch)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting sympy (from torch)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading sympy-1.12-py3-none-any.whl (5.7 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 5.7/5.7 MB 49.2 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Check code formatting with Black] \ud83c\udfc1  Job succeeded\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting networkx (from torch)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading networkx-3.1-py3-none-any.whl (2.1 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 13.2 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting jinja2 (from torch)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading https://download.pytorch.org/whl/Jinja2-3.1.2-py3-none-any.whl (133 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 133.1/133.1 kB 1.2 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting numpy (from torchvision)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading numpy-1.24.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.3 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 17.3/17.3 MB 14.8 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting requests (from torchvision)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 4.5 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting pillow!=8.3.*,>=5.3.0 (from torchvision)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading Pillow-9.5.0-cp38-cp38-manylinux_2_28_x86_64.whl (3.4 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.4/3.4 MB 13.2 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting MarkupSafe>=2.0 (from jinja2->torch)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading MarkupSafe-2.1.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting charset-normalizer<4,>=2 (from requests->torchvision)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading charset_normalizer-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (195 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 195.9/195.9 kB 2.5 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting idna<4,>=2.5 (from requests->torchvision)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading https://download.pytorch.org/whl/idna-3.4-py3-none-any.whl (61 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 2.0 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting urllib3<3,>=1.21.1 (from requests->torchvision)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 7.9 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting certifi>=2017.4.17 (from requests->torchvision)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 19.7 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting mpmath>=0.19 (from sympy->torch)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading mpmath-1.3.0-py3-none-any.whl (536 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 536.2/536.2 kB 8.9 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Installing collected packages: mpmath, urllib3, typing-extensions, sympy, pillow, numpy, networkx, MarkupSafe, idna, filelock, charset-normalizer, certifi, requests, jinja2, torch, torchvision, torchaudio\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Successfully installed MarkupSafe-2.1.3 certifi-2023.5.7 charset-normalizer-3.1.0 filelock-3.12.2 idna-3.4 jinja2-3.1.2 mpmath-1.3.0 networkx-3.1 numpy-1.24.4 pillow-9.5.0 requests-2.31.0 sympy-1.12 torch-2.0.1+cpu torchaudio-2.0.2+cpu torchvision-0.15.2+cpu typing-extensions-4.6.3 urllib3-2.0.3\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | \n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | [notice] A new release of pip is available: 21.1.1 -> 23.1.2\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | [notice] To update, run: pip install --upgrade pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2705  Success - Main Install PyTorch\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \u2b50 Run Main Install dependencies\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Processing /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BloodAxe-pytorch-toolbelt\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Installing build dependencies: started\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Installing build dependencies: finished with status 'done'\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Getting requirements to build wheel: started\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Getting requirements to build wheel: finished with status 'done'\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Preparing metadata (pyproject.toml): started\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: torch>=1.11.0 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from pytorch-toolbelt==0.6.3) (2.0.1+cpu)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: torchvision in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from pytorch-toolbelt==0.6.3) (0.15.2+cpu)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting scipy>=1.4.0 (from pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.5 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 34.5/34.5 MB 23.0 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting opencv-python-headless>=4.1 (from pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading opencv_python_headless-4.7.0.72-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (49.2 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 49.2/49.2 MB 13.1 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting pytest (from pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 6.0 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting black==23.3.0 (from pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading black-23.3.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 8.4 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting timm==0.6.7 (from pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading timm-0.6.7-py3-none-any.whl (509 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 510.0/510.0 kB 17.8 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting matplotlib (from pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading matplotlib-3.7.1-cp38-cp38-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (9.2 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 9.2/9.2 MB 27.0 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting click>=8.0.0 (from black==23.3.0->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 8.4 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting mypy-extensions>=0.4.3 (from black==23.3.0->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting packaging>=22.0 (from black==23.3.0->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.4 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting pathspec>=0.9.0 (from black==23.3.0->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading pathspec-0.11.1-py3-none-any.whl (29 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting platformdirs>=2 (from black==23.3.0->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting tomli>=1.1.0 (from black==23.3.0->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: typing-extensions>=3.10.0.0 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from black==23.3.0->pytorch-toolbelt==0.6.3) (4.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: numpy>=1.17.0 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from opencv-python-headless>=4.1->pytorch-toolbelt==0.6.3) (1.24.4)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: filelock in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from torch>=1.11.0->pytorch-toolbelt==0.6.3) (3.12.2)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: sympy in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from torch>=1.11.0->pytorch-toolbelt==0.6.3) (1.12)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: networkx in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from torch>=1.11.0->pytorch-toolbelt==0.6.3) (3.1)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: jinja2 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from torch>=1.11.0->pytorch-toolbelt==0.6.3) (3.1.2)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting contourpy>=1.0.1 (from matplotlib->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading contourpy-1.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (300 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 300.4/300.4 kB 7.0 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting cycler>=0.10 (from matplotlib->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading cycler-0.11.0-py3-none-any.whl (6.4 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting fonttools>=4.22.0 (from matplotlib->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading fonttools-4.40.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.4 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.4/4.4 MB 33.0 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting kiwisolver>=1.0.1 (from matplotlib->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading kiwisolver-1.4.4-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl (1.2 MB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.2/1.2 MB 24.1 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: pillow>=6.2.0 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from matplotlib->pytorch-toolbelt==0.6.3) (9.5.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting pyparsing>=2.3.1 (from matplotlib->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading pyparsing-3.1.0-py3-none-any.whl (102 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 102.6/102.6 kB 3.1 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting python-dateutil>=2.7 (from matplotlib->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 247.7/247.7 kB 4.9 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting importlib-resources>=3.2.0 (from matplotlib->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading importlib_resources-5.12.0-py3-none-any.whl (36 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting iniconfig (from pytest->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting pluggy<2.0,>=0.12 (from pytest->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: requests in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from torchvision->pytorch-toolbelt==0.6.3) (2.31.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting zipp>=3.1.0 (from importlib-resources>=3.2.0->matplotlib->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting six>=1.5 (from python-dateutil>=2.7->matplotlib->pytorch-toolbelt==0.6.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: MarkupSafe>=2.0 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from jinja2->torch>=1.11.0->pytorch-toolbelt==0.6.3) (2.1.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: charset-normalizer<4,>=2 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests->torchvision->pytorch-toolbelt==0.6.3) (3.1.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: idna<4,>=2.5 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests->torchvision->pytorch-toolbelt==0.6.3) (3.4)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests->torchvision->pytorch-toolbelt==0.6.3) (2.0.3)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: certifi>=2017.4.17 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from requests->torchvision->pytorch-toolbelt==0.6.3) (2023.5.7)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Requirement already satisfied: mpmath>=0.19 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from sympy->torch>=1.11.0->pytorch-toolbelt==0.6.3) (1.3.0)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Building wheels for collected packages: pytorch-toolbelt\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Building wheel for pytorch-toolbelt (pyproject.toml): started\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Building wheel for pytorch-toolbelt (pyproject.toml): finished with status 'done'\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Created wheel for pytorch-toolbelt: filename=pytorch_toolbelt-0.6.3-py3-none-any.whl size=167020 sha256=366bd47dd2c5d32a256097a0c82a0bea20058abf6c6e7aae58fa42ad8c79239b\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/41/04/39/696a8bb0fa83d7394bb10b7d0f6e413d7f2b517418d825ec22\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Successfully built pytorch-toolbelt\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Installing collected packages: zipp, tomli, six, scipy, pyparsing, pluggy, platformdirs, pathspec, packaging, opencv-python-headless, mypy-extensions, kiwisolver, iniconfig, fonttools, exceptiongroup, cycler, contourpy, click, python-dateutil, pytest, importlib-resources, black, matplotlib, timm, pytorch-toolbelt\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Successfully installed black-23.3.0 click-8.1.3 contourpy-1.1.0 cycler-0.11.0 exceptiongroup-1.1.1 fonttools-4.40.0 importlib-resources-5.12.0 iniconfig-2.0.0 kiwisolver-1.4.4 matplotlib-3.7.1 mypy-extensions-1.0.0 opencv-python-headless-4.7.0.72 packaging-23.1 pathspec-0.11.1 platformdirs-3.8.0 pluggy-1.2.0 pyparsing-3.1.0 pytest-7.4.0 python-dateutil-2.8.2 pytorch-toolbelt-0.6.3 scipy-1.10.1 six-1.16.0 timm-0.6.7 tomli-2.0.1 zipp-3.15.0\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | \n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | [notice] A new release of pip is available: 21.1.1 -> 23.1.2\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | [notice] To update, run: pip install --upgrade pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2705  Success - Main Install dependencies\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \u2b50 Run Main Install linters\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting flake8==5\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading flake8-5.0.0-py2.py3-none-any.whl (61 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.7/61.7 kB 8.6 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting mccabe<0.8.0,>=0.7.0 (from flake8==5)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting pycodestyle<2.10.0,>=2.9.0 (from flake8==5)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading pycodestyle-2.9.1-py2.py3-none-any.whl (41 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.5/41.5 kB 1.1 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Collecting pyflakes<2.6.0,>=2.5.0 (from flake8==5)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   Downloading pyflakes-2.5.0-py2.py3-none-any.whl (66 kB)\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 66.1/66.1 kB 2.8 MB/s eta 0:00:00\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Installing collected packages: pyflakes, pycodestyle, mccabe, flake8\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | Successfully installed flake8-5.0.0 mccabe-0.7.0 pycodestyle-2.9.1 pyflakes-2.5.0\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | \n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | [notice] A new release of pip is available: 21.1.1 -> 23.1.2\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | [notice] To update, run: pip install --upgrade pip\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2705  Success - Main Install linters\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \u2b50 Run Main Run PyTest\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | ============================= test session starts ==============================\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | platform linux -- Python 3.8.11, pytest-7.4.0, pluggy-1.2.0\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BloodAxe-pytorch-toolbelt\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | collected 208 items\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | \n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_activations.py ...........sssssssssss                         [ 10%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_ddp_utils.py .                                                [ 11%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_decoders.py ............                                      [ 16%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_encoders.py sssssssssssssssssssssssssssssssssssssssssssssssss [ 40%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | sssssssssssssssssssssssssssssssssssssssssssssss                          [ 62%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_filesystem_utils.py ......                                    [ 65%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_init.py ..                                                    [ 66%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_losses.py .........................                           [ 78%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_model_export.py ssssssssss                                    [ 83%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_modules.py ....                                               [ 85%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_optimizer.py .                                                [ 86%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_tiles.py ..s.s                                                [ 88%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_tta.py .........                                              [ 92%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_utils_functional.py ..............                            [ 99%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_visualization.py .                                            [100%]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | \n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | =============================== warnings summary ===============================\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_decoders.py: 11 warnings\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/torch/jit/_trace.py:1056: TracerWarning: Encountering a list at the output of the tracer might cause the trace to be incorrect, this is only valid if the container structure does not change based on the module's inputs. Consider using a constant container instead (e.g. for `list`, use a `tuple` instead. for `dict`, use a `NamedTuple` instead). If you absolutely need this and know the side effects, pass strict=False to trace() to allow this behavior.\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |     module._c._create_method_from_trace(\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | \n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_decoders.py::test_decoders[FPNDecoder-decoder_params2]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_decoders.py::test_decoders[UNetDecoder-decoder_params7]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | tests/test_decoders.py::test_decoders[UNetDecoder-decoder_params11]\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |   /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/torch/nn/modules/conv.py:661: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   |     if size < min_size or size > max_size:\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | \n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BloodAxe-pytorch-toolbelt/report.xml -\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   | ================ 89 passed, 119 skipped, 14 warnings in 24.03s =================\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2705  Success - Main Run PyTest\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \u2b50 Run Main Run Flake8\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2705  Success - Main Run Flake8\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \u2b50 Run Post Set up Python\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/cache-save/index.js] user= workdir=\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ]   \u2705  Success - Post Set up Python\n[2c28b44f-47e4-4357-a514-9443ec939ced/Test and lint                   ] \ud83c\udfc1  Job succeeded\n",
        "stderr": "",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BloodAxe-pytorch-toolbelt/.github/workflows/ci-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 294.1654133796692
    }
}