{
    "repository": "dflook/terraform-github-actions",
    "stars": 474,
    "language": "python",
    "size": 9627,
    "clone_url": "https://github.com/dflook/terraform-github-actions.git",
    "timestamp": "2023-06-28T15:41:32.357331Z",
    "clone_success": true,
    "number_of_actions": 28,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "pytest",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "tests.test_cloud_state",
                "name": "test_get_run_url",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_11",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_12",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_14",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_15",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_refresh_no_changes_11",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_refresh_no_changes_14",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_refresh_no_changes_15",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_refresh_no_changes_1",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_no_resource_output_only_11",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_no_resource_output_only_14",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_no_resource_output_only_15_4",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_refresh_changes_11",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_refresh_changes_14",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_refresh_changes_15",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_move_only",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_error_11",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_error_12",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_no_change_11",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_no_change_14",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_no_output",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_state_lock_12",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_compact_plan",
                "name": "test_plan_no_changes_1_4",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_git_credential_actions",
                "name": "test_read_credentials",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_git_credential_actions",
                "name": "test_read_attributes",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_git_credential_actions",
                "name": "test_write_attributes",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_git_credential_actions",
                "name": "test_split_path",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_git_credential_actions",
                "name": "test_get",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_lock_info",
                "name": "test_not_locked",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_lock_info",
                "name": "test_no_lock_info",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_lock_info",
                "name": "test_locked_1_3_7",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_lock_info",
                "name": "test_locked_0_12_0",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_module",
                "name": "test_get_sensitive_variables",
                "time": 0.304,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_string",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_number",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_bool",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_tuple",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_list",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_map",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_object",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_set",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_output",
                "name": "test_compound",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_render",
                "name": "test_render_number",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_render",
                "name": "test_render_bool",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_render",
                "name": "test_render_null",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_render",
                "name": "test_render_sensitive",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_render",
                "name": "test_render_string",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_render",
                "name": "test_render_sequence",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_render",
                "name": "test_render_mapping",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_render",
                "name": "test_render_value",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_render",
                "name": "test_render_argument_list",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terraform_checksums",
                "name": "test_get_checksums",
                "time": 1.852,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terraform_checksums",
                "name": "test_verify_archive",
                "time": 2.157,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_validate",
                "name": "test_valid",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_validate",
                "name": "test_invalid",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_validate",
                "name": "test_blah",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_validate",
                "name": "test_invalid_paths",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_validate",
                "name": "test_json_0_1",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_version",
                "name": "test_convert_version",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_version",
                "name": "test_convert_old_version",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_version",
                "name": "test_convert_with_provider",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_version",
                "name": "test_convert_with_multiple_providers",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_version",
                "name": "test_convert_0_13_providers",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_version",
                "name": "test_convert_0_13_json_providers",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_write_credentials",
                "name": "test_single_cred",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_write_credentials",
                "name": "test_multiple_creds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_write_credentials",
                "name": "test_unrecognised_lines",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_cmp",
                "name": "test_remove_unchanged_attributes",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_cmp",
                "name": "test_remove_warnings",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_cmp",
                "name": "test_remove_warnings_11",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_comment",
                "name": "test_comment_header",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_comment",
                "name": "test_no_headers",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_comment",
                "name": "test_headers",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_comment",
                "name": "test_bad_description",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_comment",
                "name": "test_bad_body",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_fingerprint",
                "name": "test_read_backend_config_files",
                "time": 0.281,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_fingerprint",
                "name": "test_read_read_module_backend_config",
                "time": 1.183,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_fingerprint",
                "name": "test_read_backend_config_input",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_fingerprint",
                "name": "test_complete_config",
                "time": 1.409,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_fingerprint",
                "name": "test_partial_config",
                "time": 0.585,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_path_only",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_nondefault_workspace",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_variables_single_line",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_variables_multi_line",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_var",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_var_file",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_backend_config",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_backend_config_bad_words",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_target",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_replace",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_backend_config_file",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_all",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_legacy_comment",
                "name": "test_label",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_summary",
                "name": "test_summary_plan_11",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_summary",
                "name": "test_summary_plan_12",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_summary",
                "name": "test_summary_plan_14",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_summary",
                "name": "test_summary_error_11",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_summary",
                "name": "test_summary_error_12",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_summary",
                "name": "test_summary_no_change_11",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_summary",
                "name": "test_summary_no_change_14",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_summary",
                "name": "test_summary_output_only_change_14",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_summary",
                "name": "test_summary_unknown",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.github_pr_comment.test_summary",
                "name": "test_summary_move_only",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_asdf",
                "name": "test_parse_asdf",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_latest",
                "name": "test_latest",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_local_state",
                "name": "test_state[0.13.6]",
                "time": 2.11,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_local_state",
                "name": "test_state[1.1.2]",
                "time": 1.366,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_remote_state_s3",
                "name": "test_state[0.9.7]",
                "time": 3.074,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_0.9.7/terraform'), 'init'], returncode=1, stdout=b'\\x1b[0m\\x1b[1mInit...se update the configuration in your Terraform files to fix this error\\nthen run this command again.\\n\\x1b[0m\\x1b[0m\\n').returncode\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_remote_state_s3",
                "name": "test_state[0.11.8]",
                "time": 23.149,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_0.11.8/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mI...se update the configuration in your Terraform files to fix this error\\nthen run this command again.\\n\\x1b[0m\\x1b[0m\\n').returncode\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_remote_state_s3",
                "name": "test_state[1.1.2]",
                "time": 7.202,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_1.1.2/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mIn...\\x82\\x1b[0m \\x1b[0m\\n\\x1b[31m\\xe2\\x94\\x82\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\\xe2\\x95\\xb5\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n').returncode\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_remote_state_s3",
                "name": "test_state[1.3.0]",
                "time": 7.5,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_1.3.0/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mIn...\\x82\\x1b[0m \\x1b[0m\\n\\x1b[31m\\xe2\\x94\\x82\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\\xe2\\x95\\xb5\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n').returncode\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_remote_state_s3",
                "name": "test_state[1.4.0]",
                "time": 7.468,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AssertionError: assert 1 == 0\n +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_1.4.0/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mIn...\\x82\\x1b[0m \\x1b[0m\\n\\x1b[31m\\xe2\\x94\\x82\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\\xe2\\x95\\xb5\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n').returncode\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_state",
                "name": "test_simple_backend",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_state",
                "name": "test_no_backend",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_state",
                "name": "test_oss_assume_role",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_state",
                "name": "test_backend_constraints",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_terraform_version",
                "name": "test_init_args",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_terraform_version",
                "name": "test_version",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_terraform_version",
                "name": "test_constraint",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_tfenv",
                "name": "test_parse_tfenv",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.terraform_version.test_tfswitch",
                "name": "test_parse_tfswitch",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64] \ud83d\ude80  Start image=crawlergpt:latest\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dflook-terraform-github-actions] user=0 workdir=\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64] \u2b50 Run Main Checkout\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2705  Success - Main Checkout\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64] \u2b50 Run Main Set up Python\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udc33  docker cp src=/tmp/act-cache/39f41111-ed50-4cc1-b3ce-27c873118b84/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2753  ::group::Installed versions\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::isExplicit: \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::explicit? false\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::explicit? true\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::explicit? true\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::explicit? true\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::explicit? true\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::explicit? true\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::explicit? true\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::evaluating 6 versions\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::matched: 3.9.6\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Successfully set up CPython (3.9.6)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2753  ::endgroup::\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2705  Success - Main Set up Python\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2699  ::set-output:: python-version=3.9.6\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64] \u2b50 Run Main Install dependencies\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting pip\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Installing collected packages: pip\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Attempting uninstall: pip\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     Found existing installation: pip 21.2.4\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     Uninstalling pip-21.2.4:\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |       Successfully uninstalled pip-21.2.4\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Successfully installed pip-23.1.2\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting requests (from -r tests/requirements.txt (line 1))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 5.9 MB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting pytest (from -r tests/requirements.txt (line 2))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 4.8 MB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting python-hcl2 (from -r tests/requirements.txt (line 3))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading python_hcl2-4.3.2-py3-none-any.whl (11 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting canonicaljson (from -r tests/requirements.txt (line 4))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading canonicaljson-2.0.0-py3-none-any.whl (7.9 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting types-requests (from -r tests/requirements.txt (line 5))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading types_requests-2.31.0.1-py3-none-any.whl (14 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting mypy (from -r tests/requirements.txt (line 6))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading mypy-1.4.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.0 MB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 12.0/12.0 MB 19.6 MB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting flake8 (from -r tests/requirements.txt (line 7))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading flake8-6.0.0-py2.py3-none-any.whl (57 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 57.8/57.8 kB 1.3 MB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting charset-normalizer<4,>=2 (from requests->-r tests/requirements.txt (line 1))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading charset_normalizer-3.1.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (199 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 199.2/199.2 kB 6.3 MB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting idna<4,>=2.5 (from requests->-r tests/requirements.txt (line 1))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 2.3 MB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting urllib3<3,>=1.21.1 (from requests->-r tests/requirements.txt (line 1))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 9.0 MB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting certifi>=2017.4.17 (from requests->-r tests/requirements.txt (line 1))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 4.9 MB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting iniconfig (from pytest->-r tests/requirements.txt (line 2))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting packaging (from pytest->-r tests/requirements.txt (line 2))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 4.5 MB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting pluggy<2.0,>=0.12 (from pytest->-r tests/requirements.txt (line 2))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->-r tests/requirements.txt (line 2))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting tomli>=1.0.0 (from pytest->-r tests/requirements.txt (line 2))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting lark<2,>=1 (from python-hcl2->-r tests/requirements.txt (line 3))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading lark-1.1.5-py3-none-any.whl (107 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 108.0/108.0 kB 16.3 MB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting types-urllib3 (from types-requests->-r tests/requirements.txt (line 5))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading types_urllib3-1.26.25.13-py3-none-any.whl (15 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting typing-extensions>=4.1.0 (from mypy->-r tests/requirements.txt (line 6))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting mypy-extensions>=1.0.0 (from mypy->-r tests/requirements.txt (line 6))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting mccabe<0.8.0,>=0.7.0 (from flake8->-r tests/requirements.txt (line 7))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting pycodestyle<2.11.0,>=2.10.0 (from flake8->-r tests/requirements.txt (line 7))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading pycodestyle-2.10.0-py2.py3-none-any.whl (41 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.3/41.3 kB 581.1 kB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Collecting pyflakes<3.1.0,>=3.0.0 (from flake8->-r tests/requirements.txt (line 7))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |   Downloading pyflakes-3.0.1-py2.py3-none-any.whl (62 kB)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.8/62.8 kB 529.1 kB/s eta 0:00:00\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Installing collected packages: types-urllib3, lark, urllib3, typing-extensions, types-requests, tomli, python-hcl2, pyflakes, pycodestyle, pluggy, packaging, mypy-extensions, mccabe, iniconfig, idna, exceptiongroup, charset-normalizer, certifi, canonicaljson, requests, pytest, mypy, flake8\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | Successfully installed canonicaljson-2.0.0 certifi-2023.5.7 charset-normalizer-3.1.0 exceptiongroup-1.1.1 flake8-6.0.0 idna-3.4 iniconfig-2.0.0 lark-1.1.5 mccabe-0.7.0 mypy-1.4.1 mypy-extensions-1.0.0 packaging-23.1 pluggy-1.2.0 pycodestyle-2.10.0 pyflakes-3.0.1 pytest-7.4.0 python-hcl2-4.3.2 requests-2.31.0 tomli-2.0.1 types-requests-2.31.0.1 types-urllib3-1.26.25.13 typing-extensions-4.6.3 urllib3-2.0.3\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | [notice] To update, run: pip install --upgrade pip\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: directory '/home/runneradmin/.gnupg' created\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: keybox '/home/runneradmin/.gnupg/pubring.kbx' created\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: /home/runneradmin/.gnupg/trustdb.gpg: trustdb created\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: key 34365D9472D7468F: public key \"HashiCorp Security (hashicorp.com/security) <security@hashicorp.com>\" imported\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Total number processed: 1\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg:               imported: 1\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: inserting ownertrust of 6\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u2705  Success - Main Install dependencies\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64] \u2b50 Run Main Run tests\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ============================= test session starts ==============================\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | platform linux -- Python 3.9.6, pytest-7.4.0, pluggy-1.2.0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dflook-terraform-github-actions\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | collected 121 items\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_cloud_state.py .                                              [  0%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_compact_plan.py ......................                        [ 19%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_git_credential_actions.py .....                               [ 23%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_lock_info.py ....                                             [ 26%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_module.py .                                                   [ 27%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_output.py .........                                           [ 34%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_render.py .........                                           [ 42%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_terraform_checksums.py ..                                     [ 43%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_validate.py .....                                             [ 47%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_version.py ......                                             [ 52%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/test_write_credentials.py ...                                      [ 55%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/github_pr_comment/test_cmp.py ...                                  [ 57%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/github_pr_comment/test_comment.py .....                            [ 61%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/github_pr_comment/test_fingerprint.py .....                        [ 66%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/github_pr_comment/test_legacy_comment.py .............             [ 76%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/github_pr_comment/test_summary.py ..........                       [ 85%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_asdf.py .                                   [ 85%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_latest.py .                                 [ 86%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_local_state.py ..                           [ 88%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_remote_state_s3.py EEEEE                    [ 92%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_state.py ....                               [ 95%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_terraform_version.py ...                    [ 98%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_tfenv.py .                                  [ 99%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_tfswitch.py .                               [100%]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ==================================== ERRORS ====================================\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | _____________________ ERROR at setup of test_state[0.9.7] ______________________\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | request = <SubRequest 'state_version' for <Function test_state[0.9.7]>>\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     @pytest.fixture(scope='module', params=[\"0.9.7\", \"0.11.8\", \"1.1.2\", \"1.3.0\", \"1.4.0\"] if get_arch() == 'amd64' else [\"0.13.5\", \"0.14.0\", \"1.1.2\", \"1.3.0\", \"1.4.0\"])\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     def state_version(request):\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         terraform_version = Version(request.param)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         terraform_path = get_executable(terraform_version)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         module_dir = os.path.join(os.getcwd(), '.terraform-state', str(terraform_version))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         os.makedirs(module_dir, exist_ok=True)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         with open(os.path.join(module_dir, 'main.tf'), 'w') as f:\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             backend_tf = '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     terraform {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         backend \"s3\" {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             bucket = \"terraform-github-actions\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             key    = \"test_remote_state_s3_''' + str(terraform_version) + '''\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             region = \"eu-west-2\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             dynamodb_table = \"terraform-github-actions\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             f.write(backend_tf + '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     output \"hello\" {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         value = \"hello\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             ''')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         # Here we go\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         result = subprocess.run(\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             [terraform_path, 'init'],\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             env=os.environ | {'TF_INPUT': 'false'},\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             capture_output=True,\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             cwd=module_dir\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         )\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.args=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.returncode=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.stdout.decode()=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.stderr.decode()=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | >       assert result.returncode == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | E       AssertionError: assert 1 == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | E        +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_0.9.7/terraform'), 'init'], returncode=1, stdout=b'\\x1b[0m\\x1b[1mInit...se update the configuration in your Terraform files to fix this error\\nthen run this command again.\\n\\x1b[0m\\x1b[0m\\n').returncode\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_remote_state_s3.py:186: AssertionError\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ---------------------------- Captured stdout setup -----------------------------\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | terraform_0.9.7_linux_amd64.zip: OK\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.args=[PosixPath('/tmp/terraform_0.9.7/terraform'), 'init']\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.returncode=1\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.stdout.decode()='\\x1b[0m\\x1b[1mInitializing the backend...\\x1b[0m\\n'\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.stderr.decode()='\\x1b[31m\\nError configuring the backend \"s3\": No valid credential sources found for AWS Provider.\\n  Please see https://terraform.io/docs/providers/aws/index.html for more information on\\n  providing credentials for the AWS Provider\\n\\nPlease update the configuration in your Terraform files to fix this error\\nthen run this command again.\\n\\x1b[0m\\x1b[0m\\n'\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ---------------------------- Captured stderr setup -----------------------------\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading signature from https://releases.hashicorp.com/terraform/0.9.7/terraform_0.9.7_SHA256SUMS.72D7468F.sig\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading checksums from https://releases.hashicorp.com/terraform/0.9.7/terraform_0.9.7_SHA256SUMS\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Signature made Tue Apr 19 07:40:22 2022 UTC\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg:                using RSA key 374EC75B485913604A831CC7C820C6D5CD27AB87\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Good signature from \"HashiCorp Security (hashicorp.com/security) <security@hashicorp.com>\" [ultimate]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading archive from https://releases.hashicorp.com/terraform/0.9.7/terraform_0.9.7_linux_amd64.zip\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | _____________________ ERROR at setup of test_state[0.11.8] _____________________\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | request = <SubRequest 'state_version' for <Function test_state[0.11.8]>>\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     @pytest.fixture(scope='module', params=[\"0.9.7\", \"0.11.8\", \"1.1.2\", \"1.3.0\", \"1.4.0\"] if get_arch() == 'amd64' else [\"0.13.5\", \"0.14.0\", \"1.1.2\", \"1.3.0\", \"1.4.0\"])\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     def state_version(request):\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         terraform_version = Version(request.param)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         terraform_path = get_executable(terraform_version)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         module_dir = os.path.join(os.getcwd(), '.terraform-state', str(terraform_version))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         os.makedirs(module_dir, exist_ok=True)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         with open(os.path.join(module_dir, 'main.tf'), 'w') as f:\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             backend_tf = '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     terraform {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         backend \"s3\" {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             bucket = \"terraform-github-actions\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             key    = \"test_remote_state_s3_''' + str(terraform_version) + '''\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             region = \"eu-west-2\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             dynamodb_table = \"terraform-github-actions\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             f.write(backend_tf + '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     output \"hello\" {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         value = \"hello\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             ''')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         # Here we go\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         result = subprocess.run(\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             [terraform_path, 'init'],\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             env=os.environ | {'TF_INPUT': 'false'},\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             capture_output=True,\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             cwd=module_dir\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         )\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.args=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.returncode=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.stdout.decode()=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.stderr.decode()=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | >       assert result.returncode == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | E       AssertionError: assert 1 == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | E        +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_0.11.8/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mI...se update the configuration in your Terraform files to fix this error\\nthen run this command again.\\n\\x1b[0m\\x1b[0m\\n').returncode\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_remote_state_s3.py:186: AssertionError\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ---------------------------- Captured stdout setup -----------------------------\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | terraform_0.11.8_linux_amd64.zip: OK\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.args=[PosixPath('/tmp/terraform_0.11.8/terraform'), 'init']\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.returncode=1\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.stdout.decode()='\\n\\x1b[0m\\x1b[1mInitializing the backend...\\x1b[0m\\n'\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.stderr.decode()='\\x1b[31m\\nError configuring the backend \"s3\": No valid credential sources found for AWS Provider.\\n\\tPlease see https://terraform.io/docs/providers/aws/index.html for more information on\\n\\tproviding credentials for the AWS Provider\\n\\nPlease update the configuration in your Terraform files to fix this error\\nthen run this command again.\\n\\x1b[0m\\x1b[0m\\n'\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ---------------------------- Captured stderr setup -----------------------------\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading signature from https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_SHA256SUMS.72D7468F.sig\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading checksums from https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_SHA256SUMS\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Signature made Tue Apr 19 07:30:15 2022 UTC\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg:                using RSA key 374EC75B485913604A831CC7C820C6D5CD27AB87\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Good signature from \"HashiCorp Security (hashicorp.com/security) <security@hashicorp.com>\" [ultimate]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading archive from https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | _____________________ ERROR at setup of test_state[1.1.2] ______________________\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | request = <SubRequest 'state_version' for <Function test_state[1.1.2]>>\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     @pytest.fixture(scope='module', params=[\"0.9.7\", \"0.11.8\", \"1.1.2\", \"1.3.0\", \"1.4.0\"] if get_arch() == 'amd64' else [\"0.13.5\", \"0.14.0\", \"1.1.2\", \"1.3.0\", \"1.4.0\"])\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     def state_version(request):\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         terraform_version = Version(request.param)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         terraform_path = get_executable(terraform_version)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         module_dir = os.path.join(os.getcwd(), '.terraform-state', str(terraform_version))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         os.makedirs(module_dir, exist_ok=True)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         with open(os.path.join(module_dir, 'main.tf'), 'w') as f:\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             backend_tf = '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     terraform {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         backend \"s3\" {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             bucket = \"terraform-github-actions\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             key    = \"test_remote_state_s3_''' + str(terraform_version) + '''\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             region = \"eu-west-2\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             dynamodb_table = \"terraform-github-actions\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             f.write(backend_tf + '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     output \"hello\" {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         value = \"hello\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             ''')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         # Here we go\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         result = subprocess.run(\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             [terraform_path, 'init'],\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             env=os.environ | {'TF_INPUT': 'false'},\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             capture_output=True,\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             cwd=module_dir\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         )\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.args=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.returncode=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.stdout.decode()=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.stderr.decode()=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | >       assert result.returncode == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | E       AssertionError: assert 1 == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | E        +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_1.1.2/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mIn...\\x82\\x1b[0m \\x1b[0m\\n\\x1b[31m\\xe2\\x94\\x82\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\\xe2\\x95\\xb5\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n').returncode\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_remote_state_s3.py:186: AssertionError\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ---------------------------- Captured stdout setup -----------------------------\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | terraform_1.1.2_linux_amd64.zip: OK\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.args=[PosixPath('/tmp/terraform_1.1.2/terraform'), 'init']\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.returncode=1\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.stdout.decode()='\\n\\x1b[0m\\x1b[1mInitializing the backend...\\x1b[0m\\n'\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.stderr.decode()='\\x1b[31m\\x1b[31m\u2577\\x1b[0m\\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\x1b[1m\\x1b[31mError: \\x1b[0m\\x1b[0m\\x1b[1merror configuring S3 Backend: no valid credential sources for S3 Backend found.\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0mPlease see https://www.terraform.io/docs/language/settings/backends/s3.html\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0mfor more information about providing credentials.\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0mError: NoCredentialProviders: no valid providers in chain. Deprecated.\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\tFor verbose messaging see aws.Config.CredentialsChainVerboseErrors\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\u2575\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n'\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ---------------------------- Captured stderr setup -----------------------------\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Signature made Mon Mar 20 18:07:27 2023 UTC\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg:                using RSA key 374EC75B485913604A831CC7C820C6D5CD27AB87\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Good signature from \"HashiCorp Security (hashicorp.com/security) <security@hashicorp.com>\" [ultimate]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | _____________________ ERROR at setup of test_state[1.3.0] ______________________\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | request = <SubRequest 'state_version' for <Function test_state[1.3.0]>>\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     @pytest.fixture(scope='module', params=[\"0.9.7\", \"0.11.8\", \"1.1.2\", \"1.3.0\", \"1.4.0\"] if get_arch() == 'amd64' else [\"0.13.5\", \"0.14.0\", \"1.1.2\", \"1.3.0\", \"1.4.0\"])\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     def state_version(request):\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         terraform_version = Version(request.param)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         terraform_path = get_executable(terraform_version)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         module_dir = os.path.join(os.getcwd(), '.terraform-state', str(terraform_version))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         os.makedirs(module_dir, exist_ok=True)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         with open(os.path.join(module_dir, 'main.tf'), 'w') as f:\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             backend_tf = '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     terraform {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         backend \"s3\" {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             bucket = \"terraform-github-actions\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             key    = \"test_remote_state_s3_''' + str(terraform_version) + '''\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             region = \"eu-west-2\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             dynamodb_table = \"terraform-github-actions\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             f.write(backend_tf + '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     output \"hello\" {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         value = \"hello\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             ''')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         # Here we go\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         result = subprocess.run(\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             [terraform_path, 'init'],\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             env=os.environ | {'TF_INPUT': 'false'},\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             capture_output=True,\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             cwd=module_dir\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         )\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.args=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.returncode=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.stdout.decode()=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.stderr.decode()=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | >       assert result.returncode == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | E       AssertionError: assert 1 == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | E        +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_1.3.0/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mIn...\\x82\\x1b[0m \\x1b[0m\\n\\x1b[31m\\xe2\\x94\\x82\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\\xe2\\x95\\xb5\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n').returncode\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_remote_state_s3.py:186: AssertionError\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ---------------------------- Captured stdout setup -----------------------------\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | terraform_1.3.0_linux_amd64.zip: OK\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.args=[PosixPath('/tmp/terraform_1.3.0/terraform'), 'init']\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.returncode=1\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.stdout.decode()='\\n\\x1b[0m\\x1b[1mInitializing the backend...\\x1b[0m\\n'\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.stderr.decode()='\\x1b[31m\\x1b[31m\u2577\\x1b[0m\\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\x1b[1m\\x1b[31mError: \\x1b[0m\\x1b[0m\\x1b[1merror configuring S3 Backend: no valid credential sources for S3 Backend found.\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0mPlease see https://www.terraform.io/docs/language/settings/backends/s3.html\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0mfor more information about providing credentials.\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0mError: NoCredentialProviders: no valid providers in chain. Deprecated.\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\tFor verbose messaging see aws.Config.CredentialsChainVerboseErrors\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\u2575\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n'\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ---------------------------- Captured stderr setup -----------------------------\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading signature from https://releases.hashicorp.com/terraform/1.3.0/terraform_1.3.0_SHA256SUMS.72D7468F.sig\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading checksums from https://releases.hashicorp.com/terraform/1.3.0/terraform_1.3.0_SHA256SUMS\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Signature made Mon Mar 20 18:11:28 2023 UTC\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg:                using RSA key 374EC75B485913604A831CC7C820C6D5CD27AB87\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Good signature from \"HashiCorp Security (hashicorp.com/security) <security@hashicorp.com>\" [ultimate]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading archive from https://releases.hashicorp.com/terraform/1.3.0/terraform_1.3.0_linux_amd64.zip\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | _____________________ ERROR at setup of test_state[1.4.0] ______________________\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | request = <SubRequest 'state_version' for <Function test_state[1.4.0]>>\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     @pytest.fixture(scope='module', params=[\"0.9.7\", \"0.11.8\", \"1.1.2\", \"1.3.0\", \"1.4.0\"] if get_arch() == 'amd64' else [\"0.13.5\", \"0.14.0\", \"1.1.2\", \"1.3.0\", \"1.4.0\"])\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     def state_version(request):\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         terraform_version = Version(request.param)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         terraform_path = get_executable(terraform_version)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         module_dir = os.path.join(os.getcwd(), '.terraform-state', str(terraform_version))\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         os.makedirs(module_dir, exist_ok=True)\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         with open(os.path.join(module_dir, 'main.tf'), 'w') as f:\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             backend_tf = '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     terraform {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         backend \"s3\" {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             bucket = \"terraform-github-actions\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             key    = \"test_remote_state_s3_''' + str(terraform_version) + '''\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             region = \"eu-west-2\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             dynamodb_table = \"terraform-github-actions\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             f.write(backend_tf + '''\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     output \"hello\" {\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         value = \"hello\"\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     }\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             ''')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |     \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         # Here we go\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         result = subprocess.run(\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             [terraform_path, 'init'],\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             env=os.environ | {'TF_INPUT': 'false'},\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             capture_output=True,\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |             cwd=module_dir\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         )\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.args=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.returncode=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.stdout.decode()=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |         print(f'{result.stderr.decode()=}')\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | >       assert result.returncode == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | E       AssertionError: assert 1 == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | E        +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_1.4.0/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mIn...\\x82\\x1b[0m \\x1b[0m\\n\\x1b[31m\\xe2\\x94\\x82\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\\xe2\\x95\\xb5\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n').returncode\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | \n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | tests/terraform_version/test_remote_state_s3.py:186: AssertionError\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ---------------------------- Captured stdout setup -----------------------------\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | terraform_1.4.0_linux_amd64.zip: OK\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.args=[PosixPath('/tmp/terraform_1.4.0/terraform'), 'init']\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.returncode=1\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.stdout.decode()='\\n\\x1b[0m\\x1b[1mInitializing the backend...\\x1b[0m\\n'\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | result.stderr.decode()='\\x1b[31m\\x1b[31m\u2577\\x1b[0m\\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\x1b[1m\\x1b[31mError: \\x1b[0m\\x1b[0m\\x1b[1merror configuring S3 Backend: no valid credential sources for S3 Backend found.\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0mPlease see https://www.terraform.io/docs/language/settings/backends/s3.html\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0mfor more information about providing credentials.\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0mError: NoCredentialProviders: no valid providers in chain. Deprecated.\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\tFor verbose messaging see aws.Config.CredentialsChainVerboseErrors\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\n\\x1b[31m\u2502\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\u2575\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n'\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ---------------------------- Captured stderr setup -----------------------------\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading signature from https://releases.hashicorp.com/terraform/1.4.0/terraform_1.4.0_SHA256SUMS.72D7468F.sig\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading checksums from https://releases.hashicorp.com/terraform/1.4.0/terraform_1.4.0_SHA256SUMS\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Signature made Mon Mar 20 18:13:28 2023 UTC\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg:                using RSA key 374EC75B485913604A831CC7C820C6D5CD27AB87\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | gpg: Good signature from \"HashiCorp Security (hashicorp.com/security) <security@hashicorp.com>\" [ultimate]\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \ud83d\udcac  ::debug::Downloading archive from https://releases.hashicorp.com/terraform/1.4.0/terraform_1.4.0_linux_amd64.zip\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dflook-terraform-github-actions/report.xml -\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | =========================== short test summary info ============================\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ERROR tests/terraform_version/test_remote_state_s3.py::test_state[0.9.7] - AssertionError: assert 1 == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |  +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_0.9.7/terraform'), 'init'], returncode=1, stdout=b'\\x1b[0m\\x1b[1mInit...se update the configuration in your Terraform files to fix this error\\nthen run this command again.\\n\\x1b[0m\\x1b[0m\\n').returncode\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ERROR tests/terraform_version/test_remote_state_s3.py::test_state[0.11.8] - AssertionError: assert 1 == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |  +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_0.11.8/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mI...se update the configuration in your Terraform files to fix this error\\nthen run this command again.\\n\\x1b[0m\\x1b[0m\\n').returncode\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ERROR tests/terraform_version/test_remote_state_s3.py::test_state[1.1.2] - AssertionError: assert 1 == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |  +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_1.1.2/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mIn...\\x82\\x1b[0m \\x1b[0m\\n\\x1b[31m\\xe2\\x94\\x82\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\\xe2\\x95\\xb5\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n').returncode\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ERROR tests/terraform_version/test_remote_state_s3.py::test_state[1.3.0] - AssertionError: assert 1 == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |  +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_1.3.0/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mIn...\\x82\\x1b[0m \\x1b[0m\\n\\x1b[31m\\xe2\\x94\\x82\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\\xe2\\x95\\xb5\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n').returncode\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | ERROR tests/terraform_version/test_remote_state_s3.py::test_state[1.4.0] - AssertionError: assert 1 == 0\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   |  +  where 1 = CompletedProcess(args=[PosixPath('/tmp/terraform_1.4.0/terraform'), 'init'], returncode=1, stdout=b'\\n\\x1b[0m\\x1b[1mIn...\\x82\\x1b[0m \\x1b[0m\\n\\x1b[31m\\xe2\\x94\\x82\\x1b[0m \\x1b[0m\\x1b[0m\\n\\x1b[31m\\xe2\\x95\\xb5\\x1b[0m\\x1b[0m\\n\\x1b[0m\\x1b[0m\\n').returncode\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   | =================== 116 passed, 5 errors in 63.02s (0:01:03) ===================\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64]   \u274c  Failure - Main Run tests\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64] exitcode '1': failure\n[3af0ece8-fe8f-4486-8393-a12024f2e094/pytest amd64] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'pytest amd64' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dflook-terraform-github-actions/.github/workflows/test-crawler.yaml",
        "build_tool": "pytest",
        "elapsed_time": 371.40125036239624
    }
}