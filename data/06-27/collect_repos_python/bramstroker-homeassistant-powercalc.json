{
    "repository": "bramstroker/homeassistant-powercalc",
    "stars": 678,
    "language": "python",
    "size": 10178,
    "clone_url": "https://github.com/bramstroker/homeassistant-powercalc.git",
    "timestamp": "2023-07-01T16:31:17.546623Z",
    "clone_success": true,
    "number_of_actions": 11,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "unknown",
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "tests.test_config_flow",
                "name": "test_sensor_type_form_displayed[group]",
                "time": 1.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_error_when_sub_profile_not_exists",
                "time": 0.185,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_include",
                "name": "test_include_template",
                "time": 0.936,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_filter",
                "name": "test_domain_filter_multiple",
                "time": 0.232,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_library",
                "name": "test_get_profile_with_model_alias",
                "time": 0.22,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_create_daily_energy_entry",
                "time": 0.909,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_create_group_entry_without_unique_id",
                "time": 0.849,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_can_include_autodiscovered_entity_in_group",
                "time": 0.888,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_lut_flow_with_sub_profiles",
                "time": 0.969,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_entities_are_bound_to_disabled_source_device",
                "time": 0.845,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_manually_configured_light_overrides_autodiscovered",
                "time": 0.83,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_load_sub_profile_without_model_json",
                "time": 0.255,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_daily_energy_options_flow",
                "time": 0.848,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscover_model_from_entity_entry[ikea-IKEA FLOALT LED light panel, dimmable, white spectrum (30x90 cm) (L1528)-ikea-L1528]",
                "time": 0.311,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_linear_options_flow_error",
                "time": 1.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscovery_disabled",
                "time": 0.803,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscover_model_from_entity_entry[MLI-45317-mueller-licht-45317]",
                "time": 0.275,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_change_options_of_renamed_sensor",
                "time": 0.984,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_library",
                "name": "test_hidden_directories_are_skipped_from_model_listing",
                "time": 0.274,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_error_when_configuring_same_entity_twice",
                "time": 1.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_lut_not_autodiscovered",
                "time": 0.9,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_load_linked_profile",
                "time": 0.249,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_create_wled_sensor_entry",
                "time": 0.881,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_lut_autodiscover_flow",
                "time": 1.147,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscover_skips_diagnostics_entities",
                "time": 0.771,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_filter",
                "name": "test_composite_filter[filter_return_values0-and-False]",
                "time": 0.261,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_autodiscovered_option_flow",
                "time": 0.912,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscovery",
                "time": 1.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_fixed_power_sensor_from_yaml",
                "time": 1.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_init",
                "name": "test_domain_light_group_with_autodiscovery_enabled",
                "time": 1.073,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_common",
                "name": "test_validate_is_number_invalid[test]",
                "time": 0.187,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscover_model_from_entity_entry[IKEA-TRADFRI LED bulb GU10 400 lumen, dimmable (LED1650R5)-ikea-LED1650R5]",
                "time": 0.315,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_filter",
                "name": "test_composite_filter[filter_return_values2-and-True]",
                "time": 0.348,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_init",
                "name": "test_domain_groups",
                "time": 0.97,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_create_nested_group_sensor",
                "time": 0.796,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_create_daily_energy_sensor_using_config_entry",
                "time": 0.815,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_can_create_same_entity_twice_with_unique_id",
                "time": 0.786,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_energy",
                "name": "test_unit_prefix_none",
                "time": 0.849,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_energy",
                "name": "test_force_create_energy_sensor_for_existing_power_sensor",
                "time": 0.656,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_energy",
                "name": "test_real_energy_sensor",
                "time": 0.645,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_filter",
                "name": "test_composite_filter[filter_return_values4-or-False]",
                "time": 0.343,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_calculate_delta[daily_fixed_options0-3600-0.5]",
                "time": 0.179,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_create_config_entry_without_energy_sensor",
                "time": 1.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_subgroups_from_config_entry",
                "time": 0.689,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_template_value",
                "time": 0.825,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_create_fixed_sensor_entry_with_template",
                "time": 0.989,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_library",
                "name": "test_get_profile",
                "time": 0.375,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_library_options_flow_raises_error_on_non_existing_power_profile",
                "time": 1.063,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_library",
                "name": "test_model_listing",
                "time": 0.307,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_include",
                "name": "test_include_light_group",
                "time": 0.812,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_discovery_flow",
                "time": 1.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_wled_options_flow",
                "time": 1.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_manufacturer_listing_is_filtered_by_entity_domain",
                "time": 0.757,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_include",
                "name": "test_include_filter_domain",
                "time": 0.913,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_small_update_frequency_updates_correctly",
                "time": 1.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_daily_energy_sensor_kwh_also_creates_power_sensor",
                "time": 0.899,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_create_linear_sensor_entry",
                "time": 1.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_disable_extended_attributes",
                "time": 0.678,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_unhide_members",
                "time": 0.785,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_unsupported_entity_domain",
                "time": 0.137,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_increase_service",
                "time": 0.876,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscover_skips_disabled_entities",
                "time": 0.795,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_load_sub_profile",
                "time": 0.102,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_get_power_profile_empty_manufacturer",
                "time": 0.405,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscover_model_from_entity_entry[TP-Link-KP115(AU)-tp-link-KP115]",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_advanced_power_configuration_can_be_set",
                "time": 0.958,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_sub_profile_matcher_entity_id",
                "time": 0.385,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_calibrate_service",
                "time": 0.691,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_utility_meter",
                "name": "test_utility_meter_is_not_created_twice",
                "time": 0.859,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_discovery_flow_with_subprofile_selection",
                "time": 0.854,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_calculate_delta[daily_fixed_options1-1200-0.0555]",
                "time": 0.082,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_group_error_mandatory",
                "time": 0.775,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscover_model_from_entity_entry[ikea-TRADFRI bulb E14 W op/ch 400lm-ikea-LED1649C5]",
                "time": 0.081,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_manually_configured_sensor_overrides_profile",
                "time": 0.642,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscover_model_from_entity_entry[IKEA-LED1649C5-ikea-LED1649C5]",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_rounding_precision",
                "time": 0.682,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_energy_sensor_in_multiple_groups_calculates_correctly",
                "time": 0.835,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_virtual_power_sensor_is_not_added_twice_to_group_after_reload",
                "time": 0.621,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_common",
                "name": "test_validate_is_number_invalid[45test]",
                "time": 0.125,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_library",
                "name": "test_get_subprofile_listing",
                "time": 0.116,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_standby_power",
                "time": 0.625,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_include_config_entries_in_group",
                "time": 0.922,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_unavailable_power",
                "time": 0.657,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_fixed",
                "name": "test_template_power",
                "time": 0.235,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_library",
                "name": "test_get_non_existing_profile",
                "time": 0.146,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_config_flow_decimal_value",
                "time": 0.692,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_fan_min_and_max_power",
                "time": 0.197,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_fixed",
                "name": "test_template_power_combined_with_multiply_factor",
                "time": 0.599,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_filter",
                "name": "test_composite_filter[filter_return_values3-or-True]",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_filter",
                "name": "test_composite_filter[filter_return_values1-and-False]",
                "time": 0.161,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_lut",
                "name": "test_sub_lut_loaded",
                "time": 0.326,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_lut",
                "name": "test_brightness_lut",
                "time": 0.198,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_common",
                "name": "test_validate_is_number_invalid[50,1]",
                "time": 0.329,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_template_entity_tracking",
                "time": 0.601,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_load_fixed_profile",
                "time": 0.422,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_library",
                "name": "test_get_subprofile_listing_empty_list",
                "time": 0.455,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_filter",
                "name": "test_null_filter",
                "time": 0.119,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_error_when_no_strategy_has_been_configured",
                "time": 0.725,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_utility_meters_are_created",
                "time": 0.93,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_energy",
                "name": "test_real_power_sensor_kw",
                "time": 0.63,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_restore_state",
                "time": 0.629,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_error_when_model_not_supported",
                "time": 0.597,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_sensors_with_errors_are_skipped_for_multiple_entity_setup",
                "time": 0.768,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_fixed",
                "name": "test_config_entry_with_template_rendered_correctly",
                "time": 0.656,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_sensor_type_form_displayed[virtual_power]",
                "time": 0.811,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_lut",
                "name": "test_unsupported_color_mode",
                "time": 0.274,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group_standby",
                "name": "test_standby_group",
                "time": 0.664,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_custom_attribute",
                "time": 0.222,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_storage_version_1",
                "time": 0.267,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_config_entry_with_calibrate_list",
                "time": 0.818,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_no_power_sensors_are_created_for_ignored_config_entries",
                "time": 0.653,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_load_lut_profile_from_custom_directory",
                "time": 0.171,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_playbook",
                "name": "test_services_raises_error_on_non_playbook_sensor",
                "time": 0.42,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_default_calculation_strategy_lut",
                "time": 0.16,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_error_is_raised_on_unsupported_entity_domain",
                "time": 0.286,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_energy_unit_conversions",
                "time": 0.637,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_sub_profile_matcher_integration[registry_entry0-tasmota]",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_load_linear_profile",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_members_are_unhiden_after_group_removed",
                "time": 0.598,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_unknown_member_config_entry_is_skipped_from_group",
                "time": 0.351,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_entities_are_bound_to_source_device",
                "time": 0.896,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_fixed",
                "name": "test_states_power",
                "time": 0.073,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_filter",
                "name": "test_domain_filter",
                "time": 0.157,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_common",
                "name": "test_validate_is_number_valid[0]",
                "time": 0.459,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_sub_profile_matcher_integration[registry_entry1-default]",
                "time": 0.465,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_common",
                "name": "test_validate_is_number_valid[20]",
                "time": 0.403,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_power_is_none_when_state_is_none",
                "time": 0.041,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_lut",
                "name": "test_hs_lut",
                "time": 0.19,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_light_calibrate",
                "time": 0.088,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_error_on_non_number_state",
                "time": 0.268,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_playbook",
                "name": "test_exception_when_providing_unknown_playbook",
                "time": 0.123,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_wled",
                "name": "test_can_calculate_power",
                "time": 0.171,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_group_is_removed_from_virtual_power_entry_on_removal",
                "time": 0.725,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_wled",
                "name": "test_exception_is_raised_when_no_estimated_current_entity_found",
                "time": 0.123,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_factory",
                "name": "test_exception_raised_when_no_power_profile_passed_lut_strategy",
                "time": 0.358,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_lut",
                "name": "test_no_power_when_no_brightness_available",
                "time": 0.306,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.device_types.test_media_player",
                "name": "test_media_player",
                "time": 0.712,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_playbook",
                "name": "test_stop_playbook_service",
                "time": 0.359,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_library",
                "name": "test_get_profile_with_full_manufacturer_name",
                "time": 0.277,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_fixed",
                "name": "test_states_power_with_template",
                "time": 0.408,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_include",
                "name": "test_include_area",
                "time": 0.857,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_gui_discovered_entity_in_yaml_group",
                "time": 0.621,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_playbook",
                "name": "test_exception_when_providing_unknown_playbook_file",
                "time": 0.18,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_sub_profile_matcher_integration[None-default]",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_lut",
                "name": "test_validation_fails_for_non_light_entities",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_calculate_delta[daily_fixed_options2-1800-0.05]",
                "time": 0.486,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_validate_raises_exception_when_min_power_higher_than_max",
                "time": 0.381,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_playbook",
                "name": "test_activate_playbook_service",
                "time": 0.542,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_validate_raises_exception_not_allowed_domain",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_create_daily_energy_sensor_default_options",
                "time": 0.17,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.device_types.test_smart_switch",
                "name": "test_smart_switch_power_input_gui_config_flow",
                "time": 0.911,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_common",
                "name": "test_validate_is_number_valid[10.60]",
                "time": 0.102,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_lut",
                "name": "test_validation_fails_unsupported_color_mode",
                "time": 0.243,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_wled",
                "name": "test_wled_autodiscovery_flow",
                "time": 0.399,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_energy_sensor_delta_updates_new_sensor",
                "time": 0.711,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_wled",
                "name": "test_find_estimated_current_entity_by_device_class",
                "time": 0.189,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_exception_is_raised_when_invalid_sub_profile_matcher_supplied",
                "time": 0.597,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_fixed",
                "name": "test_validation_error_when_no_power_supplied",
                "time": 0.48,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_lut",
                "name": "test_color_mode_unknown_is_handled_gracefully",
                "time": 0.1,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_hue_switch_supported_entity_domain",
                "time": 0.666,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_energy",
                "name": "test_set_entity_category",
                "time": 0.554,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_playbook",
                "name": "test_turn_off_stops_running_playbook",
                "time": 0.442,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_library",
                "name": "test_non_existing_manufacturer_returns_empty_model_list",
                "time": 0.232,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_common",
                "name": "test_valid_name_pattern",
                "time": 0.604,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_common",
                "name": "test_validate_is_number_valid[100000]",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_lut",
                "name": "test_colortemp_lut",
                "time": 0.21,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_energy_group_available_when_members_temporarily_unavailable",
                "time": 0.885,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_create_daily_energy_sensor_unit_prefix_watt[M-MWh]",
                "time": 0.628,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_mega_watt_hour",
                "time": 0.81,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_energy",
                "name": "test_calibrate_service",
                "time": 0.249,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_selecting_sub_profile_is_ignored",
                "time": 0.123,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_fixed",
                "name": "test_states_power_with_attributes",
                "time": 0.12,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_device_type",
                "time": 0.703,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_playbook",
                "name": "test_lazy_load_playbook",
                "time": 0.28,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_lut",
                "name": "test_linked_profile_loaded",
                "time": 0.167,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_calculate_delta_mega_watt_hour",
                "time": 0.136,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.device_types.test_smart_switch",
                "name": "test_smart_switch",
                "time": 0.983,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_power_profile",
                "name": "test_sub_profile_matcher_attribute",
                "time": 0.125,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_create_daily_energy_sensor_unit_prefix_watt[none-Wh]",
                "time": 0.713,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_lower_value_than_calibration_table_defines",
                "time": 0.184,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_common",
                "name": "test_invalid_name_pattern",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_manufacturer_listing_is_filtered_by_entity_domain2",
                "time": 0.133,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_fixed",
                "name": "test_validation_error_state_power_only_entity_domain",
                "time": 0.134,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_fixed",
                "name": "test_simple_power",
                "time": 0.208,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_restore_state_catches_decimal_conversion_exception",
                "time": 0.129,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_load_model_with_slashes",
                "time": 0.061,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_fixed_options_flow",
                "time": 0.15,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_group_utility_meter",
                "time": 0.141,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_custom_naming_pattern",
                "time": 0.133,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_energy",
                "name": "test_disable_extended_attributes",
                "time": 0.128,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_ignore_unavailable_state",
                "time": 0.143,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscovery_skipped_for_lut_with_subprofiles",
                "time": 0.139,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_unknown_source_entity_state",
                "time": 0.168,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_sensor_type_form_displayed[daily_energy]",
                "time": 0.094,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_autodiscover_skips_entities_with_empty_manufacturer",
                "time": 0.074,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_daily_energy_sensor_from_kwh_value",
                "time": 0.418,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_unsupported_model_is_skipped_from_autodiscovery",
                "time": 0.101,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_include",
                "name": "test_include_domain",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_reset_service",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_config_entry_overrides_autodiscovered",
                "time": 0.105,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_energy",
                "name": "test_real_energy_sensor_error_on_non_existing_entity",
                "time": 0.116,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_power_unit_conversions",
                "time": 0.109,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_light_lut_strategy",
                "time": 0.21,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_sleep_power",
                "time": 0.159,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_grouped_power_sensor",
                "time": 0.194,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_multiply_factor",
                "time": 0.208,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_can_select_existing_powercalc_entry_as_group_member",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_is_autoconfigurable_returns_false",
                "time": 0.126,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_create_daily_energy_sensor_unit_prefix_watt[k-kWh]",
                "time": 0.101,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.device_types.test_network",
                "name": "test_network_device",
                "time": 0.218,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_sensor_type_menu_displayed",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.device_types.test_infrared_light",
                "name": "test_infrared_light",
                "time": 0.515,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_restore_state",
                "time": 0.111,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_config_entry_is_removed_from_associated_groups_on_removal",
                "time": 0.099,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_lut_options_flow",
                "time": 0.115,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_reset_service",
                "time": 0.156,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_disable_extended_attributes",
                "time": 0.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_light_max_power_only",
                "time": 0.119,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_setup_multiple_entities_in_single_platform_config",
                "time": 0.124,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_initial_state_is_calculated_after_startup",
                "time": 0.13,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_include",
                "name": "test_include_area_not_found",
                "time": 0.141,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_lut_manual_flow",
                "time": 0.154,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_energy_sensor_delta_updates_existing_sensor",
                "time": 0.066,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_lut_autodiscover_flow_not_confirmed",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_create_group_entry",
                "time": 0.069,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_entities_are_bound_to_source_device2",
                "time": 0.062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_fixed",
                "name": "test_config_entry_with_states_power_template",
                "time": 0.065,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_strategy_enabled_condition",
                "time": 0.081,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_user_can_rename_entity_id",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_error_is_logged_when_config_entry_associated_to_non_existing_group",
                "time": 0.109,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_utility_meter",
                "name": "test_tariff_sensors_are_created",
                "time": 0.198,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_daily_energy_mandatory_fields_not_supplied",
                "time": 0.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_power",
                "name": "test_use_real_power_sensor_in_group",
                "time": 0.176,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_manually_setup_from_library",
                "time": 0.081,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_create_fixed_sensor_entry_with_states_power",
                "time": 0.101,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_group_unavailable_when_members_unavailable",
                "time": 0.092,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_config_flow_template_value",
                "time": 0.137,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_energy",
                "name": "test_unit_prefix_kwh_default",
                "time": 0.083,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_init",
                "name": "test_unload_entry",
                "time": 0.109,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.group_include.test_include",
                "name": "test_combine_include_with_entities",
                "time": 0.159,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_discovery_flow_remarks_are_shown",
                "time": 0.061,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_user_hidden_entities_remain_hidden",
                "time": 0.14,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_renaming_sensor_is_retained_after_startup",
                "time": 0.097,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_diagnostics",
                "name": "test_diagnostics",
                "time": 0.106,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_utility_meter_is_created",
                "time": 0.07,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_create_fixed_sensor_entry",
                "time": 0.085,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_calibrate_service",
                "time": 0.073,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_storage",
                "time": 0.029,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_strategy_raises_unknown_error",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_create_linear_sensor_error_mandatory_fields",
                "time": 0.09,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_power_sensor_not_created_when_not_on_whole_day",
                "time": 0.074,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_hide_members",
                "time": 0.117,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_energy",
                "name": "test_related_energy_sensor_is_used_for_existing_power_sensor",
                "time": 0.173,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.device_types.test_smart_switch",
                "name": "test_hue_smart_plug_is_discovered",
                "time": 0.086,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_group_options_flow",
                "time": 0.065,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.test_library",
                "name": "test_manufacturer_listing",
                "time": 0.219,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_init",
                "name": "test_create_config_entry_without_energy_sensor",
                "time": 0.07,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_rename_source_entity_id",
                "time": 0.078,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_linear_options_flow",
                "time": 0.072,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_linear",
                "name": "test_media_player_volume_level",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discovery",
                "name": "test_discovery_skipped_when_confirmed_by_user",
                "time": 0.109,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_daily_energy_sensor_also_creates_power_sensor",
                "time": 0.113,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.power_profile.device_types.test_smart_switch",
                "name": "test_smart_switch_power_input_yaml",
                "time": 0.095,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_group",
                "name": "test_add_virtual_power_sensor_to_group_on_creation",
                "time": 0.087,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sensor",
                "name": "test_alternate_naming_strategy",
                "time": 0.082,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config_flow",
                "name": "test_lut_not_autodiscovered_model_unsupported",
                "time": 0.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.strategy.test_factory",
                "name": "test_exception_raised_on_not_supported_strategy",
                "time": 0.131,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.sensors.test_daily_energy",
                "name": "test_name_and_entity_id_can_be_inherited_from_source_entity",
                "time": 0.119,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \ud83d\ude80  Start image=crawlergpt:latest\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc] user=0 workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2601  git clone 'https://github.com/snok/install-poetry' # ref=v1\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Pre Install Poetry\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Pre Install Poetry\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2601  git clone 'https://github.com/actions/cache' # ref=v2\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2601  git clone 'https://github.com/coverallsapp/github-action' # ref=master\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Main Check out code\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Main Check out code\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Main Setup Python\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/fe67e30d-a046-4af1-862d-894b7f41c307/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2753  ::group::Installed versions\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Semantic version spec of 3.11 is 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? false\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::evaluating 6 versions\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::match not found\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Version 3.11 was not found in the local cache\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Getting manifest from actions/python-versions@main\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::set auth\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.12.0-beta.3 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.12.0-beta.2 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.12.0-beta.1 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.12.0-alpha.7 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.12.0-alpha.6 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.12.0-alpha.5 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.12.0-alpha.4 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.12.0-alpha.3 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.12.0-alpha.2 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.12.0-alpha.1 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::check 3.11.4 satisfies 3.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::arm64===x64 && darwin===linux\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::x64===x64 && darwin===linux\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::x64===x64 && linux===linux\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::matched 3.11.4\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Version 3.11 is available for downloading\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Download from \"https://github.com/actions/python-versions/releases/download/3.11.4-5199054971/python-3.11.4-linux-20.04-x64.tar.gz\"\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Downloading https://github.com/actions/python-versions/releases/download/3.11.4-5199054971/python-3.11.4-linux-20.04-x64.tar.gz\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Destination /tmp/b1efdc01-8850-420e-a1de-acde8af55343\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::set auth\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::download complete\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Extract downloaded archive\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Checking tar --version\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/91ca1994-5556-4676-8c3a-235a340ee5cf -f /tmp/b1efdc01-8850-420e-a1de-acde8af55343\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Execute installation script\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Check if Python hostedtoolcache folder exist...\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Create Python 3.11.4 folder\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Copy Python binaries to hostedtoolcache folder\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Create additional symlinks (Required for the UsePythonVersion Azure Pipelines task and the setup-python GitHub Action)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Upgrading pip...\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Looking in links: /tmp/tmpm__qqvrd\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages (65.5.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages (23.1.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Collecting pip\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 17.2 MB/s eta 0:00:00\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Installing collected packages: pip\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Successfully installed pip-23.1.2\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Create complete file\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? false\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.11.4\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::explicit? true\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::evaluating 7 versions\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::matched: 3.11.4\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.11.4/x64\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Found tool in cache Python 3.11.4 x64\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Successfully set up CPython (3.11.4)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2753  ::endgroup::\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Main Setup Python\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.11.4/x64\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.11.4/x64/lib/pkgconfig\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.11.4/x64\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.11.4/x64/lib\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::set-output:: python-version=3.11.4\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.11.4/x64/bin/python\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.11.4/x64\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.11.4/x64/bin\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Main Load cached Poetry installation\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/fe67e30d-a046-4af1-862d-894b7f41c307/act/actions-cache@v3/ dst=/var/run/act/actions/actions-cache@v3/\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v3/] user=0 workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/restore/index.js] user= workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Resolved Keys:\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::[\"poetry-1.5.1\"]\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::1.5.0\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:41285/_apis/artifactcache/cache?keys=poetry-1.5.1&version=f4b5713a4657ae30a7c2804b2ad5dbc790b3736f71a74a904bcab1f478b0ed29\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Cache not found for input keys: poetry-1.5.1\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Main Load cached Poetry installation\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Main Install Poetry\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/fe67e30d-a046-4af1-862d-894b7f41c307/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Main Install and configure Poetry\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-0.sh] user= workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \u001b[33mSetting Poetry installation path as /home/runneradmin/.local\u001b[0m\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \u001b[33mInstalling Poetry \ud83d\udc77\u001b[0m\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Retrieving Poetry metadata\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | # Welcome to Poetry!\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | This will download and install the latest version of Poetry,\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | a dependency and package manager for Python.\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /home/runneradmin/.local/bin\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | You can uninstall at any time by executing this script with the --uninstall option,\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | and these changes will be reverted.\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Installing Poetry (1.5.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Installing Poetry (1.5.1): Creating environment\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Installing Poetry (1.5.1): Installing Poetry\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Installing Poetry (1.5.1): Creating script\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Installing Poetry (1.5.1): Done\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Poetry (1.5.1) is installed now. Great!\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | environment variable.\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | You can test that everything is set up by executing:\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | `poetry --version`\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \u001b[33mInstallation completed. Configuring settings \ud83d\udee0\u001b[0m\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \u001b[33mDone \u2705\u001b[0m\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \u001b[33mIf you are creating a venv in your project, you can activate it by running 'source .venv/bin/activate'. If you're running this in an OS matrix, you can use 'source $VENV' instead, as an OS agnostic option\u001b[0m\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Main Install and configure Poetry\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Main Install Poetry\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Main cache dependencies\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/fe67e30d-a046-4af1-862d-894b7f41c307/act/actions-cache@v2/ dst=/var/run/act/actions/actions-cache@v2/\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v2/] user=0 workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v2/dist/restore/index.js] user= workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Resolved Keys:\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::[\"pydeps-ff70752dc37923e2fa87b7879cc445aefc7bae53786f5e60538f17a08d6e4a0f\"]\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Checking zstd --version\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:41285/_apis/artifactcache/cache?keys=pydeps-ff70752dc37923e2fa87b7879cc445aefc7bae53786f5e60538f17a08d6e4a0f&version=25e65b70d167147605b4332eb57b6d34df8e0303b88c4de252efb18cf3ed148a\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Cache not found for input keys: pydeps-ff70752dc37923e2fa87b7879cc445aefc7bae53786f5e60538f17a08d6e4a0f\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Main cache dependencies\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Main Install dependencies\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Creating virtualenv powercalc in /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Installing dependencies from lock file\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Package operations: 96 installs, 1 update, 0 removals\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing idna (3.4)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pycparser (2.21)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing sniffio (1.3.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing anyio (3.7.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing certifi (2023.5.7)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing cffi (1.15.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing frozenlist (1.3.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing h11 (0.14.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing iniconfig (2.0.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing multidict (6.0.4)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing packaging (23.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pluggy (1.2.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing six (1.16.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing aiosignal (1.3.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing async-timeout (4.0.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing charset-normalizer (3.1.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing attrs (22.2.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing cryptography (40.0.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing httpcore (0.17.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest (7.3.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing markupsafe (2.1.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing python-dateutil (2.8.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing text-unidecode (1.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing urllib3 (2.0.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing yarl (1.9.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytz (2023.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing voluptuous (0.13.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing aiohttp (3.8.4)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing astral (2.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing atomicwrites-homeassistant (1.4.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing awesomeversion (22.9.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing bcrypt (4.0.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing ciso8601 (2.3.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing colored (1.4.4)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing distlib (0.3.6)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing coverage (7.2.4)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing filelock (3.12.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing greenlet (2.0.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing httpx (0.24.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing jinja2 (3.1.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing freezegun (1.2.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing home-assistant-bluetooth (1.10.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing execnet (1.9.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing mypy-extensions (1.0.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing lru-dict (1.1.8)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing ifaddr (0.2.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing orjson (3.8.12)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing platformdirs (3.8.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pyjwt (2.7.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pyopenssl (23.1.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-asyncio (0.20.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pyyaml (6.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing python-slugify (4.0.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing requests (2.31.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Updating setuptools (67.8.0 -> 68.0.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing termcolor (2.3.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing typing-extensions (4.6.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing ulid-transform (0.7.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing voluptuous-serialize (2.6.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing cfgv (3.3.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing click (8.1.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing homeassistant (2023.6.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing identify (2.5.24)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing mock-open (1.4.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing mypy (1.4.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing nodeenv (1.8.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing numpy (1.23.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pathspec (0.11.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pipdeptree (2.7.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pydantic (1.10.8)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing paho-mqtt (1.6.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pylint-per-file-ignores (1.1.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-aiohttp (1.0.4)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-picked (0.4.6)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-cov (3.0.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-freezer (0.4.6)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-timeout (2.1.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-unordered (0.5.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-xdist (3.2.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing respx (0.20.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing syrupy (4.0.2)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing tqdm (4.64.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing virtualenv (20.23.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing requests-mock (1.10.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-test-groups (1.0.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-sugar (0.9.6)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-socket (0.5.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing sqlalchemy (2.0.15)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing black (23.3.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing croniter (1.4.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing homeassistant-stubs (2023.6.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pre-commit (3.3.3)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing pytest-homeassistant-custom-component (0.13.39)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing ruff (0.0.275)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing types-croniter (1.4.0.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing types-pytz (2023.3.0.0)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   \u2022 Installing voluptuous-stubs (0.1.1)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Main Install dependencies\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Main Prepare test env\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Main Prepare test env\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Main Run tests\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7] user= workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | bringing up nodes...\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | bringing up nodes...\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ......................../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | .............../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | .........../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ......./tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ./tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ..../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ....... [ 63/268]\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | .........../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ....../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ./tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ....../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ...../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ............../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ......../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ...../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ............. [127/268]\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | .........................../tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/coverage/inorout.py:523: CoverageWarning: Module custom_components.powercalc was previously imported, but not measured (module-not-measured)\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   self.warn(msg, slug=\"module-not-measured\")\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ........................................ [202/268]\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | .............................................................         [268/268]\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | =============================== warnings summary ===============================\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | .venv/lib/python3.11/site-packages/pytest_cov/plugin.py:256: 129 warnings\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/pytest_cov/plugin.py:256: PytestDeprecationWarning: The hookimpl CovPlugin.pytest_configure_node uses old-style configuration options (marks or attributes).\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   Please use the pytest.hookimpl(optionalhook=True) decorator instead\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |    to configure the hooks.\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |    See https://docs.pytest.org/en/latest/deprecations.html#configuring-hook-specs-impls-using-markers\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |     def pytest_configure_node(self, node):\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | .venv/lib/python3.11/site-packages/pytest_cov/plugin.py:265: 129 warnings\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.venv/lib/python3.11/site-packages/pytest_cov/plugin.py:265: PytestDeprecationWarning: The hookimpl CovPlugin.pytest_testnodedown uses old-style configuration options (marks or attributes).\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |   Please use the pytest.hookimpl(optionalhook=True) decorator instead\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |    to configure the hooks.\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |    See https://docs.pytest.org/en/latest/deprecations.html#configuring-hook-specs-impls-using-markers\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   |     def pytest_testnodedown(self, node, error):\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/report.xml -\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ---------- coverage: platform linux, python 3.11.4-final-0 -----------\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Coverage XML written to file coverage.xml\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | --------------------------- snapshot report summary ----------------------------\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | \n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | ============================= slowest 10 durations =============================\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | 0.92s call     tests/sensors/test_daily_energy.py::test_small_update_frequency_updates_correctly\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | 0.85s call     tests/test_config_flow.py::test_lut_autodiscover_flow\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | 0.83s call     tests/test_sensor.py::test_error_when_configuring_same_entity_twice\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | 0.79s call     tests/test_discovery.py::test_autodiscovery\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | 0.78s call     tests/test_init.py::test_domain_light_group_with_autodiscovery_enabled\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | 0.78s call     tests/test_sensor.py::test_create_config_entry_without_energy_sensor\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | 0.77s call     tests/test_config_flow.py::test_linear_options_flow_error\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | 0.77s call     tests/test_config_flow.py::test_sensor_type_form_displayed[group]\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | 0.75s call     tests/test_config_flow.py::test_wled_options_flow\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | 0.74s call     tests/test_config_flow.py::test_library_options_flow_raises_error_on_non_existing_power_profile\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Wrote LCOV report to coverage.lcov\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Main Run tests\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Main Upload Coverage Results\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/fe67e30d-a046-4af1-862d-894b7f41c307/act/coverallsapp-github-action@master/ dst=/var/run/act/actions/coverallsapp-github-action@master/\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/coverallsapp-github-action@master/] user=0 workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/coverallsapp-github-action@master/dist/index.js] user= workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   | Using lcov file: coverage.lcov\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2757  ::error::Bad response: 422 {\"message\":\"Couldn't find a repository matching this job.\",\"error\":true}\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u274c  Failure - Main Upload Coverage Results\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] exitcode '1': failure\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \u2b50 Run Post Install Poetry\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/fe67e30d-a046-4af1-862d-894b7f41c307/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests]   \u2705  Success - Post Install Poetry\n[4e4e1020-5557-40b0-8885-13abdb27707f/Run tests] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'Run tests' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/bramstroker-homeassistant-powercalc/.github/workflows/test-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "4e4e1020-5557-40b0-8885-13abdb27707f",
        "build_tool": "pytest",
        "elapsed_time": 457.76013565063477
    }
}