{
    "repository": "PRQL/pyprql",
    "stars": 76,
    "language": "python",
    "size": 1639,
    "clone_url": "https://github.com/PRQL/pyprql.git",
    "timestamp": "2023-07-01T17:19:22.309935Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_memory_db",
                "time": 1.567,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_html",
                "time": 1.53,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_line_magic",
                "time": 2.177,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_print",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "We only support pandas",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_plain_style",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "We only support pandas",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_multi_sql",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "unconditional skip",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_result_var",
                "time": 2.115,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_result_var_multiline_shovel",
                "time": 1.765,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not supported in PRQL",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_access_results_by_keys",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "We only support pandas",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_duplicate_column_names_accepted",
                "time": 2.055,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_persist",
                "time": 2.201,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_persist_no_index",
                "time": 2.705,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_append",
                "time": 2.677,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_persist_nonexistent_raises",
                "time": 1.062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_persist_non_frame_raises",
                "time": 1.589,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_persist_bare",
                "time": 1.266,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_persist_frame_at_its_creation",
                "time": 1.488,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Need to resolve line vs cell magic",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_connection_args_enforce_json",
                "time": 2.699,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_connection_args_in_connection",
                "time": 1.566,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_connection_args_single_quotes",
                "time": 1.218,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_connection_args_double_quotes",
                "time": 2.648,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_displaylimit",
                "time": 2.138,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Need to implement sample data in PRQL",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_column_local_vars",
                "time": 2.881,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not supported in PRQL",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_userns_not_changed",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not supported in PRQL",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_bind_vars",
                "time": 1.155,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not supported in PRQL",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_autopandas",
                "time": 1.981,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_autopolars",
                "time": 0.814,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_target_dialect",
                "time": 1.691,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_without_target",
                "time": 2.225,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_dryrun",
                "time": 0.942,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_csv",
                "time": 1.174,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_csv_to_file",
                "time": 1.46,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_sql_from_file",
                "time": 1.393,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_sql_from_nonexistent_file",
                "time": 1.407,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_dict",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "We only support pandas",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_dicts",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "We only support pandas",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_bracket_var_substitution",
                "time": 1.622,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not supported in PRQL",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_multiline_bracket_var_substitution",
                "time": 1.198,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not supported in PRQL",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_multiline_bracket_var_substitution_2",
                "time": 1.304,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Not supported in PRQL",
                        "type": "pytest.xfail"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_json_in_select",
                "time": 1.397,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_close_connection",
                "time": 1.282,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_pass_existing_engine",
                "time": 2.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_magic",
                "name": "test_autolimit",
                "time": 1.253,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_prql_python",
                "name": "test_pyql_python",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_prql_python",
                "name": "test_df_accessor",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_prql_python",
                "name": "test_target_dialect",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_prql_python",
                "name": "test_df_supports_grouped_aggs",
                "time": 0.03,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "pyprql.tests.test_prql_python",
                "name": "test_df_big_prql_query",
                "time": 0.041,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[f7865881-fa26-463e-a548-14adffa6e17c/test] \ud83d\ude80  Start image=crawlergpt:latest\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/PRQL-pyprql] user=0 workdir=\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2601  git clone 'https://github.com/snok/install-poetry' # ref=v1\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \u2b50 Run Pre Install Poetry\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2705  Success - Pre Install Poetry\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.8]\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \u2b50 Run Main Checkout\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2705  Success - Main Checkout\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \u2b50 Run Main actions/setup-python@v4\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/03e46c17-8acb-4935-bcb5-4b97faeed1d5/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2753  ::group::Installed versions\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::isExplicit: \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::explicit? false\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::explicit? true\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::explicit? true\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::explicit? true\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::explicit? true\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::explicit? true\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::explicit? true\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::matched: 3.8.11\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Successfully set up CPython (3.8.11)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2753  ::endgroup::\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2705  Success - Main actions/setup-python@v4\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib/pkgconfig\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::set-output:: python-version=3.8.11\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \u2b50 Run Main Install Poetry\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/03e46c17-8acb-4935-bcb5-4b97faeed1d5/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \u2b50 Run Main Install and configure Poetry\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-0.sh] user= workdir=\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \u001b[33mSetting Poetry installation path as /home/runneradmin/.local\u001b[0m\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \u001b[33mInstalling Poetry \ud83d\udc77\u001b[0m\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Retrieving Poetry metadata\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | # Welcome to Poetry!\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | This will download and install the latest version of Poetry,\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | a dependency and package manager for Python.\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | /home/runneradmin/.local/bin\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | You can uninstall at any time by executing this script with the --uninstall option,\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | and these changes will be reverted.\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Installing Poetry (1.4.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Installing Poetry (1.4.2): Creating environment\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Installing Poetry (1.4.2): Installing Poetry\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Installing Poetry (1.4.2): Creating script\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Installing Poetry (1.4.2): Done\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Poetry (1.4.2) is installed now. Great!\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | environment variable.\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | You can test that everything is set up by executing:\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | `poetry --version`\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \u001b[33mInstallation completed. Configuring settings \ud83d\udee0\u001b[0m\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \u001b[33mDone \u2705\u001b[0m\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \u001b[33mIf you are creating a venv in your project, you can activate it by running 'source .venv/bin/activate'. If you're running this in an OS matrix, you can use 'source $VENV' instead, as an OS agnostic option\u001b[0m\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2705  Success - Main Install and configure Poetry\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2705  Success - Main Install Poetry\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \u2b50 Run Main poetry install\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Creating virtualenv pyprql-TOrdSmFl-py3.8 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Installing dependencies from lock file\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Package operations: 141 installs, 1 update, 0 removals\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pycparser (2.21)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing cffi (1.15.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing certifi (2023.5.7)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing charset-normalizer (3.1.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing cryptography (40.0.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing idna (3.4)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing jeepney (0.8.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing markupsafe (2.1.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing more-itertools (9.1.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pytz (2023.3)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing six (1.16.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing urllib3 (2.0.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing webencodings (0.5.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing zipp (3.15.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing alabaster (0.7.13)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing asttokens (2.2.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing backoff (2.2.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing babel (2.12.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing docutils (0.18.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing executing (1.2.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing importlib-metadata (6.6.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing imagesize (1.4.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing importlib-resources (5.12.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing jinja2 (3.1.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing bleach (6.0.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing packaging (23.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing jaraco-classes (3.2.3)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pure-eval (0.2.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pygments (2.15.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing python-dateutil (2.8.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing ptyprocess (0.7.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing mdurl (0.1.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing secretstorage (3.3.3)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing smmap (5.0.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing snowballstemmer (2.2.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sphinxcontrib-applehelp (1.0.4)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing requests (2.31.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing monotonic (1.6)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sphinxcontrib-htmlhelp (2.0.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sphinxcontrib-jsmath (1.0.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing parso (0.8.3)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sphinxcontrib-devhelp (1.0.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sphinxcontrib-serializinghtml (1.1.5)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing traitlets (5.9.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing wcwidth (0.2.6)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sphinxcontrib-qthelp (1.0.3)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing backcall (0.2.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing click (8.1.3)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing colorama (0.4.6)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing decorator (5.1.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing distlib (0.3.6)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing exceptiongroup (1.1.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing filelock (3.12.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing gitdb (4.0.10)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing iniconfig (2.0.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing greenlet (2.0.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing jedi (0.18.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing keyring (23.13.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing matplotlib-inline (0.1.6)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pexpect (4.8.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pickleshare (0.7.5)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing platformdirs (3.5.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pluggy (1.0.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pkginfo (1.9.6)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pyyaml (6.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing readme-renderer (37.3)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing rfc3986 (2.0.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing posthog (3.0.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sphinx (6.2.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing stack-data (0.6.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing markdown-it-py (3.0.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing requests-toolbelt (1.0.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing ruamel-yaml-clib (0.2.7)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Updating setuptools (67.6.1 -> 67.8.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing toml (0.10.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing tqdm (4.65.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing prompt-toolkit (3.0.38)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing typing-extensions (4.6.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing tomli (2.0.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing argcomplete (3.0.8)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing cfgv (3.3.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing colorlog (6.7.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing coverage (7.2.7)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing click-log (0.4.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing dotty-dict (1.3.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing decli (0.6.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing execnet (1.9.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing gitpython (3.1.31)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing identify (2.5.24)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing invoke (1.7.3)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing duckdb (0.8.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing mypy-extensions (1.0.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing dparse (0.6.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing numpy (1.24.3)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing ipython (8.12.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing ploomber-core (0.2.11)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing ipython-genutils (0.2.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing psutil (5.9.5)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pytest (7.4.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing rich (13.4.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing ruamel-yaml (0.17.30)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing semver (2.13.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sphinxcontrib-jquery (4.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pprintpp (0.4.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sqlglot (14.1.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing termcolor (2.3.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing python-gitlab (3.14.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing tzdata (2023.3)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing virtualenv (20.23.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing nodeenv (1.8.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sqlalchemy (2.0.15)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sqlparse (0.4.4)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing twine (3.8.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing mdit-py-plugins (0.4.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing prettytable (3.7.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing questionary (1.10.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing tomlkit (0.11.8)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pathspec (0.11.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing black (23.3.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing commitizen (3.5.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing darglint (1.8.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing duckdb-engine (0.9.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing jupysql (0.7.6)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing mypy (1.4.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing myst-parser (2.0.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing nox (2023.4.22)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing polars (0.18.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pandas (2.0.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing py (1.11.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pre-commit (3.3.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing prql-python (0.8.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pytest-sugar (0.9.7)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pytest-clarity (1.0.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pytest-cov (4.1.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pytest-regtest (1.5.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing ruff (0.0.270)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing sphinx-rtd-theme (1.2.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing xdoctest (1.1.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing python-semantic-release (7.34.2)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing safety (2.3.4)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pytest-testmon (2.0.8)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   |   \u2022 Installing pytest-xdist (3.3.1)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | Installing the current project: pyprql (0.8.0)\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2705  Success - Main poetry install\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \u2b50 Run Main Test Code and Docs\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | ============================= test session starts ==============================\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | platform linux -- Python 3.8.11, pytest-7.4.0, pluggy-1.0.0\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/PRQL-pyprql\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | configfile: pyproject.toml\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | plugins: testmon-2.0.8, clarity-1.0.1, xdist-3.3.1, regtest-1.5.0, cov-4.1.0, xdoctest-1.1.1, sugar-0.9.7\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | collected 48 items\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | pyprql/tests/test_magic.py ...sss.xs.......x....xxsx.........ssxxx....   [ 89%]\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | pyprql/tests/test_prql_python.py .....                                   [100%]\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | \n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/PRQL-pyprql/report.xml -\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   | ============= 33 passed, 7 skipped, 8 xfailed in 72.85s (0:01:12) ==============\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2705  Success - Main Test Code and Docs\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \u2b50 Run Post Install Poetry\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/03e46c17-8acb-4935-bcb5-4b97faeed1d5/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2705  Success - Post Install Poetry\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \u2b50 Run Post actions/setup-python@v4\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[f7865881-fa26-463e-a548-14adffa6e17c/test]   \u2705  Success - Post actions/setup-python@v4\n[f7865881-fa26-463e-a548-14adffa6e17c/test] \ud83c\udfc1  Job succeeded\n",
        "stderr": "",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/PRQL-pyprql/.github/workflows/pull-request-crawler.yaml",
            "type": "pytest"
        },
        "workflow_name": "f7865881-fa26-463e-a548-14adffa6e17c",
        "build_tool": "pytest",
        "elapsed_time": 430.99551606178284
    }
}