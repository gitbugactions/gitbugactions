{
    "repository": "atmtools/typhon",
    "stars": 51,
    "language": "python",
    "size": 5660,
    "clone_url": "https://github.com/atmtools/typhon.git",
    "timestamp": "2023-06-28T11:06:18.629586Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_environment.TestEnvironment",
                "name": "test_get_environment_variables",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_environment.TestEnvironment",
                "name": "test_set_environment_variables",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_environment.TestEnvironment",
                "name": "test_undefined_variable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_environment.TestEnvironment",
                "name": "test_membership",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_environment.TestEnvironment",
                "name": "test_membership_negative",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_ellipsoidmodels",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_sind",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_cosd",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_tand",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_asind",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_cart2geocentric",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_geocentric2cart",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_geocentric2cart2geocentric",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_cart2geodetic",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_geodetic2cart",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_geodetic2cart2geodetic",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_geodetic2geocentric2geodetic",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_ellipsoid_r_geodetic",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_ellipsoid_r_geocentric",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_ellipsoid2d",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_ellipsoidcurvradius",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_great_circle_distance",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_great_circle_distance_radius",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_geogeraphic_mean",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_cartposlos2geocentric",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geodesy.TestGeodesy",
                "name": "test_cartposlos2geocentric_scalar",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geographical.TestGeographical",
                "name": "test_area_weighted_mean",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_geographical.TestGeoIndex",
                "name": "test_query",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_nonlte.TestNonlte",
                "name": "test_trapz_inte_edge",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_spectroscopy.TestSpectroscopy",
                "name": "test_linewidth",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_topography.TestEnvironment",
                "name": "test_srtm30_grids",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_topography.TestEnvironment",
                "name": "test_elevation",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Too expensive to run every time.",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.collocations.test_collocations.TestCollocations",
                "name": "test_search",
                "time": 0.166,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.collocations.test_collocations.TestCollocations",
                "name": "test_flat_to_main_coord",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.collocations.test_collocations.TestCollocations",
                "name": "test_collocate_collapse_expand",
                "time": 0.048,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_contains[None]",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_contains[local]",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_contains[zip]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert ('2018-01-01' in Name:\ttutorial\\nType:\tMulti-Files\\nFiles path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfile...day}/{hour}{minute}{second}-{end_hour}{end_minute}{end_second}.nc\\nUser placeholder:\t{'satellite': '(?P<satellite>.+?)'}) == True",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_glob[None]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_glob[local]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_glob[zip]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Failure",
                        "message": "typhon.files.fileset.NoFilesError: Found no files for 140487487870432!\nPath: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/tutorial/{satellite}/*/*.nc\nCheck the path for misspellings and whether there are files in this time period.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_magic_methods",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "unconditional skip",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_tutorial[None]",
                "time": 0.355,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_tutorial[local]",
                "time": 0.338,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_files_overlap_subdirectory[None]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_files_overlap_subdirectory[local]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_files_overlap_subdirectory[zip]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Failure",
                        "message": "typhon.files.fileset.NoFilesError: Found no files for tutorial between 2018-01-02 00:00:00 and 2018-01-03 23:59:59.999999!\nPath: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/tutorial/{satellite}/{year}-{month}-{day}/{hour}{minute}{second}-{end_hour}{end_minute}{end_second}.nc\nCheck the path for misspellings and whether there are files in this time period.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_single[None]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_single[local]",
                "time": 0.038,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_single[zip]",
                "time": 0.061,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_sequence[None]",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_sequence[local]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_sequence[zip]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Failure",
                        "message": "typhon.files.fileset.NoFilesError: Found no files for sequence-placeholder between 2018-01-01 00:00:00 and 2018-01-01 23:59:59.999999!\nPath: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\nCheck the path for misspellings and whether there are files in this time period.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_logs[None]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_logs[local]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_logs[zip]",
                "time": 0.046,
                "results": [
                    {
                        "result": "Failure",
                        "message": "typhon.files.fileset.NoFilesError: Found no files for sequence-placeholder between 2018-01-01 00:00:00 and 2018-01-01 23:59:59.999999!\nPath: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\nCheck the path for misspellings and whether there are files in this time period.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_sequence_placeholder[None]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_sequence_placeholder[local]",
                "time": 0.041,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_sequence_placeholder[zip]",
                "time": 0.031,
                "results": [
                    {
                        "result": "Failure",
                        "message": "typhon.files.fileset.NoFilesError: Found no files for sequence-placeholder between 2018-01-01 00:00:00 and 2018-01-01 23:59:59.999999!\nPath: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\nCheck the path for misspellings and whether there are files in this time period.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_regex[None]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_regex[local]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_regex[zip]",
                "time": 0.029,
                "results": [
                    {
                        "result": "Failure",
                        "message": "typhon.files.fileset.NoFilesError: Found no files for regex-HIRS!\nPath: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/regex/NSS.HIR[XS].{satcode}.D{year2}{doy}.S{hour}{minute}.E{end_hour}{end_minute}.B{B}.{station}.gz\nCheck the path for misspellings and whether there are files in this time period.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_complicated_subdirs[None]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_complicated_subdirs[local]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_complicated_subdirs[zip]",
                "time": 0.027,
                "results": [
                    {
                        "result": "Failure",
                        "message": "typhon.files.fileset.NoFilesError: Found no files for 140487474477328!\nPath: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/pinocchio/t{year2}{month}{day}/tm{year2}{month}{day}{hour}{minute}{second}{millisecond}.jpg\nCheck the path for misspellings and whether there are files in this time period.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_align",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "unconditional skip",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_fileset.TestFileSet",
                "name": "test_compare_fileinfo",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_utils.TestCompression",
                "name": "test_compress_decompress_zip",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_utils.TestCompression",
                "name": "test_compress_decompress_gzip",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_utils.TestCompression",
                "name": "test_compress_decompress_bz2",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.test_utils.TestCompression",
                "name": "test_compress_decompress_lzma",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.handlers.test_netcdf4.TestNetCDF4",
                "name": "test_dimension_mapping",
                "time": 0.066,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.handlers.test_netcdf4.TestNetCDF4",
                "name": "test_scalar_masked",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.handlers.test_netcdf4.TestNetCDF4",
                "name": "test_times",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.handlers.test_netcdf4.TestNetCDF4",
                "name": "test_scalefactor",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.files.handlers.test_netcdf4.TestFSNetCDF",
                "name": "test_fsnetcdf_handler",
                "time": 0.052,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestCommon",
                "name": "test_integrate_column",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestCommon",
                "name": "test_integrate_column_coordinates",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestCommon",
                "name": "test_interpolate_halflevels",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestCommon",
                "name": "test_sum_digits",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestCommon",
                "name": "test_nlogspace",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestCommon",
                "name": "test_promote_maximally",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestCommon",
                "name": "test_squeezable_logspace",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestCommon",
                "name": "test_squeezable_logspace_nosqueeze",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestCommon",
                "name": "test_squeezable_logspace_fixpointbounds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestCommon",
                "name": "test_squeezable_logspace_squeezebounds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.math.test_math.TestArray",
                "name": "test_argclosest",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_integrate_water_vapor_hse",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_integrate_water_vapor_nonhse",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_integrate_water_vapor_ivalidin",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_integrate_water_vapor_multi",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_vmr2relative_humidity",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_relative_humidity2vmr",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_vmr_rh_conversion",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_moist_lapse_rate",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_standard_atmosphere",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_standard_atmosphere_pressure",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_pressure2height",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_atmosphere.TestAtmosphere",
                "name": "test_pressure2height_with_T",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_planck",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_planck_wavelength",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_planck_wavenumber",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_rayleighjeans",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_rayleighjeans_wavelength",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_radiance2planckTb",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_radianc2rayleighjeansTb",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_snell",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_fresnel",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_frequency2wavelength",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_frequency2wavenumber",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_wavelength2frequency",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_wavelength2wavenumber",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_wavenumber2frequency",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_wavenumber2wavelength",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_perfrequency2perwavelength",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_perwavelength2perfrequency",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_perfreq_perlam_conversion",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_perfrequency2perwavenumber",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_perwavenumber2perfrequency",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestEM",
                "name": "test_perfreq_perwn_conversion",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestThermodynamics",
                "name": "test_e_eq_ice_mk",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestThermodynamics",
                "name": "test_e_eq_water_mk",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestThermodynamics",
                "name": "test_e_eq_mixed_mk",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestThermodynamics",
                "name": "test_density",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestThermodynamics",
                "name": "test_mixing_ratio2specific_humidity",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestThermodynamics",
                "name": "test_mixing_ratio2vmr",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestThermodynamics",
                "name": "test_specific_humidity2mixing_ratio",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestThermodynamics",
                "name": "test_specific_humidity2vmr",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestThermodynamics",
                "name": "test_vmr2mixing_ratio",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.physics.test_physics.TestThermodynamics",
                "name": "test_vmr2specific_humidity",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_colors2cmap",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_cmap2rgba",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_cmap2rgba_interpolation",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_cmap2cpt",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_cmap2txt",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_cmap2act",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_cmap_from_txt",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_cmap_from_act",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_get_material_design",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_get_material_design_valuerror",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_named_color_mapping",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_colors.TestColors",
                "name": "test_named_color_hex",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_plots.TestPlots",
                "name": "test_figsize",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_plots.TestPlots",
                "name": "test_get_subplot_arrangement",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_plots.TestPlots",
                "name": "test_get_style_path_method",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_plots.TestPlots",
                "name": "test_get_style_path_call",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_plots.TestPlots",
                "name": "test_get_style_path_default",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_plots.TestPlots",
                "name": "test_undefined_style",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_plots.TestPlots",
                "name": "test_available_styles",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.plots.test_plots.TestPlots",
                "name": "test_write_multi",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.retrieval.qrnn.test_qrnn.TestQrnn",
                "name": "test_qrnn[backend0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "got empty parameter set ['backend'], function test_qrnn at /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/retrieval/qrnn/test_qrnn.py:44",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.retrieval.qrnn.test_qrnn.TestQrnn",
                "name": "test_qrnn_datasets[backend0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "got empty parameter set ['backend'], function test_qrnn_datasets at /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/retrieval/qrnn/test_qrnn.py:71",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.retrieval.qrnn.test_qrnn.TestQrnn",
                "name": "test_save_qrnn[backend0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "got empty parameter set ['backend'], function test_save_qrnn at /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/retrieval/qrnn/test_qrnn.py:82",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utils.test_latex.TestLaTeX",
                "name": "test_texify_matrix",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utils.test_utils.TestUtils",
                "name": "test_deprecated",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utils.test_utils.TestUtils",
                "name": "test_image2mpeg",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utils.test_utils.TestUtils",
                "name": "test_unique",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utils.test_utils.TestUtils",
                "name": "test_undo_xarray_floatification",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utils.test_utils.TestUtils",
                "name": "test_Timer_methods",
                "time": 0.051,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utils.test_utils.TestUtils",
                "name": "test_Timer_block",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.utils.test_utils.TestUtils",
                "name": "test_Timer_decorator",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9] \ud83d\ude80  Start image=crawlergpt:latest\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon] user=0 workdir=\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v1\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9] \ud83e\uddea  Matrix: map[name:ubuntu os:ubuntu-latest python-version:3.9]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9] \u2b50 Run Main actions/checkout@v2\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u2705  Success - Main actions/checkout@v2\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9] \u2b50 Run Main Install Python 3.9\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udc33  docker cp src=/tmp/act-cache/85730bff-473c-48d1-a140-a819b1e093ed/act/actions-setup-python@v1/ dst=/var/run/act/actions/actions-setup-python@v1/\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v1/] user=0 workdir=\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v1/dist/index.js] user= workdir=\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::isExplicit: \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::explicit? false\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::explicit? true\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::explicit? true\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::explicit? true\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::explicit? true\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::explicit? true\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::explicit? true\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::evaluating 6 versions\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::matched: 3.9.6\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Successfully setup CPython (3.9.6)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u2753 add-matcher /run/act/actions/actions-setup-python@v1/.github/python.json\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u2705  Success - Main Install Python 3.9\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u2699  ::set-output:: python-version=3.9.6\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9] \u2b50 Run Main Install (Linux)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting pip\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Installing collected packages: pip\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Attempting uninstall: pip\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     Found existing installation: pip 21.2.4\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     Uninstalling pip-21.2.4:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |       Successfully uninstalled pip-21.2.4\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Successfully installed pip-23.1.2\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Processing /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Installing build dependencies: started\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Installing build dependencies: finished with status 'done'\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Getting requirements to build wheel: started\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Getting requirements to build wheel: finished with status 'done'\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Preparing metadata (pyproject.toml): started\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting docutils (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading docutils-0.20.1-py3-none-any.whl (572 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 572.7/572.7 kB 7.3 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting fsspec (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading fsspec-2023.6.0-py3-none-any.whl (163 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 163.8/163.8 kB 4.9 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting h5netcdf (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading h5netcdf-1.2.0-py3-none-any.whl (43 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 43.3/43.3 kB 1.7 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting imageio (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading imageio-2.31.1-py3-none-any.whl (313 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 313.2/313.2 kB 28.3 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting matplotlib>=1.4 (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading matplotlib-3.7.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.6 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 11.6/11.6 MB 40.8 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting netCDF4>=1.1.1 (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading netCDF4-1.6.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.4 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 5.4/5.4 MB 32.1 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting numexpr (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading numexpr-2.8.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (380 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 380.7/380.7 kB 12.5 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting numpy>=1.13 (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading numpy-1.25.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.7 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 17.7/17.7 MB 30.3 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting pandas (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading pandas-2.0.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.4 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 12.4/12.4 MB 40.6 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting scikit-image (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading scikit_image-0.21.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.8 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 13.8/13.8 MB 8.9 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting scikit-learn (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading scikit_learn-1.2.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (9.6 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 9.6/9.6 MB 21.8 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting scipy>=0.15.1 (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading scipy-1.11.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (36.5 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 36.5/36.5 MB 20.9 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Requirement already satisfied: setuptools>=0.7.2 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from typhon==0.9.0+dev45.g8f80597) (56.0.0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting xarray>=0.10.2 (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading xarray-2023.6.0-py3-none-any.whl (999 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 999.1/999.1 kB 31.8 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting pytest (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 4.8 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting pint (from typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading Pint-0.22-py3-none-any.whl (294 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 294.0/294.0 kB 20.7 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting contourpy>=1.0.1 (from matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading contourpy-1.1.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (300 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 300.4/300.4 kB 6.6 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting cycler>=0.10 (from matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading cycler-0.11.0-py3-none-any.whl (6.4 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting fonttools>=4.22.0 (from matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading fonttools-4.40.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.4 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.4/4.4 MB 33.1 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting kiwisolver>=1.0.1 (from matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading kiwisolver-1.4.4-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.6 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 15.5 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting packaging>=20.0 (from matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.1 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting pillow>=6.2.0 (from matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading Pillow-9.5.0-cp39-cp39-manylinux_2_28_x86_64.whl (3.4 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.4/3.4 MB 24.8 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting pyparsing>=2.3.1 (from matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading pyparsing-3.1.0-py3-none-any.whl (102 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 102.6/102.6 kB 6.4 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting python-dateutil>=2.7 (from matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 247.7/247.7 kB 16.4 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting importlib-resources>=3.2.0 (from matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading importlib_resources-5.12.0-py3-none-any.whl (36 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting cftime (from netCDF4>=1.1.1->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading cftime-1.6.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.3/1.3 MB 17.1 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting certifi (from netCDF4>=1.1.1->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 6.4 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting pytz>=2020.1 (from pandas->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 502.3/502.3 kB 4.2 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting tzdata>=2022.1 (from pandas->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading tzdata-2023.3-py2.py3-none-any.whl (341 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 341.8/341.8 kB 8.6 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting h5py (from h5netcdf->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading h5py-3.9.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.8 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.8/4.8 MB 19.5 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting typing-extensions (from pint->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting iniconfig (from pytest->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting pluggy<2.0,>=0.12 (from pytest->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting tomli>=1.0.0 (from pytest->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting networkx>=2.8 (from scikit-image->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading networkx-3.1-py3-none-any.whl (2.1 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 9.1 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting tifffile>=2022.8.12 (from scikit-image->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading tifffile-2023.4.12-py3-none-any.whl (219 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 219.4/219.4 kB 6.2 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting PyWavelets>=1.1.1 (from scikit-image->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading PyWavelets-1.4.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.9 MB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 6.9/6.9 MB 22.7 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting lazy_loader>=0.2 (from scikit-image->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading lazy_loader-0.2-py3-none-any.whl (8.6 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting joblib>=1.1.1 (from scikit-learn->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading joblib-1.2.0-py3-none-any.whl (297 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 298.0/298.0 kB 39.0 MB/s eta 0:00:00\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting threadpoolctl>=2.0.0 (from scikit-learn->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading threadpoolctl-3.1.0-py3-none-any.whl (14 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting zipp>=3.1.0 (from importlib-resources>=3.2.0->matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Collecting six>=1.5 (from python-dateutil>=2.7->matplotlib>=1.4->typhon==0.9.0+dev45.g8f80597)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Building wheels for collected packages: typhon\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Building wheel for typhon (pyproject.toml): started\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Building wheel for typhon (pyproject.toml): finished with status 'done'\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Created wheel for typhon: filename=typhon-0.9.0+dev45.g8f80597-py3-none-any.whl size=775004 sha256=c6082db7ac4945135a9afb01534e4f183716dbd067a54e5620e32eaf41812a94\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/b4/b5/9d/79426523798fd30316a9362bde4c99f868eecd321c48dc048f\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Successfully built typhon\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Installing collected packages: pytz, zipp, tzdata, typing-extensions, tomli, threadpoolctl, six, pyparsing, pluggy, pillow, packaging, numpy, networkx, lazy_loader, kiwisolver, joblib, iniconfig, fsspec, fonttools, exceptiongroup, docutils, cycler, certifi, tifffile, scipy, PyWavelets, python-dateutil, pytest, pint, numexpr, importlib-resources, imageio, h5py, contourpy, cftime, scikit-learn, scikit-image, pandas, netCDF4, matplotlib, h5netcdf, xarray, typhon\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Successfully installed PyWavelets-1.4.1 certifi-2023.5.7 cftime-1.6.2 contourpy-1.1.0 cycler-0.11.0 docutils-0.20.1 exceptiongroup-1.1.1 fonttools-4.40.0 fsspec-2023.6.0 h5netcdf-1.2.0 h5py-3.9.0 imageio-2.31.1 importlib-resources-5.12.0 iniconfig-2.0.0 joblib-1.2.0 kiwisolver-1.4.4 lazy_loader-0.2 matplotlib-3.7.1 netCDF4-1.6.4 networkx-3.1 numexpr-2.8.4 numpy-1.25.0 packaging-23.1 pandas-2.0.2 pillow-9.5.0 pint-0.22 pluggy-1.2.0 pyparsing-3.1.0 pytest-7.4.0 python-dateutil-2.8.2 pytz-2023.3 scikit-image-0.21.0 scikit-learn-1.2.2 scipy-1.11.0 six-1.16.0 threadpoolctl-3.1.0 tifffile-2023.4.12 tomli-2.0.1 typhon-0.9.0+dev45.g8f80597 typing-extensions-4.6.3 tzdata-2023.3 xarray-2023.6.0 zipp-3.15.0\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | [notice] To update, run: pip install --upgrade pip\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u2705  Success - Main Install (Linux)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9] \u2b50 Run Main Testfiles Setup\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Cloning into 'typhon-testfiles'...\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u2705  Success - Main Testfiles Setup\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9] \u2b50 Run Main Test (Linux / macOS)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | ============================= test session starts ==============================\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | platform linux -- Python 3.9.6, pytest-7.4.0, pluggy-1.2.0\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | collected 161 items\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/test_environment.py .....                                          [  3%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/test_geodesy.py .....................                              [ 16%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/test_geographical.py ..                                            [ 17%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/test_nonlte.py .                                                   [ 18%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/test_spectroscopy.py .                                             [ 18%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/test_topography.py .s                                              [ 19%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/collocations/test_collocations.py ...                              [ 21%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/files/test_fileset.py ..F..Fs....F.....F..F..F..F..Fs.             [ 41%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/files/test_utils.py ....                                           [ 44%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/files/handlers/test_netcdf4.py .....                               [ 47%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/math/test_math.py ...........                                      [ 54%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/physics/test_atmosphere.py ............                            [ 61%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/physics/test_physics.py ...............................            [ 80%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/plots/test_colors.py ............                                  [ 88%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/plots/test_plots.py ........                                       [ 93%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/retrieval/qrnn/test_qrnn.py sss                                    [ 95%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/utils/test_latex.py .                                              [ 95%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/utils/test_utils.py .......                                        [100%]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | =================================== FAILURES ===================================\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | ________________________ TestFileSet.test_contains[zip] ________________________\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = <typhon.tests.files.test_fileset.TestFileSet object at 0x7fc5cb1ee910>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | file_system = <Archive-like object ZipFileSystem at 140487488912928>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.skipif(refdir is None, reason=\"typhon-testfiles not found.\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.parametrize(\"file_system\", [None, \"local\", \"zip\"], indirect=True)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def test_contains(self, file_system):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"Test whether all filesets cover the testing timestamps.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Returns:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         filesets = self.init_filesets(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         tests = [\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # [Timestamp(s), Should it be covered by the filesets?]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             [\"2016-01-01\", False],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             [\"2018-01-01\", True],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             [\"2018-01-01 06:00:00\", True],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             [datetime.datetime(2018, 1, 1), True],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             [datetime.datetime(2018, 1, 1, 12,), True],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         ]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         for name, fileset in filesets.items():\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # print(\"Run test-contains for %s fileset:\" % name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for timestamp, check in tests:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # print(\"\\tCheck coverage of %s (expected %s, got %s)\" % (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 #     timestamp, check, timestamp in fileset\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # ))\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >               assert (timestamp in fileset) == check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E               AssertionError: assert ('2018-01-01' in Name:\ttutorial\\nType:\tMulti-Files\\nFiles path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfile...day}/{hour}{minute}{second}-{end_hour}{end_minute}{end_second}.nc\\nUser placeholder:\t{'satellite': '(?P<satellite>.+?)'}) == True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/files/test_fileset.py:159: AssertionError\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | __________________________ TestFileSet.test_glob[zip] __________________________\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\t140487487870432\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/tutorial/{satellite}/*/*.nc\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'satellite': '(?P<satellite>SatelliteA)'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(1, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(9999, 12, 31, 23, 59, 59, 999998), sort = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1218: StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | During handling of the above exception, another exception occurred:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = <typhon.tests.files.test_fileset.TestFileSet object at 0x7fc5cb1eec40>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | file_system = <Archive-like object ZipFileSystem at 140487487869856>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.skipif(refdir is None, reason=\"typhon-testfiles not found.\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.parametrize(\"file_system\", [None, \"local\", \"zip\"], indirect=True)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def test_glob(self, file_system):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         refdir = self._refdir_for_fs(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             join(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 refdir,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"tutorial\", \"{satellite}\", \"*\", \"*.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             ),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             placeholder={\"satellite\": 'SatelliteA'},\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fs=file_system\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Sort this after paths rather than times (because the times are all\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # equal)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         check = list(sorted([\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-02', '000000-040000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-02', '080000-120000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-02', '200000-000000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-02', '040000-080000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-02', '120000-160000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-02', '160000-200000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-01', '000000-040000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-01', '080000-120000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-01', '200000-000000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-01', '040000-080000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-01', '120000-160000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 join(refdir, 'tutorial',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      'SatelliteA', '2018-01-01', '160000-200000.nc'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 [datetime.datetime(1, 1, 1, 0, 0),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {'satellite': 'SatelliteA'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         ], key=lambda x: x.path))\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >       assert list(sorted(files, key=lambda x: x.path)) == check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/files/test_fileset.py:251: \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:595: in __len__\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     return sum(1 for _ in self.find())\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:595: in <genexpr>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     return sum(1 for _ in self.find())\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\t140487487870432\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/tutorial/{satellite}/*/*.nc\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'satellite': '(?P<satellite>SatelliteA)'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(1, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(9999, 12, 31, 23, 59, 59, 999998), sort = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We have found some files and can return them\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return_files, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         except StopIteration as err:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           typhon.files.fileset.NoFilesError: Found no files for 140487487870432!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/tutorial/{satellite}/*/*.nc\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1225: NoFilesError\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _______________ TestFileSet.test_files_overlap_subdirectory[zip] _______________\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\ttutorial\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfile...our}{minute}{second}-{end_hour}{end_minute}{end_second}.nc\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'satellite': '(?P<satellite>SatelliteA)'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(2018, 1, 2, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(2018, 1, 3, 23, 59, 59, 999999), sort = False\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1218: StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | During handling of the above exception, another exception occurred:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = <typhon.tests.files.test_fileset.TestFileSet object at 0x7fc5cb1eed00>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | file_system = <Archive-like object ZipFileSystem at 140487487909600>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.skipif(refdir is None, reason=\"typhon-testfiles not found.\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.parametrize(\"file_system\", [None, \"local\", \"zip\"], indirect=True)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def test_files_overlap_subdirectory(self, file_system):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"A file covers a time period longer than its sub directory.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         filesets = self.init_filesets(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         filesets[\"tutorial\"].set_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             satellite=\"SatelliteA\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >       found_file = filesets[\"tutorial\"].find_closest(\"2018-01-03\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/files/test_fileset.py:502: \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1475: in find_closest\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     files = list(self.find(start, end, sort=False, filters=filters))\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\ttutorial\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfile...our}{minute}{second}-{end_hour}{end_minute}{end_second}.nc\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'satellite': '(?P<satellite>SatelliteA)'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(2018, 1, 2, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(2018, 1, 3, 23, 59, 59, 999999), sort = False\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We have found some files and can return them\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return_files, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         except StopIteration as err:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           typhon.files.fileset.NoFilesError: Found no files for tutorial between 2018-01-02 00:00:00 and 2018-01-03 23:59:59.999999!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/tutorial/{satellite}/{year}-{month}-{day}/{hour}{minute}{second}-{end_hour}{end_minute}{end_second}.nc\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1225: NoFilesError\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | ________________________ TestFileSet.test_sequence[zip] ________________________\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\tsequence-placeholder\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'id': '(?P<id>\\\\d{4})'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(2018, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(2018, 1, 1, 23, 59, 59, 999999), sort = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1218: StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | During handling of the above exception, another exception occurred:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = <typhon.tests.files.test_fileset.TestFileSet object at 0x7fc5cb1eea30>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | file_system = <Archive-like object ZipFileSystem at 140487484345408>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.skipif(refdir is None, reason=\"typhon-testfiles not found.\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.parametrize(\"file_system\", [None, \"local\", \"zip\"], indirect=True)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def test_sequence(self, file_system):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"Test find on the sequence filesets.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Returns:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         filesets = self.init_filesets(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         refdir = self._refdir_for_fs(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # STANDARD DATASET\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Should not find anything:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         empty = list(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filesets[\"sequence-placeholder\"].find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"2016-12-31\", \"2018-01-01\", no_files_error=False\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             ))\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         assert not empty\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Should find two files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >       found_files = list(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filesets[\"sequence-placeholder\"].find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"2018-01-01\", \"2018-01-02\",\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             ))\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/files/test_fileset.py:579: \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\tsequence-placeholder\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'id': '(?P<id>\\\\d{4})'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(2018, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(2018, 1, 1, 23, 59, 59, 999999), sort = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We have found some files and can return them\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return_files, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         except StopIteration as err:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           typhon.files.fileset.NoFilesError: Found no files for sequence-placeholder between 2018-01-01 00:00:00 and 2018-01-01 23:59:59.999999!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1225: NoFilesError\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | __________________________ TestFileSet.test_logs[zip] __________________________\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\tsequence-placeholder\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'id': '(?P<id>\\\\d{4})'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(2018, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(2018, 1, 1, 23, 59, 59, 999999), sort = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1218: StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | During handling of the above exception, another exception occurred:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = <typhon.tests.files.test_fileset.TestFileSet object at 0x7fc5cb118ee0>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | file_system = <Archive-like object ZipFileSystem at 140487487312752>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | caplog = <_pytest.logging.LogCaptureFixture object at 0x7fc5cac6d760>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.skipif(refdir is None, reason=\"typhon-testfiles not found.\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.parametrize(\"file_system\", [None, \"local\", \"zip\"], indirect=True)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def test_logs(self, file_system, caplog):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"Test that searching logs as expected.\"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         filesets = self.init_filesets(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         refdir = self._refdir_for_fs(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # should log\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         with caplog.at_level(logging.DEBUG):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           found_files = list(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 filesets[\"sequence-placeholder\"].find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"2018-01-01\", \"2018-01-02\",\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ))\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/files/test_fileset.py:628: \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\tsequence-placeholder\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'id': '(?P<id>\\\\d{4})'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(2018, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(2018, 1, 1, 23, 59, 59, 999999), sort = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We have found some files and can return them\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return_files, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         except StopIteration as err:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           typhon.files.fileset.NoFilesError: Found no files for sequence-placeholder between 2018-01-01 00:00:00 and 2018-01-01 23:59:59.999999!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1225: NoFilesError\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | ------------------------------ Captured log call -------------------------------\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | INFO     typhon.files.fileset:fileset.py:1125 Find files for sequence-placeholder between 2018-01-01 00:00:00 and 2018-01-01 23:59:59\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | DEBUG    typhon.files.fileset:fileset.py:1129 Searching /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt via file system <Archive-like object ZipFileSystem at 140487487312752>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | __________________ TestFileSet.test_sequence_placeholder[zip] __________________\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\tsequence-placeholder\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'id': '(?P<id>\\\\d{4})'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(2018, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(2018, 1, 1, 23, 59, 59, 999999), sort = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1218: StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | During handling of the above exception, another exception occurred:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = <typhon.tests.files.test_fileset.TestFileSet object at 0x7fc5cb118190>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | file_system = <Archive-like object ZipFileSystem at 140487487842096>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.skipif(refdir is None, reason=\"typhon-testfiles not found.\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.parametrize(\"file_system\", [None, \"local\", \"zip\"], indirect=True)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def test_sequence_placeholder(self, file_system):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"Test find on all standard filesets.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Returns:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         filesets = self.init_filesets(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         refdir = self._refdir_for_fs(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # STANDARD DATASET\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Should not find anything:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         empty = list(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filesets[\"sequence-placeholder\"].find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"2016-12-31\", \"2018-01-01\", no_files_error=False\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             ))\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         assert not empty\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Should find two files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >       found_files = list(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filesets[\"sequence-placeholder\"].find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"2018-01-01\", \"2018-01-02\",\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             ))\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/files/test_fileset.py:658: \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\tsequence-placeholder\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'id': '(?P<id>\\\\d{4})'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(2018, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(2018, 1, 1, 23, 59, 59, 999999), sort = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We have found some files and can return them\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return_files, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         except StopIteration as err:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           typhon.files.fileset.NoFilesError: Found no files for sequence-placeholder between 2018-01-01 00:00:00 and 2018-01-01 23:59:59.999999!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1225: NoFilesError\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _________________________ TestFileSet.test_regex[zip] __________________________\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\tregex-HIRS\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfi...}.{station}.gz\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'B': '(?P<B>\\\\d{7})', 'station': '(?P<station>.{2})', 'satcode': '(?P<satcode>.{2})'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(1, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(9999, 12, 31, 23, 59, 59, 999998), sort = False\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1218: StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | During handling of the above exception, another exception occurred:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = <typhon.tests.files.test_fileset.TestFileSet object at 0x7fc5cb118a60>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | file_system = <Archive-like object ZipFileSystem at 140487484312016>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.skipif(refdir is None, reason=\"typhon-testfiles not found.\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.parametrize(\"file_system\", [None, \"local\", \"zip\"], indirect=True)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def test_regex(self, file_system):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         filesets = self.init_filesets(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         check = [\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             FileInfo(join(self._refdir_for_fs(file_system), 'regex',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                           'NSS.HIRX.NJ.D99127.S0632.E0820.B2241718.WI.gz'),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      [datetime.datetime(1999, 5, 7, 6, 32),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                       datetime.datetime(1999, 5, 7, 8, 20)],\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                      {'satcode': 'NJ', 'B': '2241718',\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                       'station': 'WI'}),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         ]\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >       found_file = filesets[\"regex-HIRS\"].find_closest(\"1999-05-08\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/files/test_fileset.py:712: \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1475: in find_closest\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     files = list(self.find(start, end, sort=False, filters=filters))\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\tregex-HIRS\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfi...}.{station}.gz\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | User placeholder:\t{'B': '(?P<B>\\\\d{7})', 'station': '(?P<station>.{2})', 'satcode': '(?P<satcode>.{2})'}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(1, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(9999, 12, 31, 23, 59, 59, 999998), sort = False\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We have found some files and can return them\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return_files, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         except StopIteration as err:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           typhon.files.fileset.NoFilesError: Found no files for regex-HIRS!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/regex/NSS.HIR[XS].{satcode}.D{year2}{doy}.S{hour}{minute}.E{end_hour}{end_minute}.B{B}.{station}.gz\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1225: NoFilesError\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | __________________ TestFileSet.test_complicated_subdirs[zip] ___________________\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\t140487474477328\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/pinocchio/t{year2}{month}{day}/tm{year2}{month}{day}{hour}{minute}{second}{millisecond}.jpg\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(1, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(9999, 12, 31, 23, 59, 59, 999998), sort = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1218: StopIteration\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | During handling of the above exception, another exception occurred:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = <typhon.tests.files.test_fileset.TestFileSet object at 0x7fc5cb1287f0>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | file_system = <Archive-like object ZipFileSystem at 140487474476224>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.skipif(refdir is None, reason=\"typhon-testfiles not found.\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     @pytest.mark.parametrize(\"file_system\", [None, \"local\", \"zip\"], indirect=True)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def test_complicated_subdirs(self, file_system):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"Check whether FileSet can find files in subdirectories that contain\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         text and placeholders.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         refdir = self._refdir_for_fs(file_system)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The Pinocchio fileset from the cloud toolbox: a folder name contains\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # normal text and a placeholder:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         pinocchio = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             join(refdir, \"pinocchio\",\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  \"t{year2}{month}{day}\",\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  \"tm{year2}{month}{day}{hour}{minute}{second}{millisecond}.jpg\",\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                  ),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fs=file_system\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >       files = list(pinocchio)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/files/test_fileset.py:740: \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:595: in __len__\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     return sum(1 for _ in self.find())\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:595: in <genexpr>\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     return sum(1 for _ in self.find())\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | self = Name:\t140487474477328\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Type:\tMulti-Files\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Files path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/pinocchio/t{year2}{month}{day}/tm{year2}{month}{day}{hour}{minute}{second}{millisecond}.jpg\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | start = datetime.datetime(1, 1, 1, 0, 0)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | end = datetime.datetime(9999, 12, 31, 23, 59, 59, 999998), sort = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | only_path = False, bundle = None, filters = None, no_files_error = True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     def find(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             self, start=None, end=None, sort=True, only_path=False,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle=None, filters=None, no_files_error=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\" Find all files of this fileset in a given time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         The *start* and *end* parameters build a semi-open interval: only the\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         files that are equal or newer than *start* and older than *end* are\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         going to be found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         While searching this method checks whether the file lies in the time\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         periods given by `exclude` while initializing.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Args:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             start: Start date either as datetime object or as string\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 (\"YYYY-MM-DD hh:mm:ss\"). Year, month and day are required.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Hours, minutes and seconds are optional. If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.min per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             end: End date. Same format as \"start\". If not given, it is\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 datetime.max per default.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             sort: If true, all files will be yielded sorted by their starting\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 and ending time. Default is true.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             only_path: If true, only the paths of the files will be returned\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 not their :class:`~typhon.files.handlers.common.FileInfo`\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 object.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             bundle: Instead of only yielding one file at a time, you can get a\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 bundle of files. There are two possibilities: by setting this\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 to an integer, you can define the size of the bundle directly\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 or by setting this to a string (e.g. *1H*),\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 you can define the time period of one bundle. See\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for allowed time specifications. Default value is 1. This\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 argument will be ignored when having a single-file fileset.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 When using *bundle*, the returned files will always be sorted\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 ignoring the state of the *sort* argument.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             filters: Limits user-defined placeholder to certain values.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 Must be a dictionary where the keys are the names of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 user-defined placeholders and the values either strings or\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 lists of strings with allowed placeholder values (can be\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 represented by regular expressions). If the key name starts\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 with a *!* (exclamation mark), the value represent a black\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 list (values that are not allowed).\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             no_files_error: If true, raises an NoFilesError when no\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 files are found.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Yields:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             Either a :class:`~typhon.files.handlers.common.FileInfo` object for\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             each found file or - if *bundle_size* is not None - a list of\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             :class:`~typhon.files.handlers.common.FileInfo` objects.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         Examples:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         .. code-block:: python\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Define a fileset consisting of multiple files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             fileset = FileSet(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"/dir/{year}/{month}/{day}/{hour}{minute}{second}.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Find some files of the fileset:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file in fileset.find(\"2017-01-01\", \"2017-01-02\"):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # file is a FileInfo object that has the attribute path\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 # and times.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.path)  # e.g. \"/dir/2017/01/01/120000.nc\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 print(file.times)  # list of two datetime objects\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         \"\"\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The user can give strings instead of datetime objects:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         start = datetime.min if start is None else to_datetime(start)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end = datetime.max if end is None else to_datetime(end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # We want to have a semi-open interval as explained in the doc string.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         end -= timedelta(microseconds=1)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if end < start:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 \"The start must be smaller than the end parameter!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.info(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Find files for {self.name:s} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"between {start:%Y-%m-%d %H:%M:%S} \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"and {end:%Y-%m-%d %H:%M:%S}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         logger.debug(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"Searching {self.path:s} via \"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f\"file system {self.file_system!s}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Special case: the whole fileset consists of one file only.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self.single_file:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if self.file_system.isfile(self.path):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_info = self.get_info(self.path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if IntervalTree.interval_overlaps(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                         file_info.times, (start, end)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     yield file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 raise ValueError(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \"The path of '%s' neither contains placeholders\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     \" nor is a path to an existing file!\" % self.name)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Files may exceed the time coverage of their directories. For example,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # a file located in the directory of 2018-01-13 contains data from\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # 2018-01-13 18:00:00 to 2018-01-14 02:00:00. In order to find them, we\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # must include the previous sub directory into the search range:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if self._sub_dir_time_resolution is None or start == datetime.min:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             dir_start = start - self._sub_dir_time_resolution\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Filter handling:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We can apply the standard path regex:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = re.compile(self._filled_path)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # Complete the regexes of the filters (simply adding curls around\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # them):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             white_list = self._complete_placeholders_regex(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 {f: v for f, v in filters.items() if not f.startswith(\"!\")}\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # The new regex for all files:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             regex = self._fill_placeholders(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 self.path,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 extra_placeholder=white_list,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 compile=True,\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             def convert(value):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if value is None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return None\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 elif isinstance(value, (tuple, list)):\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{'|'.join(value)}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 else:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                     return re.compile(f\"{value}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             black_list = {\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 f.lstrip(\"!\"): convert(v)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 for f, v in filters.items()\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 if f.startswith(\"!\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             }\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if filters is not None:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             logger.info(f\"Loaded filters:\\nWhitelist: {white_list}\"\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                   f\"\\nBlacklist: {black_list}\")\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Find all files by iterating over all searching paths and check\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # whether they match the path regex and the time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         file_finder = (\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             file_info\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for path, _ in self._get_search_dirs(dir_start, end, white_list)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             for file_info in self._get_matching_files(path, regex, start, end,)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             if not black_list or self._check_file(black_list, file_info.attr)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Even if no files were found, the user does not want to know.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         if not no_files_error:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 file_finder, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             return\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # The users wants an error to be raised if no files were found. Since\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # the file_finder is an iterator, we have to check whether it is empty.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # I do not know whether there is a more pythonic way but Matthew\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # Flaschen shows how to do it with itertools.tee:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         # https://stackoverflow.com/a/3114423\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         return_files, check_files = tee(file_finder)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         try:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             next(check_files)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             # We have found some files and can return them\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             yield from self._prepare_find_return(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |                 return_files, sort, only_path, bundle\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |             )\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |         except StopIteration as err:\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | >           raise NoFilesError(self, start, end)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           typhon.files.fileset.NoFilesError: Found no files for 140487474477328!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/pinocchio/t{year2}{month}{day}/tm{year2}{month}{day}{hour}{minute}{second}{millisecond}.jpg\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | E           Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/fileset.py:1225: NoFilesError\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | =============================== warnings summary ===============================\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/test_spectroscopy.py::TestSpectroscopy::test_linewidth\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/spectroscopy.py:37: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     return float(np.diff(s.roots()))\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/collocations/test_collocations.py::TestCollocations::test_collocate_collapse_expand\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/collocations/test_collocations.py:89: UserWarning: Converting non-nanosecond precision datetime values to nanosecond precision. This behavior can eventually be relaxed in xarray, as it is an artifact from pandas which is now beginning to support non-nanosecond precision values. This warning is caused by passing non-nanosecond np.datetime64 or np.timedelta64 values to the DataArray or Variable constructor; it can be silenced by converting the values to nanosecond precision ahead of time.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     test = xr.Dataset({\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/collocations/test_collocations.py::TestCollocations::test_collocate_collapse_expand\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/collocations/collocator.py:1153: UserWarning: Converting non-nanosecond precision timedelta values to nanosecond precision. This behavior can eventually be relaxed in xarray, as it is an artifact from pandas which is now beginning to support non-nanosecond precision values. This warning is caused by passing non-nanosecond np.datetime64 or np.timedelta64 values to the DataArray or Variable constructor; it can be silenced by converting the values to nanosecond precision ahead of time.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     metadata[\"interval\"] = xr.DataArray(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/files/handlers/test_netcdf4.py::TestNetCDF4::test_dimension_mapping\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/handlers/common.py:818: UserWarning: rename 'dim1' to 'dim1' does not create an index anymore. Try using swap_dims instead or use set_index after rename to create an indexed coordinate.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ds = ds.rename(mapping)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/files/handlers/test_netcdf4.py::TestNetCDF4::test_dimension_mapping\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/files/handlers/common.py:823: UserWarning: rename 'dim1' to 'dim1' does not create an index anymore. Try using swap_dims instead or use set_index after rename to create an indexed coordinate.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ds = ds.rename(mapping)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/physics/test_physics.py::TestThermodynamics::test_e_eq_mixed_mk\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/physics/test_physics.py::TestThermodynamics::test_e_eq_mixed_mk\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/physics/test_physics.py::TestThermodynamics::test_e_eq_mixed_mk\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/physics/thermodynamics.py:182: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     return float(e_eq) if is_float_input else e_eq\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | tests/utils/test_utils.py::TestUtils::test_undo_xarray_floatification\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |   /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/typhon/tests/utils/test_utils.py:37: UserWarning: Converting non-nanosecond precision datetime values to nanosecond precision. This behavior can eventually be relaxed in xarray, as it is an artifact from pandas which is now beginning to support non-nanosecond precision values. This warning is caused by passing non-nanosecond np.datetime64 or np.timedelta64 values to the DataArray or Variable constructor; it can be silenced by converting the values to nanosecond precision ahead of time.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   |     ds = xarray.Dataset(\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | \n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/report.xml -\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | =========================== short test summary info ============================\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | FAILED tests/files/test_fileset.py::TestFileSet::test_contains[zip] - AssertionError: assert ('2018-01-01' in Name:\ttutorial\\nType:\tMulti-Files\\nFiles path:\t/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfile...day}/{hour}{minute}{second}-{end_hour}{end_minute}{end_second}.nc\\nUser placeholder:\t{'satellite': '(?P<satellite>.+?)'}) == True\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | FAILED tests/files/test_fileset.py::TestFileSet::test_glob[zip] - typhon.files.fileset.NoFilesError: Found no files for 140487487870432!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/tutorial/{satellite}/*/*.nc\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | FAILED tests/files/test_fileset.py::TestFileSet::test_files_overlap_subdirectory[zip] - typhon.files.fileset.NoFilesError: Found no files for tutorial between 2018-01-02 00:00:00 and 2018-01-03 23:59:59.999999!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/tutorial/{satellite}/{year}-{month}-{day}/{hour}{minute}{second}-{end_hour}{end_minute}{end_second}.nc\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | FAILED tests/files/test_fileset.py::TestFileSet::test_sequence[zip] - typhon.files.fileset.NoFilesError: Found no files for sequence-placeholder between 2018-01-01 00:00:00 and 2018-01-01 23:59:59.999999!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | FAILED tests/files/test_fileset.py::TestFileSet::test_logs[zip] - typhon.files.fileset.NoFilesError: Found no files for sequence-placeholder between 2018-01-01 00:00:00 and 2018-01-01 23:59:59.999999!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | FAILED tests/files/test_fileset.py::TestFileSet::test_sequence_placeholder[zip] - typhon.files.fileset.NoFilesError: Found no files for sequence-placeholder between 2018-01-01 00:00:00 and 2018-01-01 23:59:59.999999!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/sequence/{year}/{doy}/sequence{id}.txt\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | FAILED tests/files/test_fileset.py::TestFileSet::test_regex[zip] - typhon.files.fileset.NoFilesError: Found no files for regex-HIRS!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/regex/NSS.HIR[XS].{satcode}.D{year2}{doy}.S{hour}{minute}.E{end_hour}{end_minute}.B{B}.{station}.gz\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | FAILED tests/files/test_fileset.py::TestFileSet::test_complicated_subdirs[zip] - typhon.files.fileset.NoFilesError: Found no files for 140487474477328!\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Path: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/typhon-testfiles/filesets/pinocchio/t{year2}{month}{day}/tm{year2}{month}{day}{hour}{minute}{second}{millisecond}.jpg\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | Check the path for misspellings and whether there are files in this time period.\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   | ============= 8 failed, 147 passed, 6 skipped, 9 warnings in 7.76s =============\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9]   \u274c  Failure - Main Test (Linux / macOS)\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9] exitcode '1': failure\n[7621e03c-c95b-4ea9-9bef-e78423133e59/ubuntu-py3.9] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job '${{ matrix.name }}-py${{ matrix.python-version }}' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/atmtools-typhon/.github/workflows/build-test-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 241.36083316802979
    }
}