{
    "repository": "alvarobartt/investpy",
    "stars": 1399,
    "language": "python",
    "size": 22401,
    "clone_url": "https://github.com/alvarobartt/investpy.git",
    "timestamp": "2023-07-01T12:56:35.619067Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_stocks",
                "time": 1.638,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_funds",
                "time": 5.409,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_etfs",
                "time": 0.578,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_indices",
                "time": 0.628,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_currency_crosses",
                "time": 0.393,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_bonds",
                "time": 0.144,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_commodities",
                "time": 0.143,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_cryptos",
                "time": 0.18,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_certificates",
                "time": 0.123,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_search",
                "time": 0.06,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_news",
                "time": 5.632,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy",
                "name": "test_investpy_technical",
                "time": 0.147,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: ERR#0015: error 403, try again later.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_stocks_errors",
                "time": 3.682,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_funds_errors",
                "time": 4.702,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_etfs_errors",
                "time": 0.791,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_indices_errors",
                "time": 0.494,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_currency_crosses_errors",
                "time": 0.249,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_bonds_errors",
                "time": 0.17,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_commodities_errors",
                "time": 0.179,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_crypto_errors",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_certificate_errors",
                "time": 0.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_search_errors",
                "time": 0.071,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_news_errors",
                "time": 6.337,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_investpy_errors",
                "name": "test_technical_errors",
                "time": 1.331,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests] \ud83d\ude80  Start image=crawlergpt:latest\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/alvarobartt-investpy] user=0 workdir=\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v1\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.7]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests] \u2b50 Run Main actions/checkout@v2\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \u2705  Success - Main actions/checkout@v2\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests] \u2b50 Run Main Set up Python 3.7 on ubuntu-latest\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/2bed37cd-ad9a-4929-9bb6-3057fd16fdb3/act/actions-setup-python@v1/ dst=/var/run/act/actions/actions-setup-python@v1/\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v1/] user=0 workdir=\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v1/dist/index.js] user= workdir=\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::isExplicit: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::explicit? false\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::explicit? true\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::explicit? true\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::explicit? true\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::explicit? true\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::explicit? true\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::explicit? true\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::evaluating 6 versions\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::matched: 3.7.11\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Successfully setup CPython (3.7.11)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \u2753 add-matcher /run/act/actions/actions-setup-python@v1/.github/python.json\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \u2705  Success - Main Set up Python 3.7 on ubuntu-latest\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \u2699  ::set-output:: python-version=3.7.11\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests] \u2b50 Run Main Upgrade pip and install requirements\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting pip\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Installing collected packages: pip\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Attempting uninstall: pip\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     Found existing installation: pip 21.2.4\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     Uninstalling pip-21.2.4:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |       Successfully uninstalled pip-21.2.4\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Successfully installed pip-23.1.2\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Processing /tmp/558156d8-17ed-11ee-8a50-bb14de238602/alvarobartt-investpy\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Installing build dependencies: started\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Installing build dependencies: finished with status 'done'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Getting requirements to build wheel: started\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Getting requirements to build wheel: finished with status 'done'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Preparing metadata (pyproject.toml): started\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting Unidecode>=1.1.1 (from investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading Unidecode-1.3.6-py3-none-any.whl (235 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 235.9/235.9 kB 1.6 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: setuptools>=41.2.0 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from investpy==1.0.8) (47.1.0)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting numpy>=1.17.2 (from investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading numpy-1.21.6-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (15.7 MB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 15.7/15.7 MB 28.4 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting pandas>=0.25.1 (from investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading pandas-1.3.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.3 MB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 11.3/11.3 MB 12.2 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting lxml>=4.4.1 (from investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading lxml-4.9.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (6.6 MB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 6.6/6.6 MB 22.3 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting requests>=2.22.0 (from investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 7.0 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting pytz>=2019.3 (from investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 502.3/502.3 kB 13.3 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting python-dateutil>=2.7.3 (from pandas>=0.25.1->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 247.7/247.7 kB 5.9 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting charset-normalizer<4,>=2 (from requests>=2.22.0->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 171.0/171.0 kB 20.5 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting idna<4,>=2.5 (from requests>=2.22.0->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 904.3 kB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting urllib3<3,>=1.21.1 (from requests>=2.22.0->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 4.4 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting certifi>=2017.4.17 (from requests>=2.22.0->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 3.1 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting six>=1.5 (from python-dateutil>=2.7.3->pandas>=0.25.1->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Building wheels for collected packages: investpy\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Building wheel for investpy (pyproject.toml): started\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Building wheel for investpy (pyproject.toml): finished with status 'done'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Created wheel for investpy: filename=investpy-1.0.8-py3-none-any.whl size=4487791 sha256=ef7c1db2ccde818fb2b117a5372c7029e42037fcf62d33af580c765729293d86\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/9f/1b/09/aa3325b14fa2d47f5803cda44fd3fc60a5d8c36d84a29fdf95\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Successfully built investpy\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Installing collected packages: pytz, urllib3, Unidecode, six, numpy, lxml, idna, charset-normalizer, certifi, requests, python-dateutil, pandas, investpy\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Successfully installed Unidecode-1.3.6 certifi-2023.5.7 charset-normalizer-3.1.0 idna-3.4 investpy-1.0.8 lxml-4.9.2 numpy-1.21.6 pandas-1.3.5 python-dateutil-2.8.2 pytz-2023.3 requests-2.31.0 six-1.16.0 urllib3-2.0.3\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | [notice] To update, run: pip install --upgrade pip\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Processing /tmp/558156d8-17ed-11ee-8a50-bb14de238602/alvarobartt-investpy\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Installing build dependencies: started\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Installing build dependencies: finished with status 'done'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Getting requirements to build wheel: started\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Getting requirements to build wheel: finished with status 'done'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Preparing metadata (pyproject.toml): started\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: Unidecode>=1.1.1 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from investpy==1.0.8) (1.3.6)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: setuptools>=41.2.0 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from investpy==1.0.8) (47.1.0)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: numpy>=1.17.2 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from investpy==1.0.8) (1.21.6)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: pandas>=0.25.1 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from investpy==1.0.8) (1.3.5)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: lxml>=4.4.1 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from investpy==1.0.8) (4.9.2)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: requests>=2.22.0 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from investpy==1.0.8) (2.31.0)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: pytz>=2019.3 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from investpy==1.0.8) (2023.3)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting pytest==6.2.5 (from investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading pytest-6.2.5-py3-none-any.whl (280 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 280.7/280.7 kB 9.1 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting attrs>=19.2.0 (from pytest==6.2.5->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.2/61.2 kB 1.4 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting iniconfig (from pytest==6.2.5->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting packaging (from pytest==6.2.5->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 294.5 kB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting pluggy<2.0,>=0.12 (from pytest==6.2.5->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting py>=1.8.2 (from pytest==6.2.5->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 98.7/98.7 kB 6.5 MB/s eta 0:00:00\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting toml (from pytest==6.2.5->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading toml-0.10.2-py2.py3-none-any.whl (16 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting importlib-metadata>=0.12 (from pytest==6.2.5->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: python-dateutil>=2.7.3 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from pandas>=0.25.1->investpy==1.0.8) (2.8.2)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: charset-normalizer<4,>=2 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests>=2.22.0->investpy==1.0.8) (3.1.0)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: idna<4,>=2.5 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests>=2.22.0->investpy==1.0.8) (3.4)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests>=2.22.0->investpy==1.0.8) (2.0.3)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: certifi>=2017.4.17 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests>=2.22.0->investpy==1.0.8) (2023.5.7)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting zipp>=0.5 (from importlib-metadata>=0.12->pytest==6.2.5->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Collecting typing-extensions>=3.6.4 (from importlib-metadata>=0.12->pytest==6.2.5->investpy==1.0.8)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Requirement already satisfied: six>=1.5 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from python-dateutil>=2.7.3->pandas>=0.25.1->investpy==1.0.8) (1.16.0)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Building wheels for collected packages: investpy\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Building wheel for investpy (pyproject.toml): started\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Building wheel for investpy (pyproject.toml): finished with status 'done'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Created wheel for investpy: filename=investpy-1.0.8-py3-none-any.whl size=4487791 sha256=606d81469be7e005fd1e210bc49b81b1df8336072770a2f63566757740c6d106\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/9f/1b/09/aa3325b14fa2d47f5803cda44fd3fc60a5d8c36d84a29fdf95\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Successfully built investpy\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Installing collected packages: zipp, typing-extensions, toml, py, packaging, iniconfig, importlib-metadata, pluggy, investpy, attrs, pytest\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   Attempting uninstall: investpy\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     Found existing installation: investpy 1.0.8\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     Uninstalling investpy-1.0.8:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |       Successfully uninstalled investpy-1.0.8\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | Successfully installed attrs-23.1.0 importlib-metadata-6.7.0 iniconfig-2.0.0 investpy-1.0.8 packaging-23.1 pluggy-1.2.0 py-1.11.0 pytest-6.2.5 toml-0.10.2 typing-extensions-4.7.0 zipp-3.15.0\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | [notice] To update, run: pip install --upgrade pip\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \u2705  Success - Main Upgrade pip and install requirements\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests] \u2b50 Run Main Run pytest tests\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | ============================= test session starts ==============================\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | platform linux -- Python 3.7.11, pytest-6.2.5, py-1.11.0, pluggy-1.2.0\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/alvarobartt-investpy\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | collected 25 items\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py .FFFFFFFFFF.F                                     [ 52%]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy_errors.py ............                               [100%]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | =================================== FAILURES ===================================\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _____________________________ test_investpy_stocks _____________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_stocks():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that stock data retrieval functions listed in investpy work properly.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_stocks(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_stocks_list(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_stocks_dict(country=param['country'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                      columns=param['columns'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                      as_json=param['as_json'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         investpy.get_stock_countries()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_stock_recent_data(stock='BBVA',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                            country='spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                            as_json=param['as_json'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                            order=param['order'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                          interval='Daily')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:95: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | stock = 'bbva', country = 'spain', as_json = True, order = 'ascending'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | interval = 'daily'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def get_stock_recent_data(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         stock, country, as_json=False, order=\"ascending\", interval=\"Daily\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     ):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function retrieves recent historical data from the introduced stock from Investing.com. So on, the recent data\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         of the introduced stock from the specified country will be retrieved and returned as a :obj:`pandas.DataFrame` if\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         the parameters are valid and the request to Investing.com succeeds. Note that additionally some optional parameters\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         can be specified: as_json and order, which let the user decide if the data is going to be returned as a\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         :obj:`json` or not, and if the historical data is going to be ordered ascending or descending (where the index is the\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         date), respectively.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             stock (:obj:`str`): symbol of the stock to retrieve recent historical data from.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             country (:obj:`str`): name of the country from where the stock is.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             as_json (:obj:`bool`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 to determine the format of the output data, either a :obj:`pandas.DataFrame` if False and a :obj:`json` if True.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             order (:obj:`str`, optional): to define the order of the retrieved data which can either be ascending or descending.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             interval (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 value to define the historical data interval to retrieve, by default `Daily`, but it can also be `Weekly` or `Monthly`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`pandas.DataFrame` or :obj:`json`:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The function can return either a :obj:`pandas.DataFrame` or a :obj:`json` object, containing the retrieved\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 recent data of the specified stock from the specified country. So on, the resulting dataframe contains the\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 open, high, low, close and volume values for the selected stock on market days and the currency in which those\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 values are presented.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The resulting recent data, in case that the default parameters were applied, will look like::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     Date || Open | High | Low | Close | Volume | Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     -----||------|------|-----|-------|--------|----------\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     xxxx || xxxx | xxxx | xxx | xxxxx | xxxxxx | xxxxxxxx\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 but in case that as_json parameter was defined as True, then the output will be::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         name: name,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         recent: [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 date: 'dd/mm/yyyy',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 open: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 high: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 low: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 close: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 volume: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 currency: x\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             ...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: raised whenever any of the introduced arguments is not valid or errored.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IOError: raised if stocks object/file was not found or unable to retrieve.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             RuntimeError: raised if the introduced stock/country was not found or did not match any of the existing ones.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: raised if connection to Investing.com could not be established.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IndexError: raised if stock recent data was unavailable or not found in Investing.com.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Examples:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data = investpy.get_stock_recent_data(stock='bbva', country='spain')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data.head()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                          Open   High    Low  Close    Volume Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             Date\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-13  4.263  4.395  4.230  4.353  27250000      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-14  4.322  4.325  4.215  4.244  36890000      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-15  4.281  4.298  4.187  4.234  21340000      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-16  4.234  4.375  4.208  4.365  46080000      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-19  4.396  4.425  4.269  4.269  18950000      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not stock:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0013: stock parameter is mandatory and must be a valid stock symbol.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(stock, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0027: stock argument needs to be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0039: country can not be None, it should be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is not None and not isinstance(country, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0025: specified country value not valid.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(as_json, bool):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0002: as_json argument can just be True or False, bool type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if order not in [\"ascending\", \"asc\", \"descending\", \"desc\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0003: order argument can just be ascending (asc) or descending (desc),\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" str type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(interval, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         interval = interval.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if interval not in [\"daily\", \"weekly\", \"monthly\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_package = \"investpy\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_path = \"/\".join(((\"resources\", \"stocks.csv\")))\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if pkg_resources.resource_exists(resource_package, resource_path):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             stocks = pd.read_csv(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 pkg_resources.resource_filename(resource_package, resource_path),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 keep_default_na=False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise FileNotFoundError(\"ERR#0056: stocks file not found or errored.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if stocks is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise IOError(\"ERR#0001: stocks object not found or unable to retrieve.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         country = unidecode(country.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country not in get_stock_countries():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0034: country \"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + country.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         stocks = stocks[stocks[\"country\"] == country]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         stock = unidecode(stock.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if stock not in list(stocks[\"symbol\"].apply(unidecode).str.lower()):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0018: stock \" + stock + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         symbol = stocks.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (stocks[\"symbol\"].apply(unidecode).str.lower() == stock).idxmax(), \"symbol\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         id_ = stocks.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (stocks[\"symbol\"].apply(unidecode).str.lower() == stock).idxmax(), \"id\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         name = stocks.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (stocks[\"symbol\"].apply(unidecode).str.lower() == stock).idxmax(), \"name\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         stock_currency = stocks.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (stocks[\"symbol\"].apply(unidecode).str.lower() == stock).idxmax(), \"currency\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         header = symbol + \" Historical Data\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"curr_id\": id_,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"smlID\": str(randint(1000000, 99999999)),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"header\": header,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"interval_sec\": interval.capitalize(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_col\": \"date\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_ord\": \"DESC\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"action\": \"historical_data\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         head = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/instruments/HistoricalDataAjax\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         req = requests.post(url, headers=head, data=params)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >               \"ERR#0015: error \" + str(req.status_code) + \", try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E           ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/stocks.py:334: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _____________________________ test_investpy_funds ______________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_funds():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that fund data retrieval functions listed in investpy work properly.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_funds(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_funds_list(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_funds_dict(country=param['country'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                     columns=param['columns'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                     as_json=param['as_json'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         investpy.get_fund_countries()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_fund_recent_data(fund='bbva multiactivo conservador pp',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                           country='spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                           as_json=param['as_json'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                           order=param['order'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                         interval='Daily')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:293: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | fund = 'bbva multiactivo conservador pp', country = 'spain', as_json = True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | order = 'ascending', interval = 'daily'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def get_fund_recent_data(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         fund, country, as_json=False, order=\"ascending\", interval=\"Daily\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     ):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function retrieves recent historical data from the introduced `fund` from Investing\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         via Web Scraping. The resulting data can it either be stored in a :obj:`pandas.DataFrame` or in a\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         :obj:`json` file, with `ascending` or `descending` order.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             fund (:obj:`str`): name of the fund to retrieve recent historical data from.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             country (:obj:`str`): name of the country from where the introduced fund is.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             as_json (:obj:`bool`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 optional argument to determine the format of the output data (:obj:`pandas.DataFrame` or :obj:`json`).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             order (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 optional argument to define the order of the retrieved data (`ascending`, `asc` or `descending`, `desc`).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             interval (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 value to define the historical data interval to retrieve, by default `Daily`, but it can also be `Weekly` or `Monthly`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`pandas.DataFrame` or :obj:`json`:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The function returns a either a :obj:`pandas.DataFrame` or a :obj:`json` file containing the retrieved\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 recent data from the specified fund via argument. The dataset contains the open, high, low and close\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 values for the selected fund on market days.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The returned data is case we use default arguments will look like::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     Date || Open | High | Low | Close | Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     -----||------|------|-----|-------|----------\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     xxxx || xxxx | xxxx | xxx | xxxxx | xxxxxxxx\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 but if we define `as_json=True`, then the output will be::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         name: name,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         recent: [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 date: dd/mm/yyyy,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 open: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 high: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 low: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 close: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 currency: x\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             ...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: argument error.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IOError: funds object/file not found or unable to retrieve.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             RuntimeError: introduced fund does not match any of the indexed ones.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: if GET requests does not return 200 status code.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IndexError: if fund information was unavailable or not found.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Examples:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data = investpy.get_fund_recent_data(fund='bbva multiactivo conservador pp', country='spain')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data.head()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                          Open   High    Low  Close Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             Date\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-13  1.110  1.110  1.110  1.110      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-16  1.109  1.109  1.109  1.109      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-19  1.114  1.114  1.114  1.114      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-20  1.112  1.112  1.112  1.112      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-21  1.115  1.115  1.115  1.115      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not fund:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0029: fund parameter is mandatory and must be a valid fund name.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(fund, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0028: fund argument needs to be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0039: country can not be None, it should be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is not None and not isinstance(country, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0025: specified country value not valid.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(as_json, bool):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0002: as_json argument can just be True or False, bool type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if order not in [\"ascending\", \"asc\", \"descending\", \"desc\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0003: order argument can just be ascending (asc) or descending (desc),\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" str type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(interval, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         interval = interval.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if interval not in [\"daily\", \"weekly\", \"monthly\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_package = \"investpy\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_path = \"/\".join((\"resources\", \"funds.csv\"))\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if pkg_resources.resource_exists(resource_package, resource_path):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             funds = pd.read_csv(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 pkg_resources.resource_filename(resource_package, resource_path),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 keep_default_na=False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise FileNotFoundError(\"ERR#0057: funds file not found or errored.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if funds is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise IOError(\"ERR#0005: funds object not found or unable to retrieve.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         country = unidecode(country.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country not in get_fund_countries():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0034: country \" + country + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         funds = funds[funds[\"country\"].str.lower() == country]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         fund = unidecode(fund.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if fund not in list(funds[\"name\"].apply(unidecode).str.lower()):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0019: fund \" + fund + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         symbol = funds.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (funds[\"name\"].apply(unidecode).str.lower() == fund).idxmax(), \"symbol\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         id_ = funds.loc[(funds[\"name\"].apply(unidecode).str.lower() == fund).idxmax(), \"id\"]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         name = funds.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (funds[\"name\"].apply(unidecode).str.lower() == fund).idxmax(), \"name\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         fund_currency = funds.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (funds[\"name\"].apply(unidecode).str.lower() == fund).idxmax(), \"currency\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         header = symbol + \" Historical Data\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"curr_id\": id_,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"smlID\": str(randint(1000000, 99999999)),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"header\": header,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"interval_sec\": interval.capitalize(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_col\": \"date\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_ord\": \"DESC\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"action\": \"historical_data\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         head = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/instruments/HistoricalDataAjax\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         req = requests.post(url, headers=head, data=params)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >               \"ERR#0015: error \" + str(req.status_code) + \", try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E           ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/funds.py:327: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | ______________________________ test_investpy_etfs ______________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_etfs():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that etf data retrieval functions listed in investpy work properly.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_etfs(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_etfs_list(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_etfs_dict(country=param['country'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                    columns=param['columns'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                    as_json=param['as_json'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         investpy.get_etf_countries()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_etf_recent_data(etf='bbva accion dj eurostoxx 50',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                          country='spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                          as_json=param['as_json'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                          order=param['order'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                        interval='Daily')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:427: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | etf = 'bbva accion dj eurostoxx 50', country = 'spain', stock_exchange = None\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | as_json = True, order = 'ascending', interval = 'daily'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def get_etf_recent_data(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         etf,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         country,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         stock_exchange=None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         as_json=False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         order=\"ascending\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         interval=\"Daily\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     ):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function retrieves recent historical data from the introduced `etf` from Investing\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         via Web Scraping. The resulting data can it either be stored in a :obj:`pandas.DataFrame` or in a\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         :obj:`json` file, with `ascending` or `descending` order.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             etf (:obj:`str`): name of the etf to retrieve recent historical data from.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             country (:obj:`str`): name of the country from where the etf is.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             as_json (:obj:`bool`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 optional argument to determine the format of the output data (:obj:`pandas.DataFrame` or :obj:`json`).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             order (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 optional argument to define the order of the retrieved data (`ascending`, `asc` or `descending`, `desc`).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             interval (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 value to define the historical data interval to retrieve, by default `Daily`, but it can also be `Weekly` or `Monthly`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`pandas.DataFrame` or :obj:`json`:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The function returns either a :obj:`pandas.DataFrame` or a :obj:`json` file containing the retrieved\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 recent data from the specified etf via argument. The dataset contains the open, high, low and close\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 values for the selected etf on market days.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The returned data is case we use default arguments will look like::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     Date || Open | High | Low | Close | Volume | Currency | Exchange\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     -----||------|------|-----|-------|--------|----------|---------\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     xxxx || xxxx | xxxx | xxx | xxxxx | xxxxxx | xxxxxxxx | xxxxxxxx\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 but if we define `as_json=True`, then the output will be::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         name: name,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         recent: [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 date: dd/mm/yyyy,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 open: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 high: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 low: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 close: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 volume: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 currency: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 exchange: x\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             ...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: raised whenever any of the arguments is not valid or errored.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IOError: raised if etfs object/file not found or unable to retrieve.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             RuntimeError:raised if the introduced etf does not match any of the indexed ones.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: raised if GET requests does not return 200 status code.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IndexError: raised if etf information was unavailable or not found.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Examples:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data = investpy.get_etf_recent_data(etf='bbva accion dj eurostoxx 50', country='spain')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data.head()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                           Open    High    Low   Close  Volume Currency Exchange\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             Date\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2020-04-09  28.890  29.155  28.40  28.945   20651      EUR   Madrid\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2020-04-14  29.345  30.235  28.94  29.280   14709      EUR   Madrid\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2020-04-15  29.125  29.125  28.11  28.130   14344      EUR   Madrid\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2020-04-16  28.505  28.590  28.08  28.225   17662      EUR   Madrid\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2020-04-17  29.000  29.325  28.80  28.895   19578      EUR   Madrid\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not etf:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0031: etf parameter is mandatory and must be a valid etf name.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(etf, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0030: etf argument needs to be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0039: country can not be None, it should be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is not None and not isinstance(country, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0025: specified country value not valid.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if stock_exchange is not None and not isinstance(stock_exchange, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0125: specified stock_exchange value is not valid, it should be a str.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(as_json, bool):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0002: as_json argument can just be True or False, bool type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if order not in [\"ascending\", \"asc\", \"descending\", \"desc\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0003: order argument can just be ascending (asc) or descending (desc),\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" str type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(interval, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         interval = interval.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if interval not in [\"daily\", \"weekly\", \"monthly\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_package = \"investpy\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_path = \"/\".join((\"resources\", \"etfs.csv\"))\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if pkg_resources.resource_exists(resource_package, resource_path):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             etfs = pd.read_csv(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 pkg_resources.resource_filename(resource_package, resource_path),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 keep_default_na=False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise FileNotFoundError(\"ERR#0058: etfs file not found or errored.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if etfs is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise IOError(\"ERR#0009: etfs object not found or unable to retrieve.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         country = unidecode(country.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country not in get_etf_countries():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0034: country \" + country + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         etf = unidecode(etf.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         def_exchange = etfs.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 (etfs[\"name\"].apply(unidecode).str.lower() == etf)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 & (etfs[\"def_stock_exchange\"] == True)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ).idxmax()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         etfs = etfs[etfs[\"country\"].str.lower() == country]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if etf not in list(etfs[\"name\"].apply(unidecode).str.lower()):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0019: etf \" + etf + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         etfs = etfs[etfs[\"name\"].apply(unidecode).str.lower() == etf]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if def_exchange[\"country\"] != country:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             warnings.warn(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"Selected country does not contain the default stock exchange of the\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" introduced ETF. \"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + 'Default country is: \"'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + def_exchange[\"country\"]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + '\" and default stock_exchange: \"'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + def_exchange[\"stock_exchange\"]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + '\".',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 Warning,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             if stock_exchange:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 if stock_exchange.lower() not in etfs[\"stock_exchange\"].str.lower():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \"ERR#0126: introduced stock_exchange value does not exists, leave\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \" this parameter to None to use default stock_exchange.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 etf_exchange = etfs.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     (etfs[\"stock_exchange\"].str.lower() == stock_exchange.lower()).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \"stock_exchange\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 found_etfs = etfs[etfs[\"name\"].apply(unidecode).str.lower() == etf]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 if len(found_etfs) > 1:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     warnings.warn(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \"Note that the displayed information can differ depending on the\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \" stock exchange. Available stock_exchange\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         + ' values for \"'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         + country\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         + '\" are: \"'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         + '\", \"'.join(found_etfs[\"stock_exchange\"])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         + '\".',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         Warning,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 del found_etfs\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 etf_exchange = etfs.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     (etfs[\"name\"].apply(unidecode).str.lower() == etf).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \"stock_exchange\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             if stock_exchange:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 if stock_exchange.lower() not in etfs[\"stock_exchange\"].str.lower():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \"ERR#0126: introduced stock_exchange value does not exists, leave\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \" this parameter to None to use default stock_exchange.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 if def_exchange[\"stock_exchange\"].lower() != stock_exchange.lower():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     warnings.warn(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \"Selected stock_exchange is not the default one of the introduced\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \" ETF. \"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         + 'Default country is: \"'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         + def_exchange[\"country\"]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         + '\" and default stock_exchange: \"'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         + def_exchange[\"stock_exchange\"].lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         + '\".',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         Warning,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 etf_exchange = etfs.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     (etfs[\"stock_exchange\"].str.lower() == stock_exchange.lower()).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \"stock_exchange\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 etf_exchange = def_exchange[\"stock_exchange\"]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         symbol = etfs.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 (etfs[\"name\"].apply(unidecode).str.lower() == etf)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 & (etfs[\"stock_exchange\"].str.lower() == etf_exchange.lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"symbol\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         id_ = etfs.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 (etfs[\"name\"].apply(unidecode).str.lower() == etf)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 & (etfs[\"stock_exchange\"].str.lower() == etf_exchange.lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"id\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         name = etfs.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 (etfs[\"name\"].apply(unidecode).str.lower() == etf)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 & (etfs[\"stock_exchange\"].str.lower() == etf_exchange.lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"name\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         etf_currency = etfs.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 (etfs[\"name\"].apply(unidecode).str.lower() == etf)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 & (etfs[\"stock_exchange\"].str.lower() == etf_exchange.lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"currency\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         header = symbol + \" Historical Data\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         head = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"curr_id\": id_,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"smlID\": str(randint(1000000, 99999999)),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"header\": header,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"interval_sec\": interval.capitalize(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_col\": \"date\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_ord\": \"DESC\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"action\": \"historical_data\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/instruments/HistoricalDataAjax\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         req = requests.post(url, headers=head, data=params)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >               \"ERR#0015: error \" + str(req.status_code) + \", try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E           ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/etfs.py:450: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | ____________________________ test_investpy_indices _____________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_indices():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that index data retrieval functions listed in investpy work properly.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_indices(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_indices_list(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name', 'currency'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name', 'currency'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name', 'currency'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name', 'currency'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_indices_dict(country=param['country'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                       columns=param['columns'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                       as_json=param['as_json'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         investpy.get_index_countries()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_index_recent_data(index='ibex 35',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                            country='spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                            as_json=param['as_json'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                            order=param['order'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                          interval='Daily')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:549: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | index = 'ibex 35', country = 'spain', as_json = True, order = 'ascending'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | interval = 'daily'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def get_index_recent_data(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         index, country, as_json=False, order=\"ascending\", interval=\"Daily\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     ):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function retrieves recent historical data from the introduced `index` from Investing\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         via Web Scraping. The resulting data can it either be stored in a :obj:`pandas.DataFrame` or in a\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         :obj:`json` file, with `ascending` or `descending` order.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             index (:obj:`str`): name of the index to retrieve recent historical data from.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             country (:obj:`str`): name of the country from where the index is.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             as_json (:obj:`bool`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 optional argument to determine the format of the output data (:obj:`pandas.DataFrame` or :obj:`json`).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             order (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 optional argument to define the order of the retrieved data (`ascending`, `asc` or `descending`, `desc`).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             interval (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 value to define the historical data interval to retrieve, by default `Daily`, but it can also be `Weekly` or `Monthly`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`pandas.DataFrame` or :obj:`json`:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The function returns either a :obj:`pandas.DataFrame` or a :obj:`json` file containing the retrieved\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 recent data from the specified index via argument. The dataset contains the open, high, low, close and volume\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 values for the selected index on market days, additionally the currency value is returned.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The returned data is case we use default arguments will look like::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     Date || Open | High | Low | Close | Volume | Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     -----||------|------|-----|-------|--------|----------\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     xxxx || xxxx | xxxx | xxx | xxxxx | xxxxxx | xxxxxxxx\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 but if we define `as_json=True`, then the output will be::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         name: name,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         recent: [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 date: dd/mm/yyyy,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 open: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 high: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 low: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 close: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 volume: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 currency: x\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             ...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: raised if there was an argument error.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IOError: raised if indices object/file was not found or unable to retrieve.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             RuntimeError: raised if the introduced index does not match any of the indexed ones.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: raised if GET requests does not return 200 status code.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IndexError: raised if index information was unavailable or not found.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Examples:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data = investpy.get_index_recent_data(index='ibex 35', country='spain')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data.head()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                            Open     High      Low    Close   Volume Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             Date\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-26  12604.7  12646.3  12510.4  12621.3  4770000      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-27  12618.3  12723.3  12593.6  12683.8  8230000      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-28  12657.2  12697.2  12585.1  12642.5  7300000      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-29  12637.2  12806.6  12633.8  12806.6  5650000      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-30  12767.6  12905.9  12756.9  12821.6  6040000      EUR\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not index:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0047: index param is mandatory and should be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(index, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0047: index param is mandatory and should be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0039: country can not be None, it should be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is not None and not isinstance(country, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0025: specified country value not valid.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(as_json, bool):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0002: as_json argument can just be True or False, bool type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if order not in [\"ascending\", \"asc\", \"descending\", \"desc\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0003: order argument can just be ascending (asc) or descending (desc),\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" str type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(interval, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         interval = interval.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if interval not in [\"daily\", \"weekly\", \"monthly\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_package = \"investpy\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_path = \"/\".join((\"resources\", \"indices.csv\"))\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if pkg_resources.resource_exists(resource_package, resource_path):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             indices = pd.read_csv(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 pkg_resources.resource_filename(resource_package, resource_path),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 keep_default_na=False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise FileNotFoundError(\"ERR#0059: indices file not found or errored.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if indices is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise IOError(\"ERR#0037: indices not found or unable to retrieve.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         country = unidecode(country.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country not in get_index_countries():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0034: country \" + country + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         indices = indices[indices[\"country\"] == country]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         index = unidecode(index.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if index not in list(indices[\"name\"].apply(unidecode).str.lower()):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0045: index \" + index + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         full_name = indices.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (indices[\"name\"].apply(unidecode).str.lower() == index).idxmax(), \"full_name\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         id_ = indices.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (indices[\"name\"].apply(unidecode).str.lower() == index).idxmax(), \"id\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         name = indices.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (indices[\"name\"].apply(unidecode).str.lower() == index).idxmax(), \"name\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         index_currency = indices.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (indices[\"name\"].apply(unidecode).str.lower() == index).idxmax(), \"currency\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         header = full_name + \" Historical Data\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"curr_id\": id_,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"smlID\": str(randint(1000000, 99999999)),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"header\": header,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"interval_sec\": interval.capitalize(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_col\": \"date\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_ord\": \"DESC\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"action\": \"historical_data\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         head = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/instruments/HistoricalDataAjax\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         req = requests.post(url, headers=head, data=params)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >               \"ERR#0015: error \" + str(req.status_code) + \", try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E           ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/indices.py:329: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | ________________________ test_investpy_currency_crosses ________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_currency_crosses():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that currency cross data retrieval functions listed in investpy work properly.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': 'EUR',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': 'EUR',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': 'EUR',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': 'USD',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_currency_crosses(base=param['base'], second=param['second'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_currency_crosses_list(base=param['base'], second=param['second'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': 'EUR',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': 'EUR',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': 'USD',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': 'USD',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': 'EUR',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': 'USD',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': 'EUR',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': 'USD',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'base': 'EUR',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'second': 'USD',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name', 'full_name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_currency_crosses_dict(base=param['base'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                second=param['second'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                columns=param['columns'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                as_json=param['as_json'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         investpy.get_available_currencies()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'currency_cross': 'EUR/USD',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'from_date': '01/01/2018',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'to_date': '01/01/2019',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'currency_cross': 'EUR/USD',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'from_date': '01/01/1990',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'to_date': '01/01/2019',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'currency_cross': 'XAG/USD',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'from_date': '01/01/2010',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'to_date': '01/01/2015',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'currency_cross': 'XAU/USD',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'from_date': '01/01/2010',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'to_date': '01/01/2015',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_currency_cross_recent_data(currency_cross=param['currency_cross'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                     as_json=param['as_json'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                     order=param['order'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                                   interval='Daily')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:722: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | currency_cross = 'eur/usd', as_json = True, order = 'ascending'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | interval = 'daily'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def get_currency_cross_recent_data(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         currency_cross, as_json=False, order=\"ascending\", interval=\"Daily\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     ):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function retrieves recent historical data from the introduced `currency_cross` as indexed in Investing.com\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         via Web Scraping. The resulting data can it either be stored in a :obj:`pandas.DataFrame` or in a\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         :obj:`json` file, with `ascending` or `descending` order.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             currency_cross (:obj:`str`): name of the currency_cross to retrieve recent historical data from.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             as_json (:obj:`bool`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 optional argument to determine the format of the output data (:obj:`pandas.DataFrame` or :obj:`json`).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             order (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 optional argument to define the order of the retrieved data (`ascending`, `asc` or `descending`, `desc`).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             interval (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 value to define the historical data interval to retrieve, by default `Daily`, but it can also be `Weekly` or `Monthly`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`pandas.DataFrame` or :obj:`json`:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The function returns a either a :obj:`pandas.DataFrame` or a :obj:`json` file containing the retrieved\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 recent data from the specified currency_cross via argument. The dataset contains the open, high, low, close,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 volume and currency values for the selected currency_cross on market days.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The return data is in case we use default arguments will look like::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     Date || Open | High | Low | Close | Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     -----||------|------|-----|-------|---------\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     xxxx || xxxx | xxxx | xxx | xxxxx | xxxxxxxx\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 but if we define `as_json=True`, then the output will be::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         name: name,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         recent: [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             dd/mm/yyyy: {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 'open': x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 'high': x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 'low': x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 'close': x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 'currency' : x\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             ...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: raised if any of the introduced arguments was not valid or errored.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IOError: raised if currency_crosses object/file not found or unable to retrieve.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             RuntimeError: raised introduced currency_cross does not match any of the indexed ones.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: raised if GET request did not return 200 status code.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IndexError: raised if currency_cross information was unavailable or not found.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Examples:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data = investpy.get_currency_cross_recent_data(currency_cross='EUR/USD')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data.head()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                           Open    High     Low   Close Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             Date\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-27  1.1101  1.1116  1.1084  1.1091      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-28  1.1090  1.1099  1.1072  1.1078      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-29  1.1078  1.1093  1.1042  1.1057      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-08-30  1.1058  1.1062  1.0963  1.0991      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-09-02  1.0990  1.1000  1.0958  1.0968      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not currency_cross:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0052: currency_cross param is mandatory and should be a str.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(currency_cross, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0052: currency_cross param is mandatory and should be a str.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(as_json, bool):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0002: as_json argument can just be True or False, bool type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if order not in [\"ascending\", \"asc\", \"descending\", \"desc\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0003: order argument can just be ascending (asc) or descending (desc),\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" str type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(interval, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         interval = interval.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if interval not in [\"daily\", \"weekly\", \"monthly\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_package = \"investpy\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_path = \"/\".join((\"resources\", \"currency_crosses.csv\"))\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if pkg_resources.resource_exists(resource_package, resource_path):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             currency_crosses = pd.read_csv(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 pkg_resources.resource_filename(resource_package, resource_path),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 keep_default_na=False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise FileNotFoundError(\"ERR#0060: currency_crosses file not found or errored.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if currency_crosses is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise IOError(\"ERR#0050: currency_crosses not found or unable to retrieve.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         currency_cross = unidecode(currency_cross.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if currency_cross not in list(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             currency_crosses[\"name\"].apply(unidecode).str.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0054: the introduced currency_cross \"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + str(currency_cross)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + \" does not exist.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         id_ = currency_crosses.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 currency_crosses[\"name\"].apply(unidecode).str.lower() == currency_cross\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"id\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         name = currency_crosses.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 currency_crosses[\"name\"].apply(unidecode).str.lower() == currency_cross\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"name\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         currency = currency_crosses.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 currency_crosses[\"name\"].apply(unidecode).str.lower() == currency_cross\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"second\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         header = name + \" Historical Data\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"curr_id\": id_,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"smlID\": str(randint(1000000, 99999999)),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"header\": header,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"interval_sec\": interval.capitalize(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_col\": \"date\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_ord\": \"DESC\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"action\": \"historical_data\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         head = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/instruments/HistoricalDataAjax\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         req = requests.post(url, headers=head, data=params)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >               \"ERR#0015: error \" + str(req.status_code) + \", try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E           ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/currency_crosses.py:362: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _____________________________ test_investpy_bonds ______________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_bonds():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that bond data retrieval functions listed in investpy work properly.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_bonds(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_bonds_list(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_bonds_dict(country=param['country'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                     columns=param['columns'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                     as_json=param['as_json'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         investpy.get_bond_countries()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_bond_recent_data(bond='Spain 30Y',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                           as_json=param['as_json'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                           order=param['order'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                         interval='Daily')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:848: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | bond = 'spain 30y', as_json = True, order = 'ascending', interval = 'daily'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def get_bond_recent_data(bond, as_json=False, order=\"ascending\", interval=\"Daily\"):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function retrieves recent historical data from the introduced bond from Investing.com. So on, the recent data\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         of the introduced bond will be retrieved and returned as a :obj:`pandas.DataFrame` if the parameters are valid and\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         the request to Investing.com succeeds. Note that additionally some optional parameters can be specified: as_json\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         and order, which let the user decide if the data is going to be returned as a :obj:`json` or not, and if the recent\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         data is going to be ordered ascending or descending (where the index is the date), respectively.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             bond (:obj:`str`): name of the bond to retrieve recent historical data from.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             as_json (:obj:`bool`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 to determine the format of the output data, either a :obj:`pandas.DataFrame` if False and a :obj:`json` if True.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             order (:obj:`str`, optional): to define the order of the retrieved data which can either be ascending or descending.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             interval (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 value to define the historical data interval to retrieve, by default `Daily`, but it can also be `Weekly` or `Monthly`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`pandas.DataFrame` or :obj:`json`:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The function can return either a :obj:`pandas.DataFrame` or a :obj:`json` object, containing the retrieved\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 recent data of the specified bond. So on, the resulting dataframe contains the open, high, low and close\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 values for the selected bond on market days.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The resulting recent data, in case that the default parameters were applied, will look like::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     Date || Open | High | Low | Close\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     -----||------|------|-----|-------\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     xxxx || xxxx | xxxx | xxx | xxxxx\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 but in case that as_json parameter was defined as True, then the output will be::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         name: name,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         recent: [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 date: 'dd/mm/yyyy',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 open: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 high: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 low: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 close: x\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             ...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: raised whenever any of the introduced arguments is not valid or errored.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IOError: raised if bonds object/file was not found or unable to retrieve.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             RuntimeError: raised if the introduced bond was not found or did not match any of the existing ones.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: raised if connection to Investing.com could not be established.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IndexError: raised if bond historical data was unavailable or not found in Investing.com.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Examples:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data = investpy.get_bond_recent_data(bond='Argentina 3Y')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data.head()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                           Open    High     Low   Close\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             Date\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-09-23  52.214  52.214  52.214  52.214\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-09-24  52.323  52.323  52.323  52.323\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-09-25  52.432  52.432  52.432  52.432\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-09-26  52.765  52.765  52.765  52.765\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-09-27  52.876  52.876  52.876  52.876\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not bond:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0066: bond parameter is mandatory and must be a valid bond name.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(bond, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0067: bond argument needs to be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(as_json, bool):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0002: as_json argument can just be True or False, bool type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if order not in [\"ascending\", \"asc\", \"descending\", \"desc\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0003: order argument can just be ascending (asc) or descending (desc),\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" str type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(interval, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         interval = interval.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if interval not in [\"daily\", \"weekly\", \"monthly\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_package = \"investpy\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_path = \"/\".join((\"resources\", \"bonds.csv\"))\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if pkg_resources.resource_exists(resource_package, resource_path):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             bonds = pd.read_csv(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 pkg_resources.resource_filename(resource_package, resource_path),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 keep_default_na=False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise FileNotFoundError(\"ERR#0064: bonds file not found or errored.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if bonds is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise IOError(\"ERR#0065: bonds object not found or unable to retrieve.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         bond = unidecode(bond.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if bond not in list(bonds[\"name\"].apply(unidecode).str.lower()):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0068: bond \" + bond + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         id_ = bonds.loc[(bonds[\"name\"].apply(unidecode).str.lower() == bond).idxmax(), \"id\"]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         name = bonds.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (bonds[\"name\"].apply(unidecode).str.lower() == bond).idxmax(), \"name\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         full_name = bonds.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (bonds[\"name\"].apply(unidecode).str.lower() == bond).idxmax(), \"full_name\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         header = full_name + \" Bond Yield Historical Data\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"curr_id\": id_,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"smlID\": str(randint(1000000, 99999999)),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"header\": header,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"interval_sec\": interval.capitalize(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_col\": \"date\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_ord\": \"DESC\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"action\": \"historical_data\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         head = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/instruments/HistoricalDataAjax\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         req = requests.post(url, headers=head, data=params)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >               \"ERR#0015: error \" + str(req.status_code) + \", try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E           ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/bonds.py:306: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | __________________________ test_investpy_commodities ___________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_commodities():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that commodity data retrieval functions listed in investpy work properly.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'group': 'metals',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'group': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_commodities(group=param['group'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_commodities_list(group=param['group'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'group': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['title', 'full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'group': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['title', 'full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'group': 'metals',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['title', 'full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'group': 'metals',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['title', 'full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'group': 'metals',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_commodities_dict(group=param['group'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                           columns=param['columns'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                           as_json=param['as_json'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         investpy.get_commodity_groups()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'united states',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'united states',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'united states',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_commodity_recent_data(commodity='copper',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                country=param['country'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                as_json=param['as_json'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                order=param['order'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                              interval='Daily')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:973: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | commodity = 'copper', country = None, as_json = True, order = 'ascending'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | interval = 'daily'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def get_commodity_recent_data(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         commodity, country=None, as_json=False, order=\"ascending\", interval=\"Daily\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     ):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function retrieves recent historical data from the introduced commodity from Investing.com, which will be\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         returned as a :obj:`pandas.DataFrame` if the parameters are valid and the request to Investing.com succeeds.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Note that additionally some optional parameters can be specified: as_json and order, which let the user decide\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if the data is going to be returned as a :obj:`json` or not, and if the historical data is going to be ordered\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ascending or descending (where the index is the date), respectively.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             commodity (:obj:`str`): name of the commodity to retrieve recent data from.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             country (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 name of the country to retrieve the commodity data from (if there is more than one country that\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 provides data from the same commodity).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             as_json (:obj:`bool`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 to determine the format of the output data, either a :obj:`pandas.DataFrame` if False and a :obj:`json` if True.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             order (:obj:`str`, optional): to define the order of the retrieved data which can either be ascending or descending.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             interval (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 value to define the historical data interval to retrieve, by default `Daily`, but it can also be `Weekly` or `Monthly`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`pandas.DataFrame` or :obj:`json`:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The function can return either a :obj:`pandas.DataFrame` or a :obj:`json` object, containing the retrieved\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 recent data of the specified commodity. So on, the resulting dataframe contains the open, high, low and close\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 values for the selected commodity on market days and the currency in which those values are presented.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The returned data is case we use default arguments will look like::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     Date || Open | High | Low | Close | Volume | Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     -----||------|------|-----|-------|--------|----------\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     xxxx || xxxx | xxxx | xxx | xxxxx | xxxxxx | xxxxxxxx\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 but in case that as_json parameter was defined as True, then the output will be::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         name: name,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         recent: [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 date: 'dd/mm/yyyy',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 open: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 high: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 low: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 close: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 volume: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 currency: x\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             ...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: raised whenever any of the introduced arguments is not valid or errored.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IOError: raised if commodities object/file was not found or unable to retrieve.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             RuntimeError: raised if the introduced commodity was not found or did not match any of the existing ones.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: raised if connection to Investing.com could not be established.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IndexError: raised if commodity recent data was unavailable or not found in Investing.com.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Examples:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data = investpy.get_commodity_recent_data(commodity='gold')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data.head()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                           Open    High     Low   Close  Volume Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             Date\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-10-25  1506.4  1520.9  1503.1  1505.3  368743      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-10-28  1507.4  1510.8  1492.3  1495.8  318126      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-10-29  1494.3  1497.1  1485.6  1490.7  291980      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-10-30  1490.5  1499.3  1483.1  1496.7  353638      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-10-31  1498.8  1516.7  1496.0  1514.8  390013      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not commodity:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0078: commodity parameter is mandatory and must be a valid commodity\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" name.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(commodity, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0078: commodity parameter is mandatory and must be a valid commodity\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" name.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is not None and not isinstance(country, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0025: specified country value not valid.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(as_json, bool):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0002: as_json argument can just be True or False, bool type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if order not in [\"ascending\", \"asc\", \"descending\", \"desc\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0003: order argument can just be ascending (asc) or descending (desc),\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" str type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(interval, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         interval = interval.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if interval not in [\"daily\", \"weekly\", \"monthly\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_package = \"investpy\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_path = \"/\".join((\"resources\", \"commodities.csv\"))\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if pkg_resources.resource_exists(resource_package, resource_path):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             commodities = pd.read_csv(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 pkg_resources.resource_filename(resource_package, resource_path),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 keep_default_na=False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise FileNotFoundError(\"ERR#0075: commodities file not found or errored.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if commodities is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise IOError(\"ERR#0076: commodities not found or unable to retrieve.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         commodity = unidecode(commodity.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if commodity not in list(commodities[\"name\"].apply(unidecode).str.lower()):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0079: commodity \" + commodity + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             found_commodities = commodities[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 commodities[\"name\"].apply(unidecode).str.lower() == commodity\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             if len(found_commodities) > 1:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 msg = (\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \"Note that the displayed commodity data can differ depending on the\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \" country. If you want to retrieve \"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     + commodity\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     + \" data from either \"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     + \" or \".join(found_commodities[\"country\"].tolist())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     + \", specify the country parameter.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 warnings.warn(msg, Warning)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             del found_commodities\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             country = unidecode(country.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             if country not in list(set(commodities[\"country\"].str.lower())):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \"ERR#0034: country \" + country + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             commodities = commodities[commodities[\"country\"] == country]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         full_name = commodities.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (commodities[\"name\"].apply(unidecode).str.lower() == commodity).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"full_name\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         id_ = commodities.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (commodities[\"name\"].apply(unidecode).str.lower() == commodity).idxmax(), \"id\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         name = commodities.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (commodities[\"name\"].apply(unidecode).str.lower() == commodity).idxmax(), \"name\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         currency = commodities.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (commodities[\"name\"].apply(unidecode).str.lower() == commodity).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"currency\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         header = full_name + \" Historical Data\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"curr_id\": id_,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"smlID\": str(randint(1000000, 99999999)),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"header\": header,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"interval_sec\": interval.capitalize(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_col\": \"date\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_ord\": \"DESC\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"action\": \"historical_data\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         head = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/instruments/HistoricalDataAjax\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         req = requests.post(url, headers=head, data=params)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >               \"ERR#0015: error \" + str(req.status_code) + \", try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E           ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/commodities.py:359: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | ____________________________ test_investpy_cryptos _____________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_cryptos():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that crypto currencies data retrieval functions listed in investpy work properly.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         investpy.get_cryptos()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         investpy.get_cryptos_list()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['name', 'symbol', 'currency'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_cryptos_dict(columns=param['columns'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                       as_json=param['as_json'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_crypto_recent_data(crypto='bitcoin',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                             as_json=param['as_json'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                             order=param['order'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                           interval='Daily')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:1068: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | crypto = 'bitcoin', as_json = True, order = 'ascending', interval = 'daily'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def get_crypto_recent_data(crypto, as_json=False, order=\"ascending\", interval=\"Daily\"):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function retrieves recent historical data from the introduced crypto from Investing.com. So on, the recent data\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         of the introduced crypto will be retrieved and returned as a :obj:`pandas.DataFrame` if the parameters are valid\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         and the request to Investing.com succeeds. Note that additionally some optional parameters can be specified: as_json\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         and order, which let the user decide if the data is going to be returned as a :obj:`json` or not, and if the historical\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         data is going to be ordered ascending or descending (where the index is the date), respectively.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             crypto (:obj:`str`): name of the crypto currency to retrieve data from.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             as_json (:obj:`bool`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 to determine the format of the output data, either a :obj:`pandas.DataFrame` if False and a :obj:`json` if True.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             order (:obj:`str`, optional): to define the order of the retrieved data which can either be ascending or descending.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             interval (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 value to define the historical data interval to retrieve, by default `Daily`, but it can also be `Weekly` or `Monthly`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`pandas.DataFrame` or :obj:`json`:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The function can return either a :obj:`pandas.DataFrame` or a :obj:`json` object, containing the retrieved\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 recent data of the specified crypto currency. So on, the resulting dataframe contains the open, high, low,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 close and volume values for the selected crypto on market days and the currency in which those values are presented.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The resulting recent data, in case that the default parameters were applied, will look like::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     Date || Open | High | Low | Close | Volume | Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     -----||------|------|-----|-------|--------|----------\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     xxxx || xxxx | xxxx | xxx | xxxxx | xxxxxx | xxxxxxxx\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 but in case that as_json parameter was defined as True, then the output will be::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         name: name,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         recent: [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 date: 'dd/mm/yyyy',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 open: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 high: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 low: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 close: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 volume: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 currency: x\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             ...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: raised whenever any of the introduced arguments is not valid or errored.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IOError: raised if cryptos object/file was not found or unable to retrieve.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             RuntimeError: raised if the introduced crypto name was not found or did not match any of the existing ones.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: raised if connection to Investing.com could not be established.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IndexError: raised if crypto recent data was unavailable or not found in Investing.com.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Examples:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data = investpy.get_crypto_recent_data(crypto='bitcoin')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data.head()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                           Open     High     Low   Close   Volume Currency\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             Date\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-10-25  7422.8   8697.7  7404.9  8658.3  1177632      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-10-26  8658.4  10540.0  8061.8  9230.6  1784005      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-10-27  9230.6   9773.2  9081.0  9529.6  1155038      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-10-28  9530.1   9866.9  9202.5  9207.2  1039295      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2019-10-29  9206.5   9531.3  9125.3  9411.3   918477      USD\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not crypto:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0083: crypto parameter is mandatory and must be a valid crypto name.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(crypto, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0084: crypto argument needs to be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(as_json, bool):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0002: as_json argument can just be True or False, bool type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if order not in [\"ascending\", \"asc\", \"descending\", \"desc\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0003: order argument can just be ascending (asc) or descending (desc),\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" str type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(interval, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         interval = interval.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if interval not in [\"daily\", \"weekly\", \"monthly\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_package = \"investpy\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_path = \"/\".join((\"resources\", \"cryptos.csv\"))\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if pkg_resources.resource_exists(resource_package, resource_path):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             cryptos = pd.read_csv(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 pkg_resources.resource_filename(resource_package, resource_path),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 keep_default_na=False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise FileNotFoundError(\"ERR#0081: cryptos file not found or errored.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if cryptos is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise IOError(\"ERR#0082: cryptos not found or unable to retrieve.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         crypto = unidecode(crypto.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if crypto not in list(cryptos[\"name\"].apply(unidecode).str.lower()):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0085: crypto currency: \"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + crypto\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + \", not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         status = cryptos.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (cryptos[\"name\"].apply(unidecode).str.lower() == crypto).idxmax(), \"status\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if status == \"unavailable\":\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0086: the selected crypto currency is not available for retrieval in\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" Investing.com.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         crypto_name = cryptos.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (cryptos[\"name\"].apply(unidecode).str.lower() == crypto).idxmax(), \"name\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         crypto_id = cryptos.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (cryptos[\"name\"].apply(unidecode).str.lower() == crypto).idxmax(), \"id\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         crypto_currency = cryptos.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (cryptos[\"name\"].apply(unidecode).str.lower() == crypto).idxmax(), \"currency\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         header = crypto_name + \" Historical Data\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"curr_id\": crypto_id,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"smlID\": str(randint(1000000, 99999999)),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"header\": header,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"interval_sec\": interval.capitalize(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_col\": \"date\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_ord\": \"DESC\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"action\": \"historical_data\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         head = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/instruments/HistoricalDataAjax\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         req = requests.post(url, headers=head, data=params)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >               \"ERR#0015: error \" + str(req.status_code) + \", try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E           ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/crypto.py:288: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | __________________________ test_investpy_certificates __________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_certificates():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that certificate data retrieval functions listed in investpy work properly.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'france',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_certificates(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_certificates_list(country=param['country'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'france',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'france',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': ['full_name', 'name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'france',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'columns': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_certificates_dict(country=param['country'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                            columns=param['columns'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                            as_json=param['as_json'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         investpy.get_certificate_countries()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'ascending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'as_json': False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'order': 'descending',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.get_certificate_recent_data(certificate='BNP Gold 31Dec99',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                  country='france',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                  as_json=param['as_json'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                                  order=param['order'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                                interval='Daily')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:1201: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | certificate = 'bnp gold 31dec99', country = 'france', as_json = True\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | order = 'ascending', interval = 'daily'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def get_certificate_recent_data(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         certificate, country, as_json=False, order=\"ascending\", interval=\"Daily\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     ):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function retrieves recent historical data from the introduced certificate from Investing.com. So on, the recent data\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         of the introduced certificate from the specified country will be retrieved and returned as a :obj:`pandas.DataFrame` if\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         the parameters are valid and the request to Investing.com succeeds. Note that additionally some optional parameters\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         can be specified: as_json and order, which let the user decide if the data is going to be returned as a\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         :obj:`json` or not, and if the historical data is going to be ordered ascending or descending (where the index is the\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         date), respectively.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             certificate (:obj:`str`): name of the certificate to retrieve recent data from.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             country (:obj:`str`): name of the country from where the certificate is.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             as_json (:obj:`bool`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 to determine the format of the output data, either a :obj:`pandas.DataFrame` if False and a :obj:`json` if True.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             order (:obj:`str`, optional): to define the order of the retrieved data which can either be ascending or descending.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             interval (:obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 value to define the historical data interval to retrieve, by default `Daily`, but it can also be `Weekly` or `Monthly`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`pandas.DataFrame` or :obj:`json`:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The function returns either a :obj:`pandas.DataFrame` or a :obj:`json` file containing the retrieved recent\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 data from the specified certificate via argument. The dataset contains the OHLC values of the certificate.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The returned data is case we use default arguments will look like::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     Date || Open | High | Low | Close\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     -----||------|------|-----|-------\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     xxxx || xxxx | xxxx | xxx | xxxxx\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 but if we define `as_json=True`, then the output will be::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         name: name,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         recent: [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 date: dd/mm/yyyy,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 open: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 high: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 low: x,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                 close: x\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                             ...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: raised if there was an argument error.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IOError: raised if certificates object/file was not found or unable to retrieve.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             RuntimeError: raised if the introduced certificate does not match any of the indexed ones.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: raised if GET requests does not return 200 status code.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             IndexError: raised if certificate information was unavailable or not found.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Examples:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data = investpy.get_certificate_recent_data(certificate='BNP Gold 31Dec99', country='france')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data.head()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                          Open   High     Low   Close\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             Date\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2020-07-09  146.4  146.8  145.95  145.95\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2020-07-10  146.2  146.2  145.55  145.55\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2020-07-13  145.6  145.6  145.45  145.45\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2020-07-14  145.4  145.4  145.25  145.25\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2020-07-15  144.9  145.1  144.70  144.95\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not certificate:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0100: certificate param is mandatory and should be a str.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(certificate, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0100: certificate param is mandatory and should be a str.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0039: country can not be None, it should be a str.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is not None and not isinstance(country, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0025: specified country value not valid.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(as_json, bool):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0002: as_json argument can just be True or False, bool type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if order not in [\"ascending\", \"asc\", \"descending\", \"desc\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0003: order argument can just be ascending (asc) or descending (desc),\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" str type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(interval, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         interval = interval.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if interval not in [\"daily\", \"weekly\", \"monthly\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0073: interval value should be a str type and it can just be either\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" 'Daily', 'Weekly' or 'Monthly'.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_package = \"investpy\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         resource_path = \"/\".join((\"resources\", \"certificates.csv\"))\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if pkg_resources.resource_exists(resource_package, resource_path):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             certificates = pd.read_csv(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 pkg_resources.resource_filename(resource_package, resource_path),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 keep_default_na=False,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise FileNotFoundError(\"ERR#0096: certificates file not found or errored.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if certificates is None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise IOError(\"ERR#0097: certificates not found or unable to retrieve.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         country = unidecode(country.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country not in get_certificate_countries():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0034: country \"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + country.lower()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         certificates = certificates[certificates[\"country\"] == country]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         certificate = unidecode(certificate.strip().lower())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if certificate not in list(certificates[\"name\"].apply(unidecode).str.lower()):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise RuntimeError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0101: certificate \"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + certificate\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 + \" not found, check if it is correct.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         symbol = certificates.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (certificates[\"name\"].apply(unidecode).str.lower() == certificate).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"symbol\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         id_ = certificates.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (certificates[\"name\"].apply(unidecode).str.lower() == certificate).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"id\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         name = certificates.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (certificates[\"name\"].apply(unidecode).str.lower() == certificate).idxmax(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"name\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         header = symbol + \" Historical Data\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"curr_id\": id_,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"smlID\": str(randint(1000000, 99999999)),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"header\": header,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"interval_sec\": interval.capitalize(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_col\": \"date\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"sort_ord\": \"DESC\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"action\": \"historical_data\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         head = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/instruments/HistoricalDataAjax\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         req = requests.post(url, headers=head, data=params)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >               \"ERR#0015: error \" + str(req.status_code) + \", try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E           ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/certificates.py:342: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _____________________________ test_investpy_search _____________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_search():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that investpy search function works properly.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = [\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'text': 'bbva',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'products': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'countries': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'n_results': 5\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'text': 'spain 3y',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'products': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'countries': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'n_results': 5\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'text': 'ibex 35',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'products': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'countries': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'n_results': 5\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'text': 'bnp daxplus',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'products': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'countries': None,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'n_results': None\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'text': 'apple',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'products': ['stocks'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'countries': ['united states'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'n_results': 1\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             },\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'text': 'apple',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'products': ['stocks'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'countries': ['united states'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'n_results': 5\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             results = investpy.search_quotes(text=param['text'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                              products=param['products'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                              countries=param['countries'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                            n_results=param['n_results'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:1298: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | text = 'bbva', products = None, countries = None, n_results = 5\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def search_quotes(text, products=None, countries=None, n_results=None):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function will use the Investing.com search engine so to retrieve the search results of the\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         introduced text. This function will create a :obj:`list` of :obj:`investpy.utils.search_obj.SearchObj`\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         class instances, unless `n_results` is set to 1, where just a single :obj:`investpy.utils.search_obj.SearchObj`\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         will be returned.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Those class instances will contain the search results so that they can be easily accessed and so\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         to ease the data retrieval process since it can be done calling the methods `self.retrieve_recent_data()`\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         or `self.retrieve_historical_data(from_date, to_date)` from each class instance, which will fill the historical\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         data attribute, `self.data`. Also the information of the financial product can be retrieved using the\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         function `self.retrieve_information()`, that will also dump the information in the attribute `self.information`;\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         the technical indicators can be retrieved using `self.retrieve_technical_indicators()` dumped in the attribute\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         `self.technical_indicators`; the default currency using `self.retrieve_currecy()` dumped in the attribute\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         `self.default_currency`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             text (:obj:`str`): text to search in Investing.com among all its indexed data.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             products (:obj:`list` of :obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 list with the product type filter/s to be applied to search result quotes so that they match\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 the filters. Possible products are: `indices`, `stocks`, `etfs`, `funds`, `commodities`, `currencies`,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 `cryptos`, `bonds`, `certificates` and `fxfutures`, by default this parameter is set to `None` which\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 means that no filter will be applied, and all product type quotes will be retrieved.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             countries (:obj:`list` of :obj:`str`, optional):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 list with the country name filter/s to be applied to search result quotes so that they match\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 the filters. Possible countries can be found in the docs, by default this paremeter is set to\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 `None` which means that no filter will be applied, and quotes from every country will be retrieved.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             n_results (:obj:`int`, optional): number of search results to retrieve and return.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`list` of :obj:`investpy.utils.search_obj.SearchObj` or :obj:`investpy.utils.search_obj.SearchObj`:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The resulting :obj:`list` of :obj:`investpy.utils.search_obj.SearchObj` will contained the retrieved\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 financial products matching the introduced text if found, otherwise a RuntimeError will be raised, so as to\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 let the user know that no results were found for the introduced text. But note that if the n_results value\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 is equal to 1, a single value will be returned, instead of a list of values.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: raised whenever any of the introduced parameter is not valid or errored.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: raised whenever the connection to Investing.com failed.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             RuntimeError: raised when there was an error while executing the function.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not text:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0074: text parameter is mandatory and it should be a valid str.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(text, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0074: text parameter is mandatory and it should be a valid str.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if products and not isinstance(products, list):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0094: products filtering parameter is optional, but if specified, it\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" must be a list of str.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if countries and not isinstance(countries, list):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0128: countries filtering parameter is optional, but if specified, it\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" must be a list of str.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if n_results and not isinstance(n_results, int):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0088: n_results parameter is optional, but if specified, it must be an\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" integer equal or higher than 1.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if n_results is not None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             if n_results < 1:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \"ERR#0088: n_results parameter is optional, but if specified, it must\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \" be an integer equal or higher than 1.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if products:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             try:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 products = list(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     map(lambda product: unidecode(product.lower().strip()), products)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             except:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \"ERR#0130: the introduced products filter must be a list of str in\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \" order to be valid.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             condition = set(products).issubset(PRODUCT_FILTERS.keys())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             if condition is False:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     'ERR#0095: products filtering parameter possible values are: \"'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     + \", \".join(PRODUCT_FILTERS.keys())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     + '\".'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             products = [PRODUCT_FILTERS[product] for product in products]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if countries:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             try:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 countries = list(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     map(lambda country: unidecode(country.lower().strip()), countries)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             except:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \"ERR#0131: the introduced countries filter must be a list of str in\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \" order to be valid.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             condition = set(countries).issubset(COUNTRY_FILTERS.keys())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             if condition is False:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     'ERR#0129: countries filtering parameter possible values are: \"'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     + \", \".join(COUNTRY_FILTERS.keys())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     + '\".'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             countries = [COUNTRY_FILTERS[country] for country in countries]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"search_text\": text,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"tab\": \"quotes\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"isFilter\": True,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"limit\": 270,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"offset\": 0,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         headers = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/search/service/SearchInnerPage\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         search_results = list()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         total_results = None\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         user_limit = True if n_results is not None else False\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         while True:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             req = requests.post(url, headers=headers, data=params)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                   f\"ERR#0015: error {req.status_code}, try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E               ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/search.py:161: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | ___________________________ test_investpy_technical ____________________________\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def test_investpy_technical():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function checks that investpy news retrieval functionality works as expected.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         params = list()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for interval in list(investpy.utils.constant.INTERVAL_FILTERS.keys()):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             params.append({\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'name': 'bbva',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'country': 'spain',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'product_type': 'stock',\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 'interval': interval\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             })\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         for param in params:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             investpy.technical_indicators(name=param['name'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                           country=param['country'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                                           product_type=param['product_type'],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >                                         interval=param['interval'])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py:1392: \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | name = 'bbva', country = 'spain', product_type = 'stock', interval = '1min'\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     def technical_indicators(name, country, product_type, interval=\"daily\"):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         This function retrieves the technical indicators values calculated by Investing.com for every financial product\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         available (stocks, funds, etfs, indices, currency crosses, bonds, certificates and commodities) for different\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         time intervals. So on, the user must provide the product_type name and the name of the product (unless product_type\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         is 'stock' which name value will be the stock's symbol) and the country if required (mandatory unless product_type\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         is either 'currency_cross' or 'commodity', where it must be None). Additionally, the interval can be specified\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         which defines the update frequency of the calculations of the technical indicators (mainly momentum indicators).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Args:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             name (:obj:`str`):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 name of the product to retrieve the technical indicators table from (if product_type is `stock`, its value\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 must be the stock's symbol not the name).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             country (:obj:`str`):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 country name of the introduced product if applicable (if product_type is either `currency_cross` or `commodity`\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 this parameter should be None, unless it can be specified just for `commodity` product_type).\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             product_type (:obj:`str`):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 identifier of the introduced product, available ones are: `stock`, `fund`, `etf`, `index`, `currency_cross`,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 `bond`, `certificate` and `commodity`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             interval (:obj:`str`):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 time interval of the resulting calculations, available values are: `5mins`, `15mins`, `30mins`, `1hour`,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 `5hours`, `daily`, `weekly` and `monthly`.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Returns:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             :obj:`pandas.DataFrame` - technical_indicators:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 The resulting :obj:`pandas.DataFrame` contains the table with the results of the calculation of the technical\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 indicators made by Investing.com for the introduced financial product. So on, if the retrieval process succeed\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 its result will look like::\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                      technical_indicator | value | signal\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     ---------------------|-------|--------\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                      xxxxxxxxxxxxxxxxxxx | xxxxx | xxxxxx\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Raises:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ValueError: raised if any of the introduced parameters is not valid or errored.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             ConnectionError: raised if the connection to Investing.com errored or could not be established.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         Examples:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data = investpy.technical_indicators(name='bbva', country='spain', product_type='stock', interval='daily')\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             >>> data.head()\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 technical_indicator    value           signal\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             0               RSI(14)  39.1500             sell\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             1            STOCH(9,6)  33.2340             sell\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             2          STOCHRSI(14)  67.7390              buy\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             3           MACD(12,26)  -0.0740             sell\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             4               ADX(14)  55.1150             sell\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             5           Williams %R -66.6670             sell\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             6               CCI(14) -77.1409             sell\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             7               ATR(14)   0.0939  less_volatility\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             8        Highs/Lows(14)  -0.0199             sell\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             9   Ultimate Oscillator  43.0010             sell\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             10                  ROC  -6.6240             sell\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             11  Bull/Bear Power(13)  -0.1590             sell\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         \"\"\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not name:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0116: the parameter name must be specified and must be a string.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(name, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0116: the parameter name must be specified and must be a string.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if country is not None and not isinstance(country, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0117: this parameter can just be None or a string, if required.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not product_type:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0118: product_type value is mandatory and must be a string.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(product_type, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0118: product_type value is mandatory and must be a string.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0121: interval value is mandatory and must be a string.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if not isinstance(interval, str):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\"ERR#0121: interval value is mandatory and must be a string.\")\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         product_type = unidecode(product_type.lower().strip())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if product_type not in cst.PRODUCT_TYPE_FILES.keys():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0119: introduced product_type value does not exist. Available values\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" are: \" + \", \".join(cst.PRODUCT_TYPE_FILES.keys())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if interval:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             if interval not in cst.INTERVAL_FILTERS.keys():\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \"ERR#0120: introduced interval value does not exist. Available values\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     \" are: \" + \", \".join(cst.INTERVAL_FILTERS.keys())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         data = resource_to_data(path_to_data=cst.PRODUCT_TYPE_FILES[product_type])\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if product_type not in [\"currency_cross\"]:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             if country is not None:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 country = unidecode(country.lower().strip())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 if country not in list(set(data[\"country\"].str.lower())):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \"ERR#0124: introduced country does not exist or is not available.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 data = data[data[\"country\"] == country]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 if product_type != \"commodity\":\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \"ERR#0123: country parameter is required with the introduced\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                         \" product_type.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                     )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if product_type == \"stock\":\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             check = \"symbol\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         else:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             check = \"name\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         name = unidecode(name.lower().strip())\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if name not in list(data[check].apply(unidecode).str.lower()):\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ValueError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \"ERR#0122: introduced name does not exist in the introduced country (if\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |                 \" required).\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         product_id = data.loc[\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             (data[check].apply(unidecode).str.lower() == name).idxmax(), \"id\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         ]\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         data_values = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"pairID\": product_id,\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"period\": cst.INTERVAL_FILTERS[interval],\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"viewType\": \"normal\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         headers = {\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"User-Agent\": random_user_agent(),\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"X-Requested-With\": \"XMLHttpRequest\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept\": \"text/html\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Accept-Encoding\": \"gzip, deflate\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             \"Connection\": \"keep-alive\",\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         }\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         url = \"https://www.investing.com/instruments/Service/GetTechincalData\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         req = requests.post(url, headers=headers, data=data_values)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |         if req.status_code != 200:\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             raise ConnectionError(\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | >               \"ERR#0015: error \" + str(req.status_code) + \", try again later.\"\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |             )\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | E           ConnectionError: ERR#0015: error 403, try again later.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/technical.py:172: ConnectionError\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | =============================== warnings summary ===============================\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy.py::test_investpy_commodities\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/commodities.py:304: Warning: Note that the displayed commodity data can differ depending on the country. If you want to retrieve copper data from either united states or united kingdom, specify the country parameter.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     warnings.warn(msg, Warning)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | tests/test_investpy_errors.py::test_commodities_errors\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |   /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/investpy/commodities.py:648: Warning: Note that the displayed commodity data can differ depending on the country. If you want to retrieve copper data from either united states or united kingdom, specify the country parameter.\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   |     warnings.warn(msg, Warning)\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | \n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | -- Docs: https://docs.pytest.org/en/stable/warnings.html\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/alvarobartt-investpy/report.xml -\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | =========================== short test summary info ============================\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_stocks - ConnectionError: ERR#00...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_funds - ConnectionError: ERR#001...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_etfs - ConnectionError: ERR#0015...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_indices - ConnectionError: ERR#0...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_currency_crosses - ConnectionErr...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_bonds - ConnectionError: ERR#001...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_commodities - ConnectionError: E...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_cryptos - ConnectionError: ERR#0...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_certificates - ConnectionError: ...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_search - ConnectionError: ERR#00...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | FAILED tests/test_investpy.py::test_investpy_technical - ConnectionError: ERR...\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   | ================== 11 failed, 14 passed, 2 warnings in 35.23s ==================\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests]   \u274c  Failure - Main Run pytest tests\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests] exitcode '1': failure\n[e5eda6b6-a69d-4757-bc78-bacf54f07896/run-investpy-tests] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'run-investpy-tests' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/alvarobartt-investpy/.github/workflows/run_tests-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "e5eda6b6-a69d-4757-bc78-bacf54f07896",
        "build_tool": "pytest",
        "elapsed_time": 243.56923389434814
    }
}