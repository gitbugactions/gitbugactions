{
    "repository": "pangeo-data/scikit-downscale",
    "stars": 159,
    "language": "python",
    "size": 14737,
    "clone_url": "https://github.com/pangeo-data/scikit-downscale.git",
    "timestamp": "2023-06-28T12:11:24.465708Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [],
        "stdout": "[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build] \ud83d\ude80  Start image=crawlergpt:latest\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/pangeo-data-scikit-downscale] user=0 workdir=\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3.0.7\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3.1.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build] \ud83e\uddea  Matrix: map[python-version:3.8]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build] \u2b50 Run Main actions/checkout@v3\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2705  Success - Main actions/checkout@v3\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build] \u2b50 Run Main Setup Python\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker cp src=/tmp/act-cache/b433b2ba-e390-4c5c-84c3-689bd7870924/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2753  ::group::Installed versions\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::isExplicit: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::explicit? false\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::explicit? true\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::explicit? true\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::explicit? true\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::explicit? true\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::explicit? true\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::explicit? true\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::matched: 3.8.11\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Successfully set up CPython (3.8.11)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2753  ::endgroup::\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2705  Success - Main Setup Python\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib/pkgconfig\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2699  ::set-output:: python-version=3.8.11\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build] \u2b50 Run Main actions/cache@v3.0.7\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker cp src=/tmp/act-cache/b433b2ba-e390-4c5c-84c3-689bd7870924/act/actions-cache@v3.0.7/ dst=/var/run/act/actions/actions-cache@v3.0.7/\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v3.0.7/] user=0 workdir=\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3.0.7/dist/restore/index.js] user= workdir=\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcbe  ::save-state name=CACHE_KEY::Linux-pip-dbf96801d7cb73b4ccec961421f885a2b7d6654233ee4d3dd7c5237cfdb117aa\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::Resolved Keys:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::[\"Linux-pip-dbf96801d7cb73b4ccec961421f885a2b7d6654233ee4d3dd7c5237cfdb117aa\",\"Linux-pip-\"]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::Checking zstd --version\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:39687/_apis/artifactcache/cache?keys=Linux-pip-dbf96801d7cb73b4ccec961421f885a2b7d6654233ee4d3dd7c5237cfdb117aa%252CLinux-pip-&version=2a50607a47f0c27aad98b33e03fa13615fdc9c33dc4fff3945d2d5078a8f7664\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Cache not found for input keys: Linux-pip-dbf96801d7cb73b4ccec961421f885a2b7d6654233ee4d3dd7c5237cfdb117aa, Linux-pip-\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2705  Success - Main actions/cache@v3.0.7\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build] \u2b50 Run Main python -m pip install -r dev-requirements.txt\npython -m pip install --no-deps -e .\npython -m pip list\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting netcdf4\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading netCDF4-1.6.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.4 MB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting pre-commit\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading pre_commit-3.3.3-py2.py3-none-any.whl (202 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting pytest\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting pytest-sugar\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading pytest_sugar-0.9.7-py2.py3-none-any.whl (10 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting pytest-cov\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting xarray>=0.16\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading xarray-2023.1.0-py3-none-any.whl (973 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting scikit-learn>=0.21\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading scikit_learn-1.2.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (9.8 MB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting certifi\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting numpy\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading numpy-1.24.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.3 MB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting cftime\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading cftime-1.6.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting identify>=1.0.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading identify-2.5.24-py2.py3-none-any.whl (98 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting nodeenv>=0.11.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading nodeenv-1.8.0-py2.py3-none-any.whl (22 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting cfgv>=2.0.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading cfgv-3.3.1-py2.py3-none-any.whl (7.3 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting virtualenv>=20.10.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting pyyaml>=5.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (701 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting tomli>=1.0.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting exceptiongroup>=1.0.0rc8\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting packaging\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting iniconfig\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting pluggy<2.0,>=0.12\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting termcolor>=2.1.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading termcolor-2.3.0-py3-none-any.whl (6.9 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting coverage[toml]>=5.2.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading coverage-7.2.7-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (229 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting pandas>=1.3\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading pandas-2.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.3 MB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting threadpoolctl>=2.0.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading threadpoolctl-3.1.0-py3-none-any.whl (14 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting scipy>=1.3.2\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading scipy-1.10.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.5 MB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting joblib>=1.1.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading joblib-1.2.0-py3-none-any.whl (297 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from nodeenv>=0.11.1->pre-commit->-r dev-requirements.txt (line 2)) (56.0.0)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting tzdata>=2022.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading tzdata-2023.3-py2.py3-none-any.whl (341 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting pytz>=2020.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting python-dateutil>=2.8.2\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting six>=1.5\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting filelock<4,>=3.12\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting distlib<1,>=0.3.6\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Collecting platformdirs<4,>=3.5.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Installing collected packages: six, tzdata, tomli, pytz, python-dateutil, pluggy, platformdirs, packaging, numpy, iniconfig, filelock, exceptiongroup, distlib, coverage, virtualenv, threadpoolctl, termcolor, scipy, pyyaml, pytest, pandas, nodeenv, joblib, identify, cftime, cfgv, certifi, xarray, scikit-learn, pytest-sugar, pytest-cov, pre-commit, netcdf4\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Successfully installed certifi-2023.5.7 cfgv-3.3.1 cftime-1.6.2 coverage-7.2.7 distlib-0.3.6 exceptiongroup-1.1.1 filelock-3.12.2 identify-2.5.24 iniconfig-2.0.0 joblib-1.2.0 netcdf4-1.6.4 nodeenv-1.8.0 numpy-1.24.4 packaging-23.1 pandas-2.0.2 platformdirs-3.8.0 pluggy-1.2.0 pre-commit-3.3.3 pytest-7.4.0 pytest-cov-4.1.0 pytest-sugar-0.9.7 python-dateutil-2.8.2 pytz-2023.3 pyyaml-6.0 scikit-learn-1.2.2 scipy-1.10.1 six-1.16.0 termcolor-2.3.0 threadpoolctl-3.1.0 tomli-2.0.1 tzdata-2023.3 virtualenv-20.23.1 xarray-2023.1.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/pangeo-data-scikit-downscale\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Installing build dependencies: started\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Installing build dependencies: finished with status 'done'\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Getting requirements to build wheel: started\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Getting requirements to build wheel: finished with status 'done'\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     Preparing wheel metadata: started\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     Preparing wheel metadata: finished with status 'done'\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Installing collected packages: scikit-downscale\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   Running setup.py develop for scikit-downscale\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Successfully installed scikit-downscale-0.1.5.post4\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Package          Version     Location\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | ---------------- ----------- ----------------------------------------------------------------------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | certifi          2023.5.7\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | cfgv             3.3.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | cftime           1.6.2\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | coverage         7.2.7\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | distlib          0.3.6\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | exceptiongroup   1.1.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | filelock         3.12.2\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | identify         2.5.24\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | iniconfig        2.0.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | joblib           1.2.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | netCDF4          1.6.4\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | nodeenv          1.8.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | numpy            1.24.4\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | packaging        23.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | pandas           2.0.2\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | pip              21.2.4\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | platformdirs     3.8.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | pluggy           1.2.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | pre-commit       3.3.3\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | pytest           7.4.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | pytest-cov       4.1.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | pytest-sugar     0.9.7\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | python-dateutil  2.8.2\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | pytz             2023.3\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | PyYAML           6.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | scikit-downscale 0.1.5.post4 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/pangeo-data-scikit-downscale\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | scikit-learn     1.2.2\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | scipy            1.10.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | setuptools       56.0.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | six              1.16.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | termcolor        2.3.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | threadpoolctl    3.1.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | tomli            2.0.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | tzdata           2023.3\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | virtualenv       20.23.1\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | xarray           2023.1.0\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u2705  Success - Main python -m pip install -r dev-requirements.txt\npython -m pip install --no-deps -e .\npython -m pip list\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build] \u2b50 Run Main Running Tests\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | ============================= test session starts ==============================\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | platform linux -- Python 3.8.11, pytest-7.4.0, pluggy-1.2.0 -- /opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | cachedir: .pytest_cache\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/pangeo-data-scikit-downscale\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | plugins: cov-4.1.0, sugar-0.9.7\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | collecting ... collected 463 items / 1 skipped\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_grouping.py::test_groupers FAILED                  [  0%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_no_attributes_set_in_init] PASSED [  0%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_dtypes] FAILED [  0%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_fit_score_takes_y] XFAIL [  0%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_fit_returns_self] PASSED [  1%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_fit_returns_self(readonly_memmap=True)] PASSED [  1%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_complex_data] PASSED [  1%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_dtype_object] FAILED [  1%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_empty_data_messages] PASSED [  1%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_pipeline_consistency] XFAIL [  2%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_nan_inf] PASSED [  2%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_overwrite_params] PASSED [  2%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimator_sparse_data] PASSED [  2%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_pickle] FAILED [  3%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimator_get_tags_default_keys] PASSED [  3%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_regressors_train] XFAIL [  3%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_regressors_train(readonly_memmap=True)] XFAIL [  3%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_regressors_train(readonly_memmap=True,X_dtype=float32)] XFAIL [  3%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_regressor_data_not_an_array] FAILED [  4%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_partial_fit_n_features] PASSED [  4%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_regressors_no_decision_function] PASSED [  4%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_supervised_y_2d] FAILED [  4%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_supervised_y_no_nan] PASSED [  4%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_regressors_int] FAILED [  5%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_unfitted] PASSED [  5%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_non_transformer_estimators_n_iter] PASSED [  5%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_parameters_default_constructible] PASSED [  5%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_methods_sample_order_invariance] FAILED [  6%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_methods_subset_invariance] FAILED [  6%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_fit2d_1sample] PASSED [  6%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_fit2d_1feature] PASSED [  6%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_get_params_invariance] PASSED [  6%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_set_params] PASSED [  7%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_dict_unchanged] FAILED [  7%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_dont_overwrite_parameters] PASSED [  7%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_fit_idempotent] FAILED [  7%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_fit_check_is_fitted] PASSED [  7%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_n_features_in] PASSED [  8%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_fit1d] PASSED [  8%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_fit2d_predict1d] PASSED [  8%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_requires_y_none] PASSED [  8%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_no_attributes_set_in_init] PASSED [  9%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_estimators_dtypes] XFAIL [  9%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_fit_score_takes_y] XFAIL [  9%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_estimators_fit_returns_self] XFAIL [  9%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_estimators_fit_returns_self(readonly_memmap=True)] XFAIL [  9%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_complex_data] PASSED [ 10%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_dtype_object] XFAIL [ 10%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_estimators_empty_data_messages] PASSED [ 10%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_pipeline_consistency] XFAIL [ 10%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_estimators_nan_inf] XFAIL [ 11%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_estimators_overwrite_params] XFAIL [ 11%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_estimator_sparse_data] PASSED [ 11%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_estimators_pickle] XFAIL [ 11%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_estimator_get_tags_default_keys] PASSED [ 11%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_parameters_default_constructible] PASSED [ 12%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_methods_sample_order_invariance] XFAIL [ 12%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_methods_subset_invariance] XFAIL [ 12%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_fit2d_1sample] XFAIL [ 12%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_fit2d_1feature] PASSED [ 12%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_get_params_invariance] PASSED [ 13%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_set_params] PASSED [ 13%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_dict_unchanged] XFAIL [ 13%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_dont_overwrite_parameters] XFAIL [ 13%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_fit_idempotent] XFAIL [ 14%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_fit_check_is_fitted] XFAIL [ 14%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_n_features_in] XFAIL [ 14%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_fit1d] PASSED [ 14%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdPrecipitation()-check_fit2d_predict1d] XFAIL [ 14%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_no_attributes_set_in_init] PASSED [ 15%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_estimators_dtypes] XFAIL [ 15%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_fit_score_takes_y] XFAIL [ 15%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_estimators_fit_returns_self] XFAIL [ 15%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_estimators_fit_returns_self(readonly_memmap=True)] XFAIL [ 15%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_complex_data] PASSED [ 16%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_dtype_object] XFAIL [ 16%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_estimators_empty_data_messages] PASSED [ 16%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_pipeline_consistency] XFAIL [ 16%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_estimators_nan_inf] XFAIL [ 17%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_estimators_overwrite_params] XFAIL [ 17%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_estimator_sparse_data] PASSED [ 17%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_estimators_pickle] XFAIL [ 17%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_estimator_get_tags_default_keys] PASSED [ 17%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_parameters_default_constructible] PASSED [ 18%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_methods_sample_order_invariance] XFAIL [ 18%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_methods_subset_invariance] XFAIL [ 18%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_fit2d_1sample] XFAIL [ 18%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_fit2d_1feature] PASSED [ 19%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_get_params_invariance] PASSED [ 19%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_set_params] PASSED [ 19%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_dict_unchanged] XFAIL [ 19%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_dont_overwrite_parameters] XFAIL [ 19%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_fit_idempotent] XFAIL [ 20%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_fit_check_is_fitted] XFAIL [ 20%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_n_features_in] XFAIL [ 20%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_fit1d] PASSED [ 20%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[BcsdTemperature()-check_fit2d_predict1d] XFAIL [ 20%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_no_attributes_set_in_init] PASSED [ 21%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimators_dtypes] PASSED [ 21%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_fit_score_takes_y] XFAIL [ 21%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimators_fit_returns_self] PASSED [ 21%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimators_fit_returns_self(readonly_memmap=True)] PASSED [ 22%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_complex_data] PASSED [ 22%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_dtype_object] PASSED [ 22%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimators_empty_data_messages] PASSED [ 22%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_pipeline_consistency] XFAIL [ 22%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimators_nan_inf] PASSED [ 23%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimators_overwrite_params] PASSED [ 23%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimator_sparse_data] PASSED [ 23%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimators_pickle] PASSED [ 23%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimator_get_tags_default_keys] PASSED [ 23%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_regressors_train] XFAIL [ 24%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_regressors_train(readonly_memmap=True)] XFAIL [ 24%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_regressors_train(readonly_memmap=True,X_dtype=float32)] XFAIL [ 24%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_regressor_data_not_an_array] PASSED [ 24%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimators_partial_fit_n_features] PASSED [ 25%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_regressors_no_decision_function] PASSED [ 25%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_supervised_y_2d] PASSED [ 25%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_supervised_y_no_nan] PASSED [ 25%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_regressors_int] PASSED [ 25%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_estimators_unfitted] PASSED [ 26%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_non_transformer_estimators_n_iter] PASSED [ 26%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_parameters_default_constructible] PASSED [ 26%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_methods_sample_order_invariance] PASSED [ 26%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_methods_subset_invariance] PASSED [ 26%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_fit2d_1sample] PASSED [ 27%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_fit2d_1feature] PASSED [ 27%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_get_params_invariance] PASSED [ 27%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_set_params] PASSED [ 27%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_dict_unchanged] PASSED [ 28%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_dont_overwrite_parameters] PASSED [ 28%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_fit_idempotent] PASSED [ 28%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_fit_check_is_fitted] PASSED [ 28%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_n_features_in] PASSED [ 28%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_fit1d] PASSED [ 29%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_fit2d_predict1d] PASSED [ 29%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureAnalog()-check_requires_y_none] PASSED [ 29%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_no_attributes_set_in_init] PASSED [ 29%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimators_dtypes] PASSED [ 30%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_fit_score_takes_y] XFAIL [ 30%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimators_fit_returns_self] PASSED [ 30%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimators_fit_returns_self(readonly_memmap=True)] PASSED [ 30%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_complex_data] PASSED [ 30%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_dtype_object] PASSED [ 31%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimators_empty_data_messages] PASSED [ 31%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_pipeline_consistency] XFAIL [ 31%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimators_nan_inf] PASSED [ 31%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimators_overwrite_params] PASSED [ 31%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimator_sparse_data] PASSED [ 32%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimators_pickle] PASSED [ 32%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimator_get_tags_default_keys] PASSED [ 32%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_regressors_train] XFAIL [ 32%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_regressors_train(readonly_memmap=True)] XFAIL [ 33%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_regressors_train(readonly_memmap=True,X_dtype=float32)] XFAIL [ 33%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_regressor_data_not_an_array] PASSED [ 33%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimators_partial_fit_n_features] PASSED [ 33%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_regressors_no_decision_function] PASSED [ 33%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_supervised_y_2d] PASSED [ 34%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_supervised_y_no_nan] PASSED [ 34%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_regressors_int] PASSED [ 34%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_estimators_unfitted] PASSED [ 34%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_non_transformer_estimators_n_iter] PASSED [ 34%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_parameters_default_constructible] PASSED [ 35%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_methods_sample_order_invariance] PASSED [ 35%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_methods_subset_invariance] PASSED [ 35%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_fit2d_1sample] PASSED [ 35%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_fit2d_1feature] PASSED [ 36%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_get_params_invariance] PASSED [ 36%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_set_params] PASSED [ 36%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_dict_unchanged] PASSED [ 36%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_dont_overwrite_parameters] PASSED [ 36%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_fit_idempotent] PASSED [ 37%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_fit_check_is_fitted] PASSED [ 37%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_n_features_in] PASSED [ 37%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_fit1d] PASSED [ 37%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_fit2d_predict1d] PASSED [ 38%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[PureRegression()-check_requires_y_none] PASSED [ 38%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_no_attributes_set_in_init] PASSED [ 38%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_estimators_dtypes] XFAIL [ 38%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_fit_score_takes_y] XFAIL [ 38%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_estimators_fit_returns_self] XFAIL [ 39%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_estimators_fit_returns_self(readonly_memmap=True)] XFAIL [ 39%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_complex_data] PASSED [ 39%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_dtype_object] XFAIL [ 39%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_estimators_empty_data_messages] PASSED [ 39%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_pipeline_consistency] XFAIL [ 40%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_estimators_nan_inf] XFAIL [ 40%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_estimators_overwrite_params] XFAIL [ 40%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_estimator_sparse_data] PASSED [ 40%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_estimators_pickle] XFAIL [ 41%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_estimator_get_tags_default_keys] PASSED [ 41%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_parameters_default_constructible] PASSED [ 41%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_methods_sample_order_invariance] XFAIL [ 41%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_methods_subset_invariance] XFAIL [ 41%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_fit2d_1sample] XFAIL [ 42%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_fit2d_1feature] PASSED [ 42%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_get_params_invariance] PASSED [ 42%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_set_params] PASSED [ 42%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_dict_unchanged] XFAIL [ 42%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_dont_overwrite_parameters] XFAIL [ 43%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_fit_idempotent] XFAIL [ 43%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_fit_check_is_fitted] XFAIL [ 43%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_n_features_in] XFAIL [ 43%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_fit1d] PASSED [ 44%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[ZScoreRegressor()-check_fit2d_predict1d] XFAIL [ 44%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_no_attributes_set_in_init] PASSED [ 44%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimators_dtypes] XFAIL [ 44%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_fit_score_takes_y] XFAIL [ 44%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimators_fit_returns_self] XFAIL [ 45%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimators_fit_returns_self(readonly_memmap=True)] XFAIL [ 45%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_complex_data] PASSED [ 45%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_dtype_object] XFAIL [ 45%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimators_empty_data_messages] XPASS [ 46%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_pipeline_consistency] XFAIL [ 46%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimators_nan_inf] XFAIL [ 46%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimators_overwrite_params] XFAIL [ 46%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimator_sparse_data] PASSED [ 46%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimators_pickle] XFAIL [ 47%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimator_get_tags_default_keys] PASSED [ 47%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_regressors_train] XFAIL [ 47%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_regressors_train(readonly_memmap=True)] XFAIL [ 47%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_regressors_train(readonly_memmap=True,X_dtype=float32)] XFAIL [ 47%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_regressor_data_not_an_array] XFAIL [ 48%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimators_partial_fit_n_features] PASSED [ 48%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_regressors_no_decision_function] XFAIL [ 48%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_supervised_y_2d] XFAIL [ 48%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_supervised_y_no_nan] PASSED [ 49%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_regressors_int] XFAIL [ 49%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_estimators_unfitted] PASSED [ 49%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_non_transformer_estimators_n_iter] PASSED [ 49%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_parameters_default_constructible] PASSED [ 49%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_methods_sample_order_invariance] XFAIL [ 50%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_methods_subset_invariance] XFAIL [ 50%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_fit2d_1sample] XPASS [ 50%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_fit2d_1feature] PASSED [ 50%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_get_params_invariance] PASSED [ 50%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_set_params] PASSED [ 51%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_dict_unchanged] XFAIL [ 51%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_dont_overwrite_parameters] XFAIL [ 51%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_fit_idempotent] XFAIL [ 51%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_fit_check_is_fitted] XFAIL [ 52%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_n_features_in] XFAIL [ 52%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_fit1d] PASSED [ 52%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_fit2d_predict1d] XFAIL [ 52%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMappingReressor(n_endpoints=2)-check_requires_y_none] XFAIL [ 52%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_no_attributes_set_in_init] PASSED [ 53%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimators_dtypes] XFAIL [ 53%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_fit_score_takes_y] XFAIL [ 53%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimators_fit_returns_self] XFAIL [ 53%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimators_fit_returns_self(readonly_memmap=True)] XFAIL [ 53%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_complex_data] PASSED [ 54%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_dtype_object] XFAIL [ 54%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimators_empty_data_messages] XPASS [ 54%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_pipeline_consistency] XFAIL [ 54%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimators_nan_inf] XFAIL [ 55%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimators_overwrite_params] XFAIL [ 55%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimator_sparse_data] PASSED [ 55%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimators_pickle] XFAIL [ 55%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimator_get_tags_default_keys] PASSED [ 55%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_regressors_train] XFAIL [ 56%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_regressors_train(readonly_memmap=True)] XFAIL [ 56%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_regressors_train(readonly_memmap=True,X_dtype=float32)] XFAIL [ 56%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_regressor_data_not_an_array] XFAIL [ 56%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimators_partial_fit_n_features] PASSED [ 57%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_regressors_no_decision_function] XFAIL [ 57%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_supervised_y_2d] XFAIL [ 57%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_supervised_y_no_nan] PASSED [ 57%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_regressors_int] XFAIL [ 57%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_estimators_unfitted] PASSED [ 58%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_non_transformer_estimators_n_iter] PASSED [ 58%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_parameters_default_constructible] PASSED [ 58%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_methods_sample_order_invariance] XFAIL [ 58%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_methods_subset_invariance] XFAIL [ 58%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_fit2d_1sample] XPASS [ 59%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_fit2d_1feature] PASSED [ 59%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_get_params_invariance] PASSED [ 59%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_set_params] PASSED [ 59%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_dict_unchanged] XFAIL [ 60%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_dont_overwrite_parameters] XFAIL [ 60%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_fit_idempotent] XFAIL [ 60%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_fit_check_is_fitted] XFAIL [ 60%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_n_features_in] XFAIL [ 60%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_fit1d] PASSED [ 61%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_fit2d_predict1d] XFAIL [ 61%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(n_endpoints=2)-check_requires_y_none] XFAIL [ 61%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_no_attributes_set_in_init] PASSED [ 61%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimators_dtypes] XFAIL [ 61%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_fit_score_takes_y] XFAIL [ 62%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimators_fit_returns_self] XFAIL [ 62%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimators_fit_returns_self(readonly_memmap=True)] XFAIL [ 62%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_complex_data] PASSED [ 62%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_dtype_object] XFAIL [ 63%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimators_empty_data_messages] XPASS [ 63%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_pipeline_consistency] XFAIL [ 63%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimators_nan_inf] XFAIL [ 63%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimators_overwrite_params] XFAIL [ 63%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimator_sparse_data] PASSED [ 64%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimators_pickle] XFAIL [ 64%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimator_get_tags_default_keys] PASSED [ 64%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_regressors_train] XFAIL [ 64%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_regressors_train(readonly_memmap=True)] XFAIL [ 65%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_regressors_train(readonly_memmap=True,X_dtype=float32)] XFAIL [ 65%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_regressor_data_not_an_array] XFAIL [ 65%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimators_partial_fit_n_features] PASSED [ 65%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_regressors_no_decision_function] XFAIL [ 65%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_supervised_y_2d] XFAIL [ 66%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_supervised_y_no_nan] PASSED [ 66%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_regressors_int] XFAIL [ 66%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_estimators_unfitted] PASSED [ 66%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_non_transformer_estimators_n_iter] PASSED [ 66%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_parameters_default_constructible] PASSED [ 67%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_methods_sample_order_invariance] XFAIL [ 67%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_methods_subset_invariance] XFAIL [ 67%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_fit2d_1sample] XPASS [ 67%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_fit2d_1feature] PASSED [ 68%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_get_params_invariance] PASSED [ 68%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_set_params] PASSED [ 68%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_dict_unchanged] XFAIL [ 68%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_dont_overwrite_parameters] XFAIL [ 68%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_fit_idempotent] XFAIL [ 69%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_fit_check_is_fitted] XFAIL [ 69%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_n_features_in] XFAIL [ 69%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_fit1d] PASSED [ 69%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_fit2d_predict1d] XFAIL [ 69%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[EquidistantCdfMatcher(kind='ratio',n_endpoints=2)-check_requires_y_none] XFAIL [ 70%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_no_attributes_set_in_init] PASSED [ 70%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_estimators_dtypes] PASSED [ 70%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_fit_score_takes_y] PASSED [ 70%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_estimators_fit_returns_self] PASSED [ 71%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_estimators_fit_returns_self(readonly_memmap=True)] PASSED [ 71%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_complex_data] PASSED [ 71%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_dtype_object] PASSED [ 71%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_estimators_empty_data_messages] PASSED [ 71%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_pipeline_consistency] PASSED [ 72%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_estimators_nan_inf] PASSED [ 72%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_estimators_overwrite_params] PASSED [ 72%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_estimator_sparse_data] PASSED [ 72%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_estimators_pickle] PASSED [ 73%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_estimator_get_tags_default_keys] PASSED [ 73%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_transformer_data_not_an_array] PASSED [ 73%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_transformer_general] PASSED [ 73%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_transformer_preserve_dtypes] PASSED [ 73%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_transformer_general(readonly_memmap=True)] PASSED [ 74%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_transformers_unfitted] PASSED [ 74%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_transformer_n_iter] PASSED [ 74%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_parameters_default_constructible] PASSED [ 74%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_methods_sample_order_invariance] XFAIL [ 74%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_methods_subset_invariance] XFAIL [ 75%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_fit2d_1sample] PASSED [ 75%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_fit2d_1feature] PASSED [ 75%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_get_params_invariance] PASSED [ 75%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_set_params] PASSED [ 76%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_dict_unchanged] PASSED [ 76%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_dont_overwrite_parameters] PASSED [ 76%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_fit_idempotent] PASSED [ 76%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_fit_check_is_fitted] PASSED [ 76%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_n_features_in] PASSED [ 77%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_fit1d] PASSED [ 77%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[LinearTrendTransformer()-check_fit2d_predict1d] PASSED [ 77%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_no_attributes_set_in_init] PASSED [ 77%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_estimators_dtypes] XFAIL [ 77%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_fit_score_takes_y] XFAIL [ 78%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_estimators_fit_returns_self] XFAIL [ 78%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_estimators_fit_returns_self(readonly_memmap=True)] XFAIL [ 78%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_complex_data] PASSED [ 78%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_dtype_object] XFAIL [ 79%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_estimators_empty_data_messages] XPASS [ 79%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_pipeline_consistency] XFAIL [ 79%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_estimators_nan_inf] XFAIL [ 79%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_estimators_overwrite_params] XFAIL [ 79%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_estimator_sparse_data] PASSED [ 80%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_estimators_pickle] XFAIL [ 80%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_estimator_get_tags_default_keys] PASSED [ 80%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_transformer_data_not_an_array] XFAIL [ 80%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_transformer_general] XFAIL [ 80%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_transformer_preserve_dtypes] XFAIL [ 81%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_transformer_general(readonly_memmap=True)] XFAIL [ 81%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_transformers_unfitted] PASSED [ 81%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_transformer_n_iter] PASSED [ 81%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_parameters_default_constructible] PASSED [ 82%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_methods_sample_order_invariance] XFAIL [ 82%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_methods_subset_invariance] XFAIL [ 82%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_fit2d_1sample] XFAIL [ 82%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_fit2d_1feature] PASSED [ 82%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_get_params_invariance] PASSED [ 83%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_set_params] PASSED [ 83%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_dict_unchanged] XFAIL [ 83%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_dont_overwrite_parameters] XFAIL [ 83%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_fit_idempotent] XFAIL [ 84%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_fit_check_is_fitted] XFAIL [ 84%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_n_features_in] XFAIL [ 84%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_fit1d] PASSED [ 84%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[CunnaneTransformer()-check_fit2d_predict1d] XFAIL [ 84%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_no_attributes_set_in_init] PASSED [ 85%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_estimators_dtypes] XFAIL [ 85%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_fit_score_takes_y] XFAIL [ 85%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_estimators_fit_returns_self] XFAIL [ 85%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_estimators_fit_returns_self(readonly_memmap=True)] XFAIL [ 85%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_complex_data] PASSED [ 86%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_dtype_object] XFAIL [ 86%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_estimators_empty_data_messages] XPASS [ 86%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_pipeline_consistency] XFAIL [ 86%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_estimators_nan_inf] XFAIL [ 87%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_estimators_overwrite_params] XFAIL [ 87%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_estimator_sparse_data] PASSED [ 87%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_estimators_pickle] XFAIL [ 87%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_estimator_get_tags_default_keys] PASSED [ 87%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_transformer_data_not_an_array] XFAIL [ 88%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_transformer_general] XFAIL [ 88%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_transformer_preserve_dtypes] XFAIL [ 88%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_transformer_general(readonly_memmap=True)] XFAIL [ 88%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_transformers_unfitted] PASSED [ 88%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_transformer_n_iter] PASSED [ 89%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_parameters_default_constructible] PASSED [ 89%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_methods_sample_order_invariance] XFAIL [ 89%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_methods_subset_invariance] XFAIL [ 89%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_fit2d_1sample] XFAIL [ 90%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_fit2d_1feature] PASSED [ 90%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_get_params_invariance] PASSED [ 90%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_set_params] PASSED [ 90%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_dict_unchanged] XFAIL [ 90%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_dont_overwrite_parameters] XFAIL [ 91%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_fit_idempotent] XFAIL [ 91%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_fit_check_is_fitted] XFAIL [ 91%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_n_features_in] XFAIL [ 91%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_fit1d] PASSED [ 92%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[QuantileMapper()-check_fit2d_predict1d] XFAIL [ 92%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_trend_roundtrip PASSED [ 92%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_quantile_mapper PASSED   [ 92%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_quantile_mapper_detrend XFAIL [ 92%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model0] PASSED [ 93%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model1] PASSED [ 93%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model2] FAILED [ 93%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model3] PASSED [ 93%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model4] PASSED [ 93%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model5] PASSED [ 94%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model6] PASSED [ 94%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model7] PASSED [ 94%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model8] PASSED [ 94%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model9] PASSED [ 95%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model10] PASSED [ 95%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model11] PASSED [ 95%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model12] PASSED [ 95%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model13] PASSED [ 95%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model14] PASSED [ 96%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_models_with_multiple_features[PureAnalog] PASSED [ 96%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_models_with_multiple_features[AnalogRegression] FAILED [ 96%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_models_with_multiple_features[PureRegression] PASSED [ 96%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_gard_analog_models[best_analog] PASSED [ 96%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_gard_analog_models[sample_analogs] PASSED [ 97%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_gard_analog_models[weight_analogs] PASSED [ 97%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_gard_analog_models[mean_analogs] PASSED [ 97%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_gard_analog_regression_models[None] FAILED [ 97%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_gard_analog_regression_models[3] FAILED [ 98%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_gard_pure_regression_models[None] PASSED [ 98%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_gard_pure_regression_models[3] PASSED [ 98%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model_prec[BcsdPrecipitation] PASSED [ 98%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_zscore_scale PASSED      [ 98%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_zscore_shift PASSED      [ 99%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_zscore_predict PASSED    [ 99%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_paddeddoygrouper PASSED  [ 99%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_BcsdTemperature_nasanex PASSED [ 99%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_EquidistantCdfMatcher PASSED [100%]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | =================================== FAILURES ===================================\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | ________________________________ test_groupers _________________________________\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_groupers():\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         estimator = LinearRegression\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         fit_grouper = PaddedDOYGrouper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         def predict_grouper(x):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             return x.dayofyear\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         model = GroupedRegressor(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             estimator, fit_grouper, predict_grouper, fit_grouper_kwargs={'window': 5}\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         n = 1234\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         index = pd.date_range('2019-01-01', periods=n)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = pd.DataFrame({'foo': np.sin(np.linspace(-10 * np.pi, 10 * np.pi, n)) * 10}, index=index)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         y = X + 2\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       model.fit(X, y)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_grouping.py:26: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/grouping.py:64: in fit\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     x_groups = self.fit_grouper(X.index, **fit_grouper_kwargs).groups\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/grouping.py:121: in __init__\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     temp_groups = np.zeros((n, n), dtype=np.bool)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | attr = 'bool'\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def __getattr__(attr):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # Warn for expired attributes, and return a dummy function\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # that always raises an exception.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         import warnings\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         try:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             msg = __expired_functions__[attr]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         except KeyError:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             pass\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         else:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             warnings.warn(msg, DeprecationWarning, stacklevel=2)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             def _expired(*args, **kwds):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 raise RuntimeError(msg)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             return _expired\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # Emit warnings for deprecated attributes\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         try:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             val, msg = __deprecated_attrs__[attr]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         except KeyError:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             pass\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         else:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             warnings.warn(msg, DeprecationWarning, stacklevel=2)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             return val\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         if attr in __future_scalars__:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # And future warnings for those that will change, but also give\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # the AttributeError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             warnings.warn(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 f\"In the future `np.{attr}` will be defined as the \"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         if attr in __former_attrs__:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           raise AttributeError(__former_attrs__[attr])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           AttributeError: module 'numpy' has no attribute 'bool'.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           `np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E               https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/numpy/__init__.py:305: AttributeError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_dtypes] _\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | estimator = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | check = functools.partial(<function check_estimators_dtypes at 0x7f5397fcbc10>, 'AnalogRegression')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @parametrize_with_checks(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # Regressors\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdPrecipitation(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='difference', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='ratio', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # transformers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             LinearTrendTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             CunnaneTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMapper(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_sklearn_compatible_estimator(estimator, check):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       check(estimator)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:53: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/_testing.py:188: in wrapper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     return fn(*args, **kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:1728: in check_estimators_dtypes\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     getattr(estimator, method)(X_train)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[1.6464405 , 2.145568  , 1.80829   , 1.6346495 , 1.2709644 ],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [1.9376824 , 1.3127615 , 2.675319  , 2.890...6 , 2.1489816 , 0.8682183 ],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.5495741 , 1.7595388 , 0.06032264, 2.4868202 , 0.01408643]],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |       dtype=float32)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | ___ test_sklearn_compatible_estimator[AnalogRegression()-check_dtype_object] ___\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | estimator = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | check = functools.partial(<function check_dtype_object at 0x7f5397fc89d0>, 'AnalogRegression')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @parametrize_with_checks(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # Regressors\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdPrecipitation(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='difference', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='ratio', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # transformers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             LinearTrendTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             CunnaneTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMapper(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_sklearn_compatible_estimator(estimator, check):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       check(estimator)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:53: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/_testing.py:188: in wrapper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     return fn(*args, **kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:1146: in check_dtype_object\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     estimator.predict(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[0.5488135 , 0.71518937, 0.60276338, 0.54488318, 0.4236548 ,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         0.64589411, 0.43758721, 0.891773  , 0.9636..., 0.42403225, 0.25868407, 0.84903831, 0.03330463,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         0.95898272, 0.35536885, 0.35670689, 0.0163285 , 0.18523233]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_pickle] _\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | estimator = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | check = functools.partial(<function check_estimators_pickle at 0x7f5397fcd160>, 'AnalogRegression')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @parametrize_with_checks(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # Regressors\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdPrecipitation(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='difference', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='ratio', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # transformers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             LinearTrendTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             CunnaneTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMapper(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_sklearn_compatible_estimator(estimator, check):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       check(estimator)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:53: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/_testing.py:188: in wrapper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     return fn(*args, **kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:1896: in check_estimators_pickle\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     result[method] = getattr(estimator, method)(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[ 1.00519454,  1.07290906,  1.01289829],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 0.12302907,  0.12023798, -0.03873268],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 0.04105985,  ...9292474,  1.10544517],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 0.93151899,  0.91292029,  0.94211503],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-0.03023028, -0.1048553 , -0.14200179]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ test_sklearn_compatible_estimator[AnalogRegression()-check_regressor_data_not_an_array] _\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | estimator = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | check = functools.partial(<function check_regressor_data_not_an_array at 0x7f5397fd4430>, 'AnalogRegression')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @parametrize_with_checks(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # Regressors\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdPrecipitation(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='difference', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='ratio', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # transformers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             LinearTrendTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             CunnaneTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMapper(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_sklearn_compatible_estimator(estimator, check):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       check(estimator)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:53: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/_testing.py:188: in wrapper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     return fn(*args, **kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:3169: in check_regressor_data_not_an_array\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     check_estimators_data_not_an_array(name, estimator_orig, X, y, obj_type)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/_testing.py:188: in wrapper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     return fn(*args, **kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:3213: in check_estimators_data_not_an_array\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     pred1 = estimator_1.predict(X_)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[ 0.29213817,  1.31098939, -1.34589423, ..., -0.13099541,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |          1.02617223,  0.52005686],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-1.4558723...193, -0.91441039],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 2.59455523,  1.14231106, -0.15404749, ..., -0.05455829,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |          0.41403923,  0.39284481]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ test_sklearn_compatible_estimator[AnalogRegression()-check_supervised_y_2d] __\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | estimator = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | check = functools.partial(<function check_supervised_y_2d at 0x7f5397fd1550>, 'AnalogRegression')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @parametrize_with_checks(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # Regressors\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdPrecipitation(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='difference', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='ratio', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # transformers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             LinearTrendTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             CunnaneTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMapper(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_sklearn_compatible_estimator(estimator, check):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       check(estimator)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:53: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/_testing.py:188: in wrapper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     return fn(*args, **kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:2695: in check_supervised_y_2d\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     y_pred = estimator.predict(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[0.5488135 , 0.71518937, 0.60276338],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.54488318, 0.4236548 , 0.64589411],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.43758721, 0.891773...99, 0.0641475 , 0.69247212],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.56660145, 0.26538949, 0.52324805],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.09394051, 0.5759465 , 0.9292962 ]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | __ test_sklearn_compatible_estimator[AnalogRegression()-check_regressors_int] __\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | estimator = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | check = functools.partial(<function check_regressors_int at 0x7f5397fd18b0>, 'AnalogRegression')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @parametrize_with_checks(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # Regressors\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdPrecipitation(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='difference', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='ratio', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # transformers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             LinearTrendTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             CunnaneTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMapper(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_sklearn_compatible_estimator(estimator, check):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       check(estimator)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:53: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/_testing.py:188: in wrapper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     return fn(*args, **kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:2850: in check_regressors_int\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     pred1 = regressor_1.predict(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[ 0.29213817,  1.31098939, -1.34589423, -0.58862977,  0.6954569 ,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |          0.17725215, -0.46541052, -0.13099541...6218, -1.47391392,  0.16498961,  1.59278783,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |          0.06222172, -1.06917479, -0.44284101, -0.23942958,  0.29422841]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ test_sklearn_compatible_estimator[AnalogRegression()-check_methods_sample_order_invariance] _\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | estimator = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | check = functools.partial(<function check_methods_sample_order_invariance at 0x7f5397fcb160>, 'AnalogRegression')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @parametrize_with_checks(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # Regressors\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdPrecipitation(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='difference', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='ratio', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # transformers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             LinearTrendTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             CunnaneTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMapper(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_sklearn_compatible_estimator(estimator, check):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       check(estimator)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:53: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/_testing.py:188: in wrapper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     return fn(*args, **kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:1402: in check_methods_sample_order_invariance\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     getattr(estimator, method)(X)[idx],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[1.64644051, 2.1455681 , 1.80829013],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [1.63464955, 1.2709644 , 1.93768234],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [1.31276163, 2.675319...54, 2.96512151, 0.30613443],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.62663027, 0.48392855, 1.95932498],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.75987481, 1.39893232, 0.73327678]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ test_sklearn_compatible_estimator[AnalogRegression()-check_methods_subset_invariance] _\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | estimator = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | check = functools.partial(<function check_methods_subset_invariance at 0x7f5397fcb040>, 'AnalogRegression')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @parametrize_with_checks(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # Regressors\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdPrecipitation(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='difference', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='ratio', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # transformers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             LinearTrendTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             CunnaneTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMapper(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_sklearn_compatible_estimator(estimator, check):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       check(estimator)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:53: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/_testing.py:188: in wrapper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     return fn(*args, **kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:1359: in check_methods_subset_invariance\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     result_full, result_by_batch = _apply_on_subsets(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:1311: in _apply_on_subsets\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     result_full = func(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[1.64644051, 2.1455681 , 1.80829013],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [1.63464955, 1.2709644 , 1.93768234],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [1.31276163, 2.675319...54, 2.96512151, 0.30613443],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.62663027, 0.48392855, 1.95932498],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.75987481, 1.39893232, 0.73327678]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | __ test_sklearn_compatible_estimator[AnalogRegression()-check_dict_unchanged] __\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | estimator = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | check = functools.partial(<function check_dict_unchanged at 0x7f5397fc8b80>, 'AnalogRegression')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @parametrize_with_checks(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # Regressors\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdPrecipitation(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='difference', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='ratio', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # transformers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             LinearTrendTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             CunnaneTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMapper(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_sklearn_compatible_estimator(estimator, check):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       check(estimator)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:53: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/_testing.py:188: in wrapper\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     return fn(*args, **kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:1215: in check_dict_unchanged\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     getattr(estimator, method)(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[1.09762701, 1.43037873, 1.20552675],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [1.08976637, 0.8473096 , 1.29178823],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.87517442, 1.783546...03, 1.97674768, 0.20408962],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.41775351, 0.32261904, 1.30621665],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [0.50658321, 0.93262155, 0.48885118]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | __ test_sklearn_compatible_estimator[AnalogRegression()-check_fit_idempotent] __\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | estimator = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | check = functools.partial(<function check_fit_idempotent at 0x7f5397fd4f70>, 'AnalogRegression')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @parametrize_with_checks(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # Regressors\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdPrecipitation(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='difference', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(kind='ratio', n_endpoints=2),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # transformers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             LinearTrendTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             CunnaneTransformer(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMapper(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_sklearn_compatible_estimator(estimator, check):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       check(estimator)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:53: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:3653: in check_fit_idempotent\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     result = {\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:3654: in <dictcomp>\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     method: getattr(estimator, method)(X_test)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[ 98.92924738, 101.05445173],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 99.36567791,  99.63725883],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [100.3130677 ,  99.14590426],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        ...56146],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [100.8644362 ,  99.25783498],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [100.3563664 , 100.70657317],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 98.83485016, 100.90082649]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | __________________________ test_linear_model[model2] ___________________________\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | model = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @pytest.mark.parametrize(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         'model',\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             BcsdTemperature(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureAnalog(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             AnalogRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             PureRegression(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             ZScoreRegressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(extrapolate='min'),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(extrapolate='max'),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(extrapolate='both'),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             QuantileMappingReressor(extrapolate='1to1'),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(extrapolate='min'),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(extrapolate='max'),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(extrapolate='both'),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             EquidistantCdfMatcher(extrapolate='1to1'),\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_linear_model(model):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         n = 365\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # TODO: add test for time other time ranges (e.g. < 365 days)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         index = pd.date_range('2019-01-01', periods=n)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = pd.DataFrame({'foo': np.sin(np.linspace(-10 * np.pi, 10 * np.pi, n)) * 10}, index=index)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         y = X + 2\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         model.fit(X, y)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       y_hat = model.predict(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:141: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[ 1.22464680e-14],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 1.71759053e+00],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 3.38413080e+00],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 4.95008786e+00],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 6.368...36891829e+00],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-4.95008786e+00],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-3.38413080e+00],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-1.71759053e+00],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-1.22464680e-14]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _____________ test_models_with_multiple_features[AnalogRegression] _____________\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | sample_X_y = (                     foo       bar\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-01-01  1.224647e-14  0.967297\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-01-02  1.717591e+00  0.081175\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-01-03  ...8\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-12-29   -1.384131\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-12-30    0.282409\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-12-31    2.000000\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Freq: D, Name: foo, Length: 365, dtype: float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | model_cls = <class 'skdownscale.pointwise_models.gard.AnalogRegression'>\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @pytest.mark.parametrize(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         'model_cls',\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         [PureAnalog, AnalogRegression, PureRegression],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_models_with_multiple_features(sample_X_y, model_cls):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X, y = sample_X_y\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         model = model_cls()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         model.fit(X, y)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       y_hat = model.predict(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:153: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[ 1.22464680e-14,  9.67296957e-01],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 1.71759053e+00,  8.11748575e-02],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 3.38413080e+00,  9.4926....38413080e+00,  2.79163169e-01],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-1.71759053e+00,  6.24855061e-01],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-1.22464680e-14,  5.63570321e-01]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | ___________________ test_gard_analog_regression_models[None] ___________________\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | sample_X_y = (                     foo       bar\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-01-01  1.224647e-14  0.967297\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-01-02  1.717591e+00  0.081175\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-01-03  ...8\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-12-29   -1.384131\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-12-30    0.282409\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-12-31    2.000000\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Freq: D, Name: foo, Length: 365, dtype: float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | thresh = None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @pytest.mark.parametrize('thresh', [None, 3])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_gard_analog_regression_models(sample_X_y, thresh):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X, y = sample_X_y\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         model = AnalogRegression(thresh=thresh)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         model.fit(X, y)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       out = model.predict(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:192: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression()\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[ 1.22464680e-14,  9.67296957e-01],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 1.71759053e+00,  8.11748575e-02],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 3.38413080e+00,  9.4926....38413080e+00,  2.79163169e-01],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-1.71759053e+00,  6.24855061e-01],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-1.22464680e-14,  5.63570321e-01]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | ____________________ test_gard_analog_regression_models[3] _____________________\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | sample_X_y = (                     foo       bar\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-01-01  1.224647e-14  0.967297\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-01-02  1.717591e+00  0.081175\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-01-03  ...8\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-12-29   -1.384131\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-12-30    0.282409\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | 2019-12-31    2.000000\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Freq: D, Name: foo, Length: 365, dtype: float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | thresh = 3\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     @pytest.mark.parametrize('thresh', [None, 3])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def test_gard_analog_regression_models(sample_X_y, thresh):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X, y = sample_X_y\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         model = AnalogRegression(thresh=thresh)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         model.fit(X, y)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >       out = model.predict(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py:192: \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | self = AnalogRegression(thresh=3)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | X = array([[ 1.22464680e-14,  9.67296957e-01],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 1.71759053e+00,  8.11748575e-02],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [ 3.38413080e+00,  9.4926....38413080e+00,  2.79163169e-01],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-1.71759053e+00,  6.24855061e-01],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |        [-1.22464680e-14,  5.63570321e-01]])\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     def predict(self, X):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"Predict using the AnalogRegression model\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Parameters\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         ----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X : DataFrame, shape (n_samples, 1)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Samples.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         Returns\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         -------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         C : pd.DataFrame, shape (n_samples, self.n_outputs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             Returns predicted values, including the mean prediction, exceedance probability, and prediction error\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         \"\"\"\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # validate input data\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         return_df = isinstance(X, pd.DataFrame)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         check_is_fitted(self)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         X = check_array(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         # not used if self.thresh = None, instantiating to keep the code clean\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_kwargs = default_none_kwargs(self.logistic_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         logistic_model = LogisticRegression(**logistic_kwargs) if self.thresh is not None else None\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_kwargs = default_none_kwargs(self.lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         lr_model = LinearRegression(**lr_kwargs)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         out = np.empty((len(X), self.n_outputs), dtype=np.float64)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |         for i in range(len(X)):\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             # predict for this time step\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | >           out[i] = self._predict_one_step(\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 logistic_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 lr_model,\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |                 X[None, i],\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |             )\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | E           ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py:165: ValueError\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | =============================== warnings summary ===============================\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_grouping.py::test_groupers\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/pangeo-data-scikit-downscale/skdownscale/pointwise_models/grouping.py:121: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     temp_groups = np.zeros((n, n), dtype=np.bool)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py: 30 warnings\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/pangeo-data-scikit-downscale/skdownscale/pointwise_models/gard.py:65: UserWarning: length of X is less than n_analogs, setting n_analogs = len(X)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     warnings.warn('length of X is less than n_analogs, setting n_analogs = len(X)')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py: 33 warnings\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/pangeo-data-scikit-downscale/skdownscale/pointwise_models/base.py:16: UserWarning: X and y do not have pandas DateTimeIndexes, making one up...\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     warnings.warn('X and y do not have pandas DateTimeIndexes, making one up...')\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model0]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model1]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model2]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model3]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model[model4]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_linear_model_prec[BcsdPrecipitation]\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_zscore_scale\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_zscore_shift\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_BcsdTemperature_nasanex\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     y = column_or_1d(y, warn=True)\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_EquidistantCdfMatcher\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py::test_EquidistantCdfMatcher\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |   <__array_function__ internals>:200: RuntimeWarning: invalid value encountered in cast\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/pangeo-data-scikit-downscale/test-reports/junit.xml -\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | ---------- coverage: platform linux, python 3.8.11-final-0 -----------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | Name                                        Stmts   Miss  Cover\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | ---------------------------------------------------------------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | setup.py                                        8      8     0%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/__init__.py                         5      0   100%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/__init__.py        9      0   100%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/arrm.py           71     56    21%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/base.py           39      8    79%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/bcsd.py          122     20    84%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/core.py          178    156    12%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/gard.py          179      9    95%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/groupers.py       51      4    92%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/grouping.py       46     22    52%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/quantile.py      266     81    70%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/trend.py          27      0   100%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/utils.py          28     13    54%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/pointwise_models/zscore.py         86      0   100%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/__init__.py                   46     24    48%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_grouping.py              17      3    82%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_models.py     193     10    95%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | skdownscale/test/test_pointwise_runner.py      56     49    12%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | ---------------------------------------------------------------\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | TOTAL                                        1427    463    68%\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | \n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | =========================== short test summary info ============================\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_grouping.py::test_groupers - AttributeError: module 'numpy' has no attribute 'bool'.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | `np.bool` was a deprecated alias for the builtin `bool`. To avoid this error in existing code, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   |     https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_dtypes] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_dtype_object] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_estimators_pickle] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_regressor_data_not_an_array] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_supervised_y_2d] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_regressors_int] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_methods_sample_order_invariance] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_methods_subset_invariance] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_dict_unchanged] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_sklearn_compatible_estimator[AnalogRegression()-check_fit_idempotent] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_linear_model[model2] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_models_with_multiple_features[AnalogRegression] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_gard_analog_regression_models[None] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | FAILED skdownscale/test/test_pointwise_models.py::test_gard_analog_regression_models[3] - ValueError: setting an array element with a sequence. The requested array would exceed the maximum number of dimension of 1.\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   | = 15 failed, 249 passed, 1 skipped, 191 xfailed, 8 xpassed, 75 warnings in 56.39s =\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build]   \u274c  Failure - Main Running Tests\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build] exitcode '1': failure\n[09d1fe33-3d98-44f6-82d2-310d084f1b97/3.8-build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job '${{ matrix.python-version }}-build' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/pangeo-data-scikit-downscale/.github/workflows/main-crawler.yaml",
        "build_tool": "pytest",
        "elapsed_time": 367.4723801612854
    }
}