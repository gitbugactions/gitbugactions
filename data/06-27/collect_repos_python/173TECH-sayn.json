{
    "repository": "173TECH/sayn",
    "stars": 113,
    "language": "python",
    "size": 4493,
    "clone_url": "https://github.com/173TECH/sayn.git",
    "timestamp": "2023-07-01T14:49:32.117627Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_cli",
                "name": "test_simple_run",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_simple_compile",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_run_one_task",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_run_two_tasks_old",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_run_two_tasks_new",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_compile_one_task",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_compile_two_tasks_old",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_compile_two_tasks_new",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_run_debug",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_compile_debug",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_run_debug_multitasks",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_compile_debug_multitasks",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_run_full",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_compile_full",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_run_exclude",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_compile_exclude",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_run_include_exclude",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_cli",
                "name": "test_compile_include_exclude",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_valid01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_valid02",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_missing_parents01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_cycle01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_cycle02",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_cycle03",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_topological_sort01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_topological_sort02",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_upstream01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_downstream02",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_downstream03",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_downstream04",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_upstream05",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_query00",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_query01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_query02",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_query03",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_query04",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_cycle05",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dag",
                "name": "test_query06",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_init",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_database_input_stringify",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_schema_input_stringify",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_table_input_stringify",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_override",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_from_prod_database_input_stringify",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_from_prod_schema_input_stringify",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_from_prod_table_input_stringify",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_from_prod_override",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_from_string",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_from_string_reference_level_schema",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_from_string_reference_level_database",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_db_object",
                "name": "test_object_from_string_level_error",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ddl",
                "name": "test_ddl_empty[sqlite]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ddl",
                "name": "test_ddl_cols01[sqlite]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ddl",
                "name": "test_ddl_cols02[sqlite]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ddl",
                "name": "test_ddl_cols03[sqlite]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ddl",
                "name": "test_ddl_cols04[sqlite]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ddl",
                "name": "test_ddl_cols05[sqlite]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ddl",
                "name": "test_ddl_cols06[sqlite]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ddl",
                "name": "test_ddl_cols07[sqlite]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ddl",
                "name": "test_ddl_cols08[sqlite]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_project",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_project",
                "name": "test_project_err_no_tasks",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sayn_init",
                "name": "test_sayn_init_contents",
                "time": 0.625,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sayn_init",
                "name": "test_sayn_run_default",
                "time": 0.721,
                "results": [
                    {
                        "result": "Failure",
                        "message": "subprocess.CalledProcessError: Command 'sayn run' returned non-zero exit status 255.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_sayn_init",
                "name": "test_sayn_run_prod",
                "time": 0.793,
                "results": [
                    {
                        "result": "Failure",
                        "message": "subprocess.CalledProcessError: Command 'sayn run -p prod' returned non-zero exit status 255.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_correct_01",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_correct_02",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_error_profile01",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_error_profile02",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_error_consistency_01",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_missing_props01",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_missing_props02",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_env_01",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_env_02",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_env_03",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_env_04",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_settings",
                "name": "test_env_05",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_table[sqlite]",
                "time": 0.064,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_view[sqlite]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_incremental[sqlite]",
                "time": 0.057,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_compile[sqlite]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_param[sqlite]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_config_error1[sqlite]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_config_error2[sqlite]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_config_error3[sqlite]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_run_error[sqlite]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_table_db_dst[sqlite]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_table_wrong_db_dst[sqlite]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_run_ddl_columns[sqlite]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_run_ddl_diff_col_order[sqlite]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_task_run_ddl_diff_col_order_bq",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "No DB type supported by this test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_schemas01",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "No DB type supported by this test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_schemas_error01[sqlite]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_schemas02",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "No DB type supported by this test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_schemas_error02[sqlite]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_test_names[sqlite]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_test_lists[sqlite]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_autosql",
                "name": "test_autosql_test_values[sqlite]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_task[src:sqlite,dst:sqlite]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_task_ddl[src:sqlite,dst:sqlite]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_task_ddl_bq",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "No DB type supported by this test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_task_ddl_rename[src:sqlite,dst:sqlite]",
                "time": 0.024,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_task_error[src:sqlite,dst:sqlite]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_task_incremental[src:sqlite,dst:sqlite]",
                "time": 0.041,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_task_incremental2[src:sqlite,dst:sqlite]",
                "time": 0.082,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_task_dst_db[src:sqlite,dst:sqlite]",
                "time": 0.083,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_task_wrong_dst_db[src:sqlite,dst:sqlite]",
                "time": 0.076,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_schemas01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "No DB type supported by this test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_schemas_error01[src:sqlite,dst:sqlite]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_schemas02",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "No DB type supported by this test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_schemas_error02[src:sqlite,dst:sqlite]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_append01[src:sqlite,dst:sqlite]",
                "time": 0.037,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_append02[src:sqlite,dst:sqlite]",
                "time": 0.043,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_copy",
                "name": "test_copy_append03[src:sqlite,dst:sqlite]",
                "time": 0.034,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_python",
                "name": "test_python",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_python",
                "name": "test_python_task_err1",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_python",
                "name": "test_python_task_err2",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_simple01",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_simple02",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_simple03",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_simple04",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_group01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_tag01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_error_identifier01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_error_identifier02",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_error_identifier03",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_full_query02",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_query",
                "name": "test_full_query03",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_table[sqlite]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_view[sqlite]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_incremental[sqlite]",
                "time": 0.105,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_script_task[sqlite]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_script_task_compile[sqlite]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_script_task_param[sqlite]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_script_task_param_err[sqlite]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_script_task_run_err[sqlite]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_script_task_run_multi_statements[sqlite]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_compile[sqlite]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_param[sqlite]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_config_error1[sqlite]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_config_error2[sqlite]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_config_error3[sqlite]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_run_error[sqlite]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_table_db_dst[sqlite]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_table_wrong_db_dst[sqlite]",
                "time": 0.063,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_run_ddl_columns[sqlite]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_run_ddl_diff_col_order[sqlite]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_task_run_ddl_diff_col_order_bq",
                "time": 0.011,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "No DB type supported by this test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_schemas01",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "No DB type supported by this test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_schemas_error01[sqlite]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_schema_reference_level_periods[sqlite]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_database_reference_level_periods[sqlite]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_schemas02",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "No DB type supported by this test",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_schemas_error02[sqlite]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_test_names[sqlite]",
                "time": 0.053,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_test_lists[sqlite]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_sql",
                "name": "test_sql_test_values[sqlite]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Failure",
                        "message": "sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[SQL: SELECT \"\" AS table_schema\n                                    , \"\" AS table_catalog\n                                    , name AS table_name\n                                    , type AS table_type\n                                 FROM (SELECT * FROM sqlite_schema UNION ALL\n                                 SELECT * FROM sqlite_temp_schema)\n                            ]\n(Background on this error at: https://sqlalche.me/e/14/e3q8)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_test",
                "name": "test_custom_test[sqlite]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_task_test",
                "name": "test_custom_test_fail[sqlite]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting] \ud83d\ude80  Start image=crawlergpt:latest\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/173TECH-sayn] user=0 workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting] \u2b50 Run Main actions/checkout@v3\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2705  Success - Main actions/checkout@v3\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting] \u2b50 Run Main Set up Python 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udc33  docker cp src=/tmp/act-cache/72d7491f-8f45-4b1e-aa2f-e631e811e3d1/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2753  ::group::Installed versions\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::Semantic version spec of 3.10 is 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? false\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::evaluating 6 versions\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::match not found\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Version 3.10 was not found in the local cache\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::Getting manifest from actions/python-versions@main\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::set auth\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.12.0-beta.3 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.12.0-beta.2 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.12.0-beta.1 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.12.0-alpha.7 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.12.0-alpha.6 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.12.0-alpha.5 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.12.0-alpha.4 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.12.0-alpha.3 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.12.0-alpha.2 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.12.0-alpha.1 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.4 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.3 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.2 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.1 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-rc.2 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-rc.1 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-beta.5 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-beta.4 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-beta.3 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-beta.2 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-beta.1 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-alpha.7 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-alpha.6 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-alpha.5 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-alpha.4 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-alpha.3 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-alpha.2 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.11.0-alpha.1 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::check 3.10.12 satisfies 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::x64===x64 && darwin===linux\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::x64===x64 && linux===linux\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::matched 3.10.12\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Version 3.10 is available for downloading\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Download from \"https://github.com/actions/python-versions/releases/download/3.10.12-5200619051/python-3.10.12-linux-20.04-x64.tar.gz\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::Downloading https://github.com/actions/python-versions/releases/download/3.10.12-5200619051/python-3.10.12-linux-20.04-x64.tar.gz\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::Destination /tmp/741dea25-419b-4865-8b9c-99c454712f37\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::set auth\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::download complete\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Extract downloaded archive\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::Checking tar --version\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/42a396a1-e7b6-485d-9e9c-fc7d4e700e91 -f /tmp/741dea25-419b-4865-8b9c-99c454712f37\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Execute installation script\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Check if Python hostedtoolcache folder exist...\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Create Python 3.10.12 folder\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Copy Python binaries to hostedtoolcache folder\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Create additional symlinks (Required for the UsePythonVersion Azure Pipelines task and the setup-python GitHub Action)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Upgrading pip...\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Looking in links: /tmp/tmpw1gbamjm\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages (65.5.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages (23.0.1)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Collecting pip\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 21.2 MB/s eta 0:00:00\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Installing collected packages: pip\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Successfully installed pip-23.1.2\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Create complete file\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? false\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.10.12\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::evaluating 7 versions\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::matched: 3.10.12\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.10.12/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udcac  ::debug::Found tool in cache Python 3.10.12 x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Successfully set up CPython (3.10.12)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2753  ::endgroup::\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2705  Success - Main Set up Python 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.10.12/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.10.12/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.10.12/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.10.12/x64/lib\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.10.12/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.10.12/x64/lib/pkgconfig\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2699  ::set-output:: python-version=3.10.12\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.10.12/x64/bin/python\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.10.12/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.10.12/x64/bin\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting] \u2b50 Run Main Linting\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Collecting pre-commit\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |   Downloading pre_commit-3.3.3-py2.py3-none-any.whl (202 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 202.8/202.8 kB 1.8 MB/s eta 0:00:00\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Collecting cfgv>=2.0.0 (from pre-commit)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |   Downloading cfgv-3.3.1-py2.py3-none-any.whl (7.3 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Collecting identify>=1.0.0 (from pre-commit)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |   Downloading identify-2.5.24-py2.py3-none-any.whl (98 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 98.8/98.8 kB 2.5 MB/s eta 0:00:00\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Collecting nodeenv>=0.11.1 (from pre-commit)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |   Downloading nodeenv-1.8.0-py2.py3-none-any.whl (22 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Collecting pyyaml>=5.1 (from pre-commit)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |   Downloading PyYAML-6.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (682 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 682.2/682.2 kB 27.2 MB/s eta 0:00:00\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Collecting virtualenv>=20.10.0 (from pre-commit)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.3/3.3 MB 14.4 MB/s eta 0:00:00\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages (from nodeenv>=0.11.1->pre-commit) (65.5.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Collecting distlib<1,>=0.3.6 (from virtualenv>=20.10.0->pre-commit)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 468.5/468.5 kB 23.0 MB/s eta 0:00:00\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Collecting filelock<4,>=3.12 (from virtualenv>=20.10.0->pre-commit)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Collecting platformdirs<4,>=3.5.1 (from virtualenv>=20.10.0->pre-commit)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Installing collected packages: distlib, pyyaml, platformdirs, nodeenv, identify, filelock, cfgv, virtualenv, pre-commit\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | Successfully installed cfgv-3.3.1 distlib-0.3.6 filelock-3.12.2 identify-2.5.24 nodeenv-1.8.0 platformdirs-3.8.0 pre-commit-3.3.3 pyyaml-6.0 virtualenv-20.23.1\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [notice] A new release of pip is available: 23.0.1 -> 23.1.2\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [notice] To update, run: pip install --upgrade pip\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [INFO] Initializing environment for https://github.com/psf/black.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [INFO] Initializing environment for https://github.com/pycqa/flake8.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [INFO] Installing environment for https://github.com/psf/black.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [INFO] Once installed this environment will be reused.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [INFO] This may take a few minutes...\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [INFO] Installing environment for https://github.com/pycqa/flake8.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [INFO] Once installed this environment will be reused.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | [INFO] This may take a few minutes...\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | black....................................................................Passed\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   | flake8...................................................................Passed\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2705  Success - Main Linting\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting] \u2b50 Run Post Set up Python 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting]   \u2705  Success - Post Set up Python 3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Linting] \ud83c\udfc1  Job succeeded\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8] \ud83d\ude80  Start image=crawlergpt:latest\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/173TECH-sayn] user=0 workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8] \ud83e\uddea  Matrix: map[os:Ubuntu python-version:3.8]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8] \u2b50 Run Main actions/checkout@v3\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2705  Success - Main actions/checkout@v3\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8] \u2b50 Run Main Setup Python 3.8\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker cp src=/tmp/act-cache/72d7491f-8f45-4b1e-aa2f-e631e811e3d1/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2753  ::group::Installed versions\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::isExplicit: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::explicit? false\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::explicit? true\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::evaluating 6 versions\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::matched: 3.8.11\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Successfully set up CPython (3.8.11)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2753  ::endgroup::\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2705  Success - Main Setup Python 3.8\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib/pkgconfig\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::set-output:: python-version=3.8.11\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8] \u2b50 Run Main Get full Python version\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/full-python-version.sh] user= workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2699  ::set-output:: version=3-8-11-final-0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2705  Success - Main Get full Python version\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8] \u2b50 Run Main Install Poetry\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (56.0.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting setuptools\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading setuptools-68.0.0-py3-none-any.whl (804 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Installing collected packages: setuptools\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Attempting uninstall: setuptools\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     Found existing installation: setuptools 56.0.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     Uninstalling setuptools-56.0.0:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |       Successfully uninstalled setuptools-56.0.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Successfully installed setuptools-68.0.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting poetry==1.3.2\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading poetry-1.3.2-py3-none-any.whl (218 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting requests-toolbelt<0.11.0,>=0.9.1\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading requests_toolbelt-0.10.1-py2.py3-none-any.whl (54 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting importlib-metadata<5.0,>=4.4\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading importlib_metadata-4.13.0-py3-none-any.whl (23 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting keyring<24.0.0,>=23.9.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading keyring-23.13.1-py3-none-any.whl (37 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting cleo<3.0.0,>=2.0.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading cleo-2.0.1-py3-none-any.whl (77 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting virtualenv!=20.4.5,!=20.4.6,<21.0.0,>=20.4.3\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting poetry-core==1.4.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading poetry_core-1.4.0-py3-none-any.whl (546 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting jsonschema<5.0.0,>=4.10.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading jsonschema-4.17.3-py3-none-any.whl (90 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting trove-classifiers>=2022.5.19\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading trove_classifiers-2023.5.24-py3-none-any.whl (13 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting pkginfo<2.0,>=1.5\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading pkginfo-1.9.6-py3-none-any.whl (30 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting html5lib<2.0,>=1.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading html5lib-1.1-py2.py3-none-any.whl (112 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting urllib3<2.0.0,>=1.26.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting tomlkit!=0.11.2,!=0.11.3,<1.0.0,>=0.11.1\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading tomlkit-0.11.8-py3-none-any.whl (35 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting requests<3.0,>=2.18\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting tomli<3.0.0,>=2.0.1\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting crashtest<0.5.0,>=0.4.1\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading crashtest-0.4.1-py3-none-any.whl (7.6 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting lockfile<0.13.0,>=0.12.2\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading lockfile-0.12.2-py2.py3-none-any.whl (13 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting poetry-plugin-export<2.0.0,>=1.2.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading poetry_plugin_export-1.4.0-py3-none-any.whl (10 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting shellingham<2.0,>=1.5\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading shellingham-1.5.0.post1-py2.py3-none-any.whl (9.4 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting packaging>=20.4\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting platformdirs<3.0.0,>=2.5.2\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading platformdirs-2.6.2-py3-none-any.whl (14 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting filelock<4.0.0,>=3.8.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting cachecontrol[filecache]<0.13.0,>=0.12.9\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading CacheControl-0.12.14-py2.py3-none-any.whl (21 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting dulwich<0.21.0,>=0.20.46\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading dulwich-0.20.50-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (502 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting pexpect<5.0.0,>=4.7.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading pexpect-4.8.0-py2.py3-none-any.whl (59 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting msgpack>=0.5.2\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading msgpack-1.0.5-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (322 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting rapidfuzz<3.0.0,>=2.2.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading rapidfuzz-2.15.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting six>=1.9\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting webencodings\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting zipp>=0.5\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting importlib-resources>=1.4.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading importlib_resources-5.12.0-py3-none-any.whl (36 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading pyrsistent-0.19.3-py3-none-any.whl (57 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting pkgutil-resolve-name>=1.3.10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading pkgutil_resolve_name-1.3.10-py3-none-any.whl (4.7 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting attrs>=17.4.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting SecretStorage>=3.2\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading SecretStorage-3.3.3-py3-none-any.whl (15 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting jeepney>=0.4.2\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading jeepney-0.8.0-py3-none-any.whl (48 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting jaraco.classes\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading jaraco.classes-3.2.3-py3-none-any.whl (6.0 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting ptyprocess>=0.5\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading ptyprocess-0.7.0-py2.py3-none-any.whl (13 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting poetry-plugin-export<2.0.0,>=1.2.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading poetry_plugin_export-1.3.1-py3-none-any.whl (10 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting charset-normalizer<4,>=2\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading charset_normalizer-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (195 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting idna<4,>=2.5\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting certifi>=2017.4.17\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting cryptography>=2.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading cryptography-41.0.1-cp37-abi3-manylinux_2_28_x86_64.whl (4.3 MB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting cffi>=1.12\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading cffi-1.15.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (442 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting pycparser\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting distlib<1,>=0.3.6\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting virtualenv!=20.4.5,!=20.4.6,<21.0.0,>=20.4.3\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading virtualenv-20.23.0-py3-none-any.whl (3.3 MB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading virtualenv-20.22.0-py3-none-any.whl (3.2 MB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading virtualenv-20.21.1-py3-none-any.whl (8.7 MB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Collecting more-itertools\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   Downloading more_itertools-9.1.0-py3-none-any.whl (54 kB)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Installing collected packages: pycparser, urllib3, idna, charset-normalizer, cffi, certifi, zipp, requests, msgpack, more-itertools, jeepney, cryptography, webencodings, six, SecretStorage, rapidfuzz, pyrsistent, ptyprocess, poetry-core, platformdirs, pkgutil-resolve-name, lockfile, jaraco.classes, importlib-resources, importlib-metadata, filelock, distlib, crashtest, cachecontrol, attrs, virtualenv, trove-classifiers, tomlkit, tomli, shellingham, requests-toolbelt, poetry-plugin-export, pkginfo, pexpect, packaging, keyring, jsonschema, html5lib, dulwich, cleo, poetry\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Successfully installed SecretStorage-3.3.3 attrs-23.1.0 cachecontrol-0.12.14 certifi-2023.5.7 cffi-1.15.1 charset-normalizer-3.1.0 cleo-2.0.1 crashtest-0.4.1 cryptography-41.0.1 distlib-0.3.6 dulwich-0.20.50 filelock-3.12.2 html5lib-1.1 idna-3.4 importlib-metadata-4.13.0 importlib-resources-5.12.0 jaraco.classes-3.2.3 jeepney-0.8.0 jsonschema-4.17.3 keyring-23.13.1 lockfile-0.12.2 more-itertools-9.1.0 msgpack-1.0.5 packaging-23.1 pexpect-4.8.0 pkginfo-1.9.6 pkgutil-resolve-name-1.3.10 platformdirs-2.6.2 poetry-1.3.2 poetry-core-1.4.0 poetry-plugin-export-1.3.1 ptyprocess-0.7.0 pycparser-2.21 pyrsistent-0.19.3 rapidfuzz-2.15.1 requests-2.31.0 requests-toolbelt-0.10.1 shellingham-1.5.0.post1 six-1.16.0 tomli-2.0.1 tomlkit-0.11.8 trove-classifiers-2023.5.24 urllib3-1.26.16 virtualenv-20.21.1 webencodings-0.5.1 zipp-3.15.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2705  Success - Main Install Poetry\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8] \u2b50 Run Main Install dependencies\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Creating virtualenv sayn-ixHP8fS--py3.8 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Installing dependencies from lock file\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Package operations: 55 installs, 0 updates, 1 removal\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Removing setuptools (67.6.1)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing certifi (2022.12.7)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing charset-normalizer (2.0.12)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing idna (3.4)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing six (1.16.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing urllib3 (1.26.15)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing zipp (3.15.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing importlib-metadata (6.1.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing markupsafe (2.1.2)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing python-dateutil (2.8.2)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pyyaml (6.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing requests (2.31.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing click (8.0.4)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing ghp-import (2.1.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing jinja2 (3.1.2)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing markdown (3.3.7)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing mergedeep (1.3.4)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing packaging (23.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pyyaml-env-tag (0.1)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing watchdog (3.0.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing attrs (22.2.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing colorama (0.4.6)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing greenlet (2.0.2)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing iniconfig (2.0.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing exceptiongroup (1.1.1)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing mkdocs (1.4.2)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pluggy (1.0.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing tomli (2.0.1)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing typing-extensions (4.5.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing log-symbols (0.0.14)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing mccabe (0.7.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing mkdocs-material-extensions (1.1.1)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing mypy-extensions (1.0.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pathspec (0.11.1)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing platformdirs (3.2.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pyflakes (3.0.1)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pygments (2.14.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pymdown-extensions (10.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pycodestyle (2.10.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pytest (7.2.2)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing spinners (0.0.24)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing ruamel-yaml-clib (0.2.7)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing mkdocs-autorefs (0.4.1)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing sqlalchemy (1.4.47)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing tornado (6.3.2)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing termcolor (2.2.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing black (22.12.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing flake8 (6.0.0)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing livereload (2.6.3)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing mkdocs-material (8.5.11)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing halo (0.0.31)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pydantic (1.9.2)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing pytest-sugar (0.9.6)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing orjson (3.8.9)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing ruamel-yaml (0.17.21)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   \u2022 Installing mkdocstrings (0.19.1)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | Installing the current project: sayn (0.6.10)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u2705  Success - Main Install dependencies\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8] \u2b50 Run Main Run pytest\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5.sh] user= workdir=\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ============================= test session starts ==============================\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | platform linux -- Python 3.8.11, pytest-7.2.2, pluggy-1.0.0\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/173TECH-sayn, configfile: pytest.ini, testpaths: tests\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | plugins: sugar-0.9.6\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | collected 159 items\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_cli.py ..................                                     [ 11%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_dag.py ....................                                   [ 23%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_db_object.py .............                                    [ 32%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_ddl.py .........                                              [ 37%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_project.py ..                                                 [ 38%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_sayn_init.py .FF                                              [ 40%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_settings.py ............                                      [ 48%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py FFFFF...FF.FFss.s.FFF                         [ 61%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_copy.py FFsF.FFF.s.s.F.F                                 [ 71%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_python.py ...                                            [ 73%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_query.py ...........                                     [ 80%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py FFF......FF...FF.FFss.FFs.FFF                     [ 98%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_test.py ..                                               [100%]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | =================================== FAILURES ===================================\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ____________________________ test_sayn_run_default _____________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_root_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/project010')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sayn_run_default(tmp_root_path):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with inside_dir(str(tmp_root_path / project_name)):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           run_sayn(\"run\")\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_sayn_init.py:31: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/__init__.py:58: in run_sayn\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return subprocess.check_output(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | popenargs = ('sayn run',), kwargs = {'shell': True, 'stderr': -2, 'stdout': -1}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | process = <subprocess.Popen object at 0x7faf48ed0eb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | stdout = b'Starting sayn \\n  Run ID: 226b9024-a21d-48b9-9523-0ed792810a9a\\n  Project: project01\\n  Sayn version: 0.6.10\\n  Peri...M sqlite_temp_schema)\\n                            ]\\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\\n\\r'\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | stderr = None, retcode = 255\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def run(*popenargs,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         were captured.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         exception will be raised.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         There is an optional argument \"input\", allowing you to\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         it will be used internally.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         The other arguments are the same as for the Popen constructor.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if input is not None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if kwargs.get('stdin') is not None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             kwargs['stdin'] = PIPE\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if capture_output:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  'with capture_output.')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             kwargs['stdout'] = PIPE\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             kwargs['stderr'] = PIPE\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             except TimeoutExpired as exc:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 process.kill()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if _mswindows:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # Windows accumulates the output in a single blocking\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # read() call run on child threads, with the timeout\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # being done in a join() on those threads.  communicate()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # _after_ kill() is required to collect that and add it\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # to the exception.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # POSIX _communicate already populated the output so\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # far into the TimeoutExpired exception.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     process.wait()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 process.kill()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             retcode = process.poll()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if check and retcode:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                          output=stdout, stderr=stderr)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E               subprocess.CalledProcessError: Command 'sayn run' returned non-zero exit status 255.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ______________________________ test_sayn_run_prod ______________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_root_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/project010')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sayn_run_prod(tmp_root_path):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with inside_dir(str(tmp_root_path / project_name)):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           run_sayn(\"run\", \"-p\", \"prod\")\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_sayn_init.py:38: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/__init__.py:58: in run_sayn\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return subprocess.check_output(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:415: in check_output\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | input = None, capture_output = False, timeout = None, check = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | popenargs = ('sayn run -p prod',)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kwargs = {'shell': True, 'stderr': -2, 'stdout': -1}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | process = <subprocess.Popen object at 0x7faf48bce670>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | stdout = b'Starting sayn \\n  Run ID: 240344e6-e912-49bd-a134-00308f7b0bfd\\n  Project: project01\\n  Sayn version: 0.6.10\\n  Peri...M sqlite_temp_schema)\\n                            ]\\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\\n\\r'\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | stderr = None, retcode = 255\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def run(*popenargs,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         The returned instance will have attributes args, returncode, stdout and\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         If check is True and the exit code was non-zero, it raises a\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         CalledProcessError. The CalledProcessError object will have the return code\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         in the returncode attribute, and output & stderr attributes if those streams\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         were captured.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         exception will be raised.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         There is an optional argument \"input\", allowing you to\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         it will be used internally.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         The other arguments are the same as for the Popen constructor.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if input is not None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if kwargs.get('stdin') is not None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             kwargs['stdin'] = PIPE\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if capture_output:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  'with capture_output.')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             kwargs['stdout'] = PIPE\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             kwargs['stderr'] = PIPE\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with Popen(*popenargs, **kwargs) as process:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             except TimeoutExpired as exc:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 process.kill()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if _mswindows:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # Windows accumulates the output in a single blocking\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # read() call run on child threads, with the timeout\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # being done in a join() on those threads.  communicate()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # _after_ kill() is required to collect that and add it\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # to the exception.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     exc.stdout, exc.stderr = process.communicate()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # POSIX _communicate already populated the output so\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     # far into the TimeoutExpired exception.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     process.wait()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 process.kill()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             retcode = process.poll()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if check and retcode:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >               raise CalledProcessError(retcode, process.args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                          output=stdout, stderr=stderr)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E               subprocess.CalledProcessError: Command 'sayn run -p prod' returned non-zero exit status 255.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/subprocess.py:516: CalledProcessError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _______________________ test_autosql_task_table[sqlite] ________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48f06340>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48bf8820>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48f06340>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48f06b80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f06c10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48f56f80>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48bf8820>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48f56f80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f06c10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_task_table_sqlite0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_task_table(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(tmp_path, used_objects, target_db, \"SELECT 1 AS x\") as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             result = task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert result.is_ok or result is None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:40: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48bf8820>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48f56f80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f06c10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ________________________ test_autosql_task_view[sqlite] ________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48e981f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48e9bd00>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48e981f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48e988b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48e98730>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf4894de30>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48e9bd00>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf4894de30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48e98730>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_task_view_sqlite_0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_task_view(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(tmp_path, used_objects, target_db, \"SELECT 1 AS x\") as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"view\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:58: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48e9bd00>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf4894de30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48e98730>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ____________________ test_autosql_task_incremental[sqlite] _____________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48bbc490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf489f31f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48bbc490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48bbcb80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48bbc5b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48975c00>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf489f31f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48975c00>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48bbc5b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_task_incremental_0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_task_incremental(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT * FROM source_table WHERE updated_at >= 2 OR updated_at IS NULL\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             {\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 \"source_table\": [\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 1, \"updated_at\": 1, \"name\": \"x\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 2, \"updated_at\": 2, \"name\": \"y1\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 3, \"updated_at\": None, \"name\": \"z\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 \"test_autosql_task\": [\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 1, \"updated_at\": 1, \"name\": \"x\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 2, \"updated_at\": None, \"name\": \"y\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             },\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"incremental\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 delete_key=\"id\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:96: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf489f31f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48975c00>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48bbc5b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ______________________ test_autosql_task_compile[sqlite] _______________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48886820>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf487f2f40>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48886820>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf488867c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488868b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf4891e180>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf487f2f40>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf4891e180>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488868b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_task_compile_sqli0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_task_compile(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT 1 AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             run_arguments={\"command\": \"compile\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:126: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf487f2f40>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf4891e180>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488868b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _______________________ test_autosql_task_param[sqlite] ________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48dbe9d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48fe7b20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48dbe9d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48dbefd0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48dbe490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48c168f0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48fe7b20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48c168f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48dbe490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_task_param_sqlite0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_task_param(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT {{number}} AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             task_params={\"number\": 1},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:147: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48fe7b20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48c168f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48dbe490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _____________________ test_autosql_task_run_error[sqlite] ______________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf490f8d30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4885e730>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf490f8d30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48f48100>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f48910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf489198f0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4885e730>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf489198f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f48910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_task_run_error_sq0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_task_run_error(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Tests failure with erratic sql\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT * FROM non_existing_table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:210: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4885e730>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf489198f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f48910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ____________________ test_autosql_task_table_db_dst[sqlite] ____________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf489e39a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48785640>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf489e39a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf489e3340>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489e31f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48919f80>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48785640>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48919f80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489e31f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_task_table_db_dst0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_task_table_db_dst(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Test autosql with db destination set\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(tmp_path, used_objects, target_db, \"SELECT 1 AS x\") as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"db\": \"target_db\", \"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:229: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48785640>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48919f80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489e31f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | __________________ test_autosql_task_run_ddl_columns[sqlite] ___________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48666e80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48a5eb20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48666e80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48666f10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48666eb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48916420>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48a5eb20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48916420>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48666eb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_task_run_ddl_colu0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     @pytest.mark.target_dbs([\"sqlite\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_task_run_ddl_columns(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(tmp_path, used_objects, target_db, \"SELECT 1 AS x\") as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[{\"name\": \"x\", \"type\": \"integer\"}],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:265: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48a5eb20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48916420>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48666eb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _______________ test_autosql_task_run_ddl_diff_col_order[sqlite] _______________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48f8e340>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48806b50>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48f8e340>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48f8e490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f8e910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48f56ea0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48806b50>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48f56ea0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f8e910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_task_run_ddl_diff0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     @pytest.mark.target_dbs([\"sqlite\", \"postgresql\", \"mysql\", \"redshift\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_task_run_ddl_diff_col_order(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Test that autosql with ddl columns creates a table with order similar to ddl definition\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT 1 AS y, '1' AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"name\": \"x\", \"type\": \"text\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"name\": \"y\", \"type\": \"int\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:344: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48806b50>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48f56ea0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f8e910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _______________________ test_autosql_test_names[sqlite] ________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48826910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4881a940>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48826910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48826220>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488264c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf4891eb90>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4881a940>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf4891eb90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488264c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_test_names_sqlite0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_test_names(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT 1 AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             run_arguments={\"command\": \"test\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[{\"name\": \"x\", \"tests\": [\"unique\", \"not_null\"]}],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:508: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4881a940>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf4891eb90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488264c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _______________________ test_autosql_test_lists[sqlite] ________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48754130>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf487dc430>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48754130>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48754070>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48754f70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a0c0a0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf487dc430>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a0c0a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48754f70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_test_lists_sqlite0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_test_lists(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT 1 AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             run_arguments={\"command\": \"test\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"name\": \"x\", \"tests\": [{\"name\": \"unique\"}, {\"name\": \"not_null\"}]}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 table_properties={},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 post_hook=[],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:534: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf487dc430>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a0c0a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48754f70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _______________________ test_autosql_test_values[sqlite] _______________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf4885f910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4871e910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf4885f910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf4885f190>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4885f460>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48919960>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4871e910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48919960>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4885f460>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_autosql_test_values_sqlit0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_autosql_test_values(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with autosql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT 1 AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             run_arguments={\"command\": \"test\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"test_autosql_task\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         \"name\": \"x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         \"tests\": [\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             {\"name\": \"unique\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             {\"name\": \"not_null\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             {\"name\": \"allowed_values\", \"allowed_values\": [1]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     }\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py:565: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4871e910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48919960>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4885f460>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ____________________ test_copy_task[src:sqlite,dst:sqlite] _____________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48841940>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48a73700>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48841940>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48841430>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48841460>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48924180>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48a73700>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48924180>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48841460>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | source_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_copy_task(source_db, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Testing copy task with no error\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with copy_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_data={\"source_table\": [{\"x\": 1}, {\"x\": 2}, {\"x\": 3}]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 source={\"db\": \"source_db\", \"table\": \"source_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"dst_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_copy.py:50: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48a73700>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48924180>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48841460>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | __________________ test_copy_task_ddl[src:sqlite,dst:sqlite] ___________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf488ae4f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48656940>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf488ae4f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf488ae2b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488aea90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf489b0ea0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48656940>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf489b0ea0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488aea90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | source_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     @pytest.mark.target_dbs([\"sqlite\", \"postgresql\", \"mysql\", \"redshift\", \"snowflake\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_copy_task_ddl(source_db, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Testing copy task with no error\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with copy_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_data={\"source_table\": [{\"x\": 1}, {\"x\": 2}, {\"x\": 3}]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 source={\"db\": \"source_db\", \"table\": \"source_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"dst_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[{\"name\": \"x\", \"type\": \"int\"}],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_copy.py:78: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48656940>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf489b0ea0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488aea90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _______________ test_copy_task_ddl_rename[src:sqlite,dst:sqlite] _______________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48a73b50>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4900a400>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48a73b50>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48a73070>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48768760>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a34420>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4900a400>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a34420>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48768760>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | source_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_copy_task_ddl_rename(source_db, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Testing copy task with no error\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with copy_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_data={\"source_table\": [{\"x\": 1}, {\"x\": 2}, {\"x\": 3}]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 source={\"db\": \"source_db\", \"table\": \"source_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"dst_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[{\"name\": \"x\", \"dst_name\": \"y\"}],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_copy.py:133: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4900a400>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a34420>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48768760>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ______________ test_copy_task_incremental[src:sqlite,dst:sqlite] _______________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf49017850>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48e458b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf49017850>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf490171f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf49017eb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48919960>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48e458b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48919960>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf49017eb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | source_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_copy_task_incremental(source_db, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Testing copy task with no error\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with copy_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_data={\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 \"source_table\": [\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 1, \"name\": \"x\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 2, \"name\": \"y\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 3, \"name\": \"z\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             },\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_data={\"dst_table\": [{\"id\": 1, \"name\": \"x\"}]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 source={\"db\": \"source_db\", \"table\": \"source_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"dst_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 incremental_key=\"id\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 delete_key=\"id\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_copy.py:183: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48e458b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48919960>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf49017eb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ______________ test_copy_task_incremental2[src:sqlite,dst:sqlite] ______________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48b1b070>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48ed0ee0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48b1b070>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48b1ba90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4900a0a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48ffdc70>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48ed0ee0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48ffdc70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4900a0a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | source_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_copy_task_incremental2(source_db, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Testing copy task with no error\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with copy_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_data={\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 \"source_table\": [\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 1, \"updated_at\": 2, \"name\": \"x1\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 2, \"updated_at\": None, \"name\": \"y\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             },\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_data={\"dst_table\": [{\"id\": 1, \"updated_at\": 1, \"name\": \"x\"}]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 source={\"db\": \"source_db\", \"table\": \"source_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"dst_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 incremental_key=\"updated_at\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 delete_key=\"id\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_copy.py:221: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48ed0ee0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48ffdc70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4900a0a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _________________ test_copy_task_dst_db[src:sqlite,dst:sqlite] _________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48e989d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4865b7f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48e989d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48e98c40>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48e98490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a342d0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4865b7f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a342d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48e98490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | source_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_copy_task_dst_db(source_db, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Testing copy task with set db destination\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with copy_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_data={\"source_table\": [{\"x\": 1}, {\"x\": 2}, {\"x\": 3}]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_data={\"dst_table\": [{\"id\": 1, \"updated_at\": 1, \"name\": \"x\"}]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 source={\"db\": \"source_db\", \"table\": \"source_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"db\": \"target_db\", \"table\": \"dst_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_copy.py:254: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4865b7f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a342d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48e98490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | __________________ test_copy_append01[src:sqlite,dst:sqlite] ___________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48514a90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48a12b80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48514a90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48514340>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48ddd5b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b425e0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48a12b80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b425e0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48ddd5b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | source_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_copy_append01(source_db, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with copy_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_data={\"source_table\": [{\"x\": 1}, {\"x\": 2}, {\"x\": 3}]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 source={\"db\": \"source_db\", \"table\": \"source_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"dst_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 incremental_key=\"x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 append=True,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_copy.py:379: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48a12b80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b425e0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48ddd5b0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | __________________ test_copy_append03[src:sqlite,dst:sqlite] ___________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf4861a0a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4895ac10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf4861a0a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf4861a610>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4861a340>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf489b0d50>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4895ac10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf489b0d50>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4861a340>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | source_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_copy_append03(source_db, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with copy_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             source_data={\"source_table\": [{\"x\": 1}, {\"x\": 2}, {\"x\": 3}]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 source={\"db\": \"source_db\", \"table\": \"source_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination={\"table\": \"dst_table\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 append=True,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_copy.py:427: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4895ac10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf489b0d50>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4861a340>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _________________________ test_sql_task_table[sqlite] __________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf488b5070>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf488b5e80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf488b5070>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf488b5d30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48881550>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48968ea0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf488b5e80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48968ea0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48881550>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_task_table_sqlite_0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_task_table(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(tmp_path, used_objects, target_db, \"SELECT 1 AS x\") as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             result = task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert result.is_ok or result is None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:44: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf488b5e80>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48968ea0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48881550>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | __________________________ test_sql_task_view[sqlite] __________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf488dc640>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf488dc700>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf488dc640>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf488e7c70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488e7b20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a19ab0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf488dc700>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a19ab0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488e7b20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_task_view_sqlite_0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_task_view(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(tmp_path, used_objects, target_db, \"SELECT 1 AS x\") as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"view\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:62: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf488dc700>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a19ab0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf488e7b20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ______________________ test_sql_task_incremental[sqlite] _______________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48b78f10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf488cc9a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48b78f10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48b783d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489f3f70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf490039d0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf488cc9a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf490039d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489f3f70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_task_incremental_sqli0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_task_incremental(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT * FROM source_table WHERE updated_at >= 2 OR updated_at IS NULL\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             {\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 \"source_table\": [\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 1, \"updated_at\": 1, \"name\": \"x\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 2, \"updated_at\": 2, \"name\": \"y1\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 3, \"updated_at\": None, \"name\": \"z\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 \"test_sql_task\": [\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 1, \"updated_at\": 1, \"name\": \"x\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"id\": 2, \"updated_at\": None, \"name\": \"y\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             },\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"incremental\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 delete_key=\"id\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:100: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf488cc9a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf490039d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489f3f70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ________________________ test_sql_task_compile[sqlite] _________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf486b41c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf486b4100>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf486b41c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48a58760>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48a587c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf49003e30>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf486b4100>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf49003e30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48a587c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_task_compile_sqlite_0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_task_compile(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT 1 AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             run_arguments={\"command\": \"compile\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:290: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf486b4100>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf49003e30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48a587c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _________________________ test_sql_task_param[sqlite] __________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf490d7d60>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4865e130>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf490d7d60>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf4865e4c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4865ea30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b2cb20>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4865e130>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b2cb20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4865ea30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_task_param_sqlite_0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_task_param(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT {{number}} AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             task_params={\"number\": 1},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:311: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4865e130>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b2cb20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4865ea30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _______________________ test_sql_task_run_error[sqlite] ________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf4881fdc0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4881f880>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf4881fdc0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf4881f760>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489568e0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b2c8f0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4881f880>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b2c8f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489568e0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_task_run_error_sqlite0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_task_run_error(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Tests failure with erratic sql\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT * FROM non_existing_table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:374: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4881f880>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b2c8f0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489568e0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ______________________ test_sql_task_table_db_dst[sqlite] ______________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48f99880>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48f99160>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48f99880>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48f99a00>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f99bb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b197a0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48f99160>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b197a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f99bb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_task_table_db_dst_sql0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_task_table_db_dst(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Test sql with db destination set\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(tmp_path, used_objects, target_db, \"SELECT 1 AS x\") as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 db=\"target_db\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:394: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48f99160>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b197a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f99bb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ____________________ test_sql_task_run_ddl_columns[sqlite] _____________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48fea490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48feadf0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48fea490>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48feaa60>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4861aee0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b17ab0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48feadf0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b17ab0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4861aee0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_task_run_ddl_columns_0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     @pytest.mark.target_dbs([\"sqlite\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_task_run_ddl_columns(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(tmp_path, used_objects, target_db, \"SELECT 1 AS x\") as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[{\"name\": \"x\", \"type\": \"integer\"}],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:431: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48feadf0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b17ab0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf4861aee0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _________________ test_sql_task_run_ddl_diff_col_order[sqlite] _________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48677880>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4881f190>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48677880>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48677670>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48677d60>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b599d0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4881f190>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b599d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48677d60>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_task_run_ddl_diff_col0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     @pytest.mark.target_dbs([\"sqlite\", \"postgresql\", \"mysql\", \"redshift\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_task_run_ddl_diff_col_order(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Test that sql with ddl columns creates a table with order similar to ddl definition\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT 1 AS y, '1' AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"name\": \"x\", \"type\": \"text\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"name\": \"y\", \"type\": \"int\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:510: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4881f190>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b599d0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48677d60>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _______________ test_sql_schema_reference_level_periods[sqlite] ________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48f78f10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf486bf400>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48f78f10>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48f78940>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f78a30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a0c0a0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf486bf400>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a0c0a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f78a30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_schema_reference_leve0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_schema_reference_level_periods(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Sql task with schema reference level\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"{{ out('test.') }}\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"script\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:617: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf486bf400>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a0c0a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48f78a30>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | ______________ test_sql_database_reference_level_periods[sqlite] _______________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48ac2e50>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48aab820>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48ac2e50>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48ac2580>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48ac2700>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b857a0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48aab820>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b857a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48ac2700>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_database_reference_le0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_database_reference_level_periods(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Sql task with schema reference level\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"{{ out('test..') }}\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"script\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:636: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf48aab820>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b857a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48ac2700>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _________________________ test_sql_test_names[sqlite] __________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf489c0eb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf489c0d90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf489c0eb0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf489c0520>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489c0460>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b59650>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf489c0d90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b59650>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489c0460>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_test_names_sqlite_0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_test_names(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT 1 AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             run_arguments={\"command\": \"test\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[{\"name\": \"x\", \"tests\": [\"unique\", \"not_null\"]}],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:706: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf489c0d90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48b59650>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf489c0460>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _________________________ test_sql_test_lists[sqlite] __________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48a7c5e0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4877af40>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48a7c5e0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48a7cfd0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48a7ce20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a19ea0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4877af40>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a19ea0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48a7ce20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_test_lists_sqlite_0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_test_lists(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT 1 AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             run_arguments={\"command\": \"test\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"name\": \"x\", \"tests\": [{\"name\": \"unique\"}, {\"name\": \"not_null\"}]}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 table_properties={},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 post_hook=[],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:732: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4877af40>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a19ea0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48a7ce20>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _________________________ test_sql_test_values[sqlite] _________________________\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.engine.base.Connection object at 0x7faf48bbcf70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4887ad90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | constructor = <bound method DefaultExecutionContext._init_statement of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = (), execution_options = immutabledict({})\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | args = ('SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                              ...chema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            ', [])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | kw = {}, branched = <sqlalchemy.engine.base.Connection object at 0x7faf48bbcf70>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7faf48bbc910>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48bbc3a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a196c0>, evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def _execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         dialect,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         constructor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         execution_options,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         *args,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         a :class:`_engine.CursorResult`.\"\"\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         branched = self\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self.__branch_from:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # if this is a \"branched\" connection, do everything in terms\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # of the \"root\" connection, *except* for .close(), which is\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             # the only feature that branching provides\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self = self.__branch_from\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if execution_options:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             yp = execution_options.get(\"yield_per\", None)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if yp:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 execution_options = execution_options.union(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\"stream_results\": True, \"max_row_buffer\": yp}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             conn = self._dbapi_connection\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if conn is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 conn = self._revalidate_connection()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context = constructor(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 dialect, self, conn, execution_options, *args, **kw\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except (exc.PendingRollbackError, exc.ResourceClosedError):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             raise\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         except BaseException as e:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 e, util.text_type(statement), parameters, None, None\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             and not self._transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             or (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._nested_transaction\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 and not self._nested_transaction.is_active\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._invalid_transaction()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         elif self._trans_context_manager:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             TransactionalContext._trans_ctx_check(self)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._is_future and self._transaction is None:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._autobegin()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         context.pre_exec()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if dialect.use_setinputsizes:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context._set_input_sizes()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         cursor, statement, parameters = (\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             context.parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if not context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             parameters = parameters[0]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._has_events or self.engine._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             for fn in self.dispatch.before_cursor_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 statement, parameters = fn(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     cursor,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     statement,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     parameters,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     context.executemany,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         if self._echo:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             self._log_info(statement)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             stats = context._get_cache_stats()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if not self.engine.hide_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] %r\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     stats,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     sql_util._repr_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         parameters, batches=10, ismulti=context.executemany\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     ),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 self._log_info(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     % (stats,)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         evt_handled = False\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         try:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             if context.executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_executemany:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_executemany(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             elif not parameters and context.no_parameters:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute_no_params:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     self.dialect.do_execute_no_params(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             else:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if self.dialect._has_events:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     for fn in self.dialect.dispatch.do_execute:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         if fn(cursor, statement, parameters, context):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             evt_handled = True\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             break\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 if not evt_handled:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >                   self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         cursor, statement, parameters, context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     )\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4887ad90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a196c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48bbc3a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlite3.OperationalError: no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | The above exception was the direct cause of the following exception:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tmp_path = PosixPath('/tmp/pytest-of-runneradmin/pytest-0/test_sql_test_values_sqlite_0')\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | target_db = {'database': ':memory:', 'type': 'sqlite'}\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def test_sql_test_values(tmp_path, target_db):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         used_objects = dict()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         with sql_task(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             tmp_path,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             used_objects,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             target_db,\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             \"SELECT 1 AS x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             run_arguments={\"command\": \"test\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |         ) as task:\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             assert task.config(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 file_name=\"test.sql\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 materialisation=\"table\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 destination=\"test_sql_task\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 columns=[\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     {\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         \"name\": \"x\",\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         \"tests\": [\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             {\"name\": \"unique\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             {\"name\": \"not_null\"},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             {\"name\": \"allowed_values\", \"allowed_values\": [1]},\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                         ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                     }\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                 ],\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |             ).is_ok\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >           task.connections[\"target_db\"]._introspect(used_objects[\"target_db\"])\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py:763: \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:388: in _introspect\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     dbobjects = self._list_objects(databases_intersection)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/sqlite.py:73: in _list_objects\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.read_data(queries),\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | sayn/database/__init__.py:463: in read_data\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     res = self.engine.execute(query, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | <string>:2: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ???\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return fn(*args, **kwargs)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:3257: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return connection.execute(statement, *multiparams, **params)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1365: in execute\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     return self._exec_driver_sql(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1669: in _exec_driver_sql\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     ret = self._execute_context(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1943: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self._handle_dbapi_exception(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2124: in _handle_dbapi_exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     util.raise_(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     raise exception\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1900: in _execute_context\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.dialect.do_execute(\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7faf4887ad90>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | cursor = <sqlite3.Cursor object at 0x7faf48a196c0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | statement = 'SELECT \"\" AS table_schema\\n                                    , \"\" AS table_catalog\\n                               ...ite_schema UNION ALL\\n                                 SELECT * FROM sqlite_temp_schema)\\n                            '\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | parameters = ()\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7faf48bbc3a0>\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     def do_execute(self, cursor, statement, parameters, context=None):\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | >       cursor.execute(statement, parameters)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                           , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                        SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E                                   ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | /home/runneradmin/.cache/pypoetry/virtualenvs/sayn-ixHP8fS--py3.8/lib/python3.8/site-packages/sqlalchemy/engine/default.py:736: OperationalError\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | =============================== warnings summary ===============================\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py::test_autosql_task_table[sqlite]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/173TECH-sayn/sayn/database/__init__.py:186: RemovedIn20Warning: Deprecated API features detected! These feature(s) are not compatible with SQLAlchemy 2.0. To prevent incompatible upgrades prior to updating applications, ensure requirements files are pinned to \"sqlalchemy<2.0\". Set environment variable SQLALCHEMY_WARN_20=1 to show all deprecation warnings.  Set environment variable SQLALCHEMY_SILENCE_UBER_WARNING=1 to silence this message. (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     self.metadata = MetaData(self.engine)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_autosql.py: 4 warnings\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_copy.py: 30 warnings\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | tests/test_task_sql.py: 4 warnings\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/173TECH-sayn/sayn/database/__init__.py:601: SADeprecationWarning: The Table.exists() method is deprecated and will be removed in a future release.  Please refer to Inspector.has_table(). (deprecated since: 1.4)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |     if table_def.exists():\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | \n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/173TECH-sayn/report.xml -\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | =========================== short test summary info ============================\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_sayn_init.py::test_sayn_run_default - subprocess.CalledProcessError: Command 'sayn run' returned non-zero exit status 255.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_sayn_init.py::test_sayn_run_prod - subprocess.CalledProcessError: Command 'sayn run -p prod' returned non-zero exit status 255.\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_task_table[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_task_view[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_task_incremental[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_task_compile[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_task_param[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_task_run_error[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_task_table_db_dst[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_task_run_ddl_columns[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_task_run_ddl_diff_col_order[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_test_names[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_test_lists[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_autosql.py::test_autosql_test_values[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_copy.py::test_copy_task[src:sqlite,dst:sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_copy.py::test_copy_task_ddl[src:sqlite,dst:sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_copy.py::test_copy_task_ddl_rename[src:sqlite,dst:sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_copy.py::test_copy_task_incremental[src:sqlite,dst:sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_copy.py::test_copy_task_incremental2[src:sqlite,dst:sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_copy.py::test_copy_task_dst_db[src:sqlite,dst:sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_copy.py::test_copy_append01[src:sqlite,dst:sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_copy.py::test_copy_append03[src:sqlite,dst:sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_task_table[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_task_view[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_task_incremental[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_task_compile[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_task_param[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_task_run_error[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_task_table_db_dst[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_task_run_ddl_columns[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_task_run_ddl_diff_col_order[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_schema_reference_level_periods[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_database_reference_level_periods[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_test_names[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_test_lists[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | FAILED tests/test_task_sql.py::test_sql_test_values[sqlite] - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: sqlite_temp_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | [SQL: SELECT \"\" AS table_schema\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , \"\" AS table_catalog\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , name AS table_name\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                     , type AS table_type\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  FROM (SELECT * FROM sqlite_schema UNION ALL\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                                  SELECT * FROM sqlite_temp_schema)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   |                             ]\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   | =========== 36 failed, 114 passed, 9 skipped, 39 warnings in 16.02s ============\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8]   \u274c  Failure - Main Run pytest\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8] exitcode '1': failure\n[9f334b42-4409-4e11-ace5-1fff69b5dfa9/Ubuntu / 3.8] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job '${{ matrix.os }} / ${{ matrix.python-version }}' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/173TECH-sayn/.github/workflows/workflow-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "9f334b42-4409-4e11-ace5-1fff69b5dfa9",
        "build_tool": "pytest",
        "elapsed_time": 569.2487812042236
    }
}