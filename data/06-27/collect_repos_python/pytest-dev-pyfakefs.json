{
    "repository": "pytest-dev/pyfakefs",
    "stars": 553,
    "language": "python",
    "size": 9768,
    "clone_url": "https://github.com/pytest-dev/pyfakefs.git",
    "timestamp": "2023-07-01T10:18:26.242299Z",
    "clone_success": true,
    "number_of_actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [],
        "stdout": "[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ] \ud83d\ude80  Start image=crawlergpt:latest\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ] \ud83d\ude80  Start image=crawlergpt:latest\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \ud83d\ude80  Start image=crawlergpt:latest\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \ud83d\ude80  Start image=crawlergpt:latest\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check] \ud83d\ude80  Start image=crawlergpt:latest\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/pytest-dev-pyfakefs] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/pytest-dev-pyfakefs] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/pytest-dev-pyfakefs] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/pytest-dev-pyfakefs] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/pytest-dev-pyfakefs] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ] \u2b50 Run Main Check out repository\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2705  Success - Main Check out repository\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ] \u2b50 Run Main Set up Python\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udc33  docker cp src=/tmp/act-cache/bbf7dae7-c0d8-4788-8700-296526264660/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.9]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check] \u2b50 Run Main actions/checkout@v3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2705  Success - Main actions/checkout@v3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check] \u2b50 Run Main Set up Python 3.9\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udc33  docker cp src=/tmp/act-cache/bbf7dae7-c0d8-4788-8700-296526264660/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ] \ud83e\uddea  Matrix: map[os:ubuntu-latest pytest-version:3.0.0 python-version:3.9]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ] \u2b50 Run Main actions/checkout@v3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2705  Success - Main actions/checkout@v3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ] \u2b50 Run Main Set up Python 3.9\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udc33  docker cp src=/tmp/act-cache/bbf7dae7-c0d8-4788-8700-296526264660/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2753  ::group::Installed versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::Semantic version spec of 3.10 is 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2753  ::group::Installed versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::isExplicit: \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::explicit? false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::evaluating 6 versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::match not found\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Version 3.10 was not found in the local cache\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::Getting manifest from actions/python-versions@main\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::set auth\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::matched: 3.9.6\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Successfully set up CPython (3.9.6)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2753  ::endgroup::\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2705  Success - Main Set up Python 3.9\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2699  ::set-output:: python-version=3.9.6\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check] \u2b50 Run Main Install dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.12.0-beta.3 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.12.0-beta.2 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.12.0-beta.1 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.7 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.6 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.5 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.4 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.3 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.2 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.12.0-alpha.1 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.4 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.3 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.2 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.1 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-rc.2 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-rc.1 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-beta.5 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-beta.4 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-beta.3 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-beta.2 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-beta.1 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-alpha.7 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-alpha.6 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-alpha.5 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-alpha.4 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-alpha.3 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-alpha.2 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.11.0-alpha.1 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::check 3.10.12 satisfies 3.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::x64===x64 && darwin===linux\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::x64===x64 && linux===linux\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::matched 3.10.12\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Version 3.10 is available for downloading\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Download from \"https://github.com/actions/python-versions/releases/download/3.10.12-5200619051/python-3.10.12-linux-20.04-x64.tar.gz\"\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::Downloading https://github.com/actions/python-versions/releases/download/3.10.12-5200619051/python-3.10.12-linux-20.04-x64.tar.gz\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::Destination /tmp/0a73f7c6-a75f-4a7b-a11e-d3757d12c36c\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::set auth\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2753  ::group::Installed versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::isExplicit: \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::explicit? false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::matched: 3.9.6\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   | Successfully set up CPython (3.9.6)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2753  ::endgroup::\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2705  Success - Main Set up Python 3.9\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2699  ::set-output:: python-version=3.9.6\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ] \u2b50 Run Main Install dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ] Unable to interpolate expression 'format('pip install -r requirements.txt\npip install -U pytest --junitxml=report.xml=={0}\nif [[ ''{1}'' == ''4.0.2'' ]]; then\n   pip install -U attrs==19.1.0\nfi\n', matrix.pytest --junitxml=report.xml-version, matrix.pytest --junitxml=report.xml-version)': Failed to parse: got unexpected character '-' while lexing integer part of number, expecting '0'..'9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::download complete\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Extract downloaded archive\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::Checking tar --version\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::tar (GNU tar) 1.30%0ACopyright (C) 2017 Free Software Foundation, Inc.%0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.%0AThis is free software: you are free to change and redistribute it.%0AThere is NO WARRANTY, to the extent permitted by law.%0A%0AWritten by John Gilmore and Jay Fenlason.\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | [command]/usr/bin/tar xz --warning=no-unknown-keyword -C /tmp/2f074d39-41ca-46ba-866d-c4e519f81a7d -f /tmp/0a73f7c6-a75f-4a7b-a11e-d3757d12c36c\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2705  Success - Main Install dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting pytest>=3.0.0\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting pluggy<2.0,>=0.12\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting exceptiongroup>=1.0.0rc8\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting tomli>=1.0.0\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ] \u2b50 Run Main Run pytest tests\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting packaging\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ] Unable to interpolate expression 'format('echo \"$(python -m pytest --junitxml=report.xml pyfakefs/pytest --junitxml=report.xml_tests/pytest --junitxml=report.xml_plugin_failing_helper.py)\" > ./testresult.txt\npython -m pytest --junitxml=report.xml pyfakefs/pytest --junitxml=report.xml_tests\nif [[ ''{0}'' > ''3.0.0'' ]]; then\n  cd pyfakefs/pytest --junitxml=report.xml_tests/ns_package\n  python -m pytest --junitxml=report.xml --log-cli-level=INFO test\nfi\n', matrix.pytest --junitxml=report.xml-version)': Failed to parse: got unexpected character '-' while lexing integer part of number, expecting '0'..'9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting iniconfig\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Installing collected packages: tomli, pluggy, packaging, iniconfig, exceptiongroup, pytest\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Successfully installed exceptiongroup-1.1.1 iniconfig-2.0.0 packaging-23.1 pluggy-1.2.0 pytest-7.4.0 tomli-2.0.1\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2705  Success - Main Run pytest tests\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Execute installation script\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Check if Python hostedtoolcache folder exist...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Create Python 3.10.12 folder\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Copy Python binaries to hostedtoolcache folder\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ] \u2b50 Run Post Set up Python 3.9\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ]   \u2705  Success - Post Set up Python 3.9\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Create additional symlinks (Required for the UsePythonVersion Azure Pipelines task and the setup-python GitHub Action)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Upgrading pip...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Ignoring pandas: markers 'python_version == \"3.7\"' don't match your environment\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting pathlib2>=2.3.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading pathlib2-2.3.7.post1-py2.py3-none-any.whl (18 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting scandir>=1.8\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading scandir-1.10.0.tar.gz (33 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting pandas==2.0.3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading pandas-2.0.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.4 MB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting xlrd==2.0.1\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading xlrd-2.0.1-py2.py3-none-any.whl (96 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting openpyxl==3.1.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading openpyxl-3.1.2-py2.py3-none-any.whl (249 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting tzdata>=2022.1\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading tzdata-2023.3-py2.py3-none-any.whl (341 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting python-dateutil>=2.8.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting pytz>=2020.1\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting numpy>=1.20.3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading numpy-1.25.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.7 MB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting et-xmlfile\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading et_xmlfile-1.1.0-py3-none-any.whl (4.7 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Collecting six\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Using legacy 'setup.py install' for scandir, since package 'wheel' is not installed.\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Looking in links: /tmp/tmpiyza94ly\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages (65.5.0)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.10.12/x64/lib/python3.10/site-packages (23.0.1)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Installing collected packages: six, tzdata, pytz, python-dateutil, numpy, et-xmlfile, xlrd, scandir, pathlib2, pandas, openpyxl\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Collecting pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 28.3 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Installing collected packages: pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |     Running setup.py install for scandir: started\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |     Running setup.py install for scandir: finished with status 'done'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Successfully installed pip-23.1.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.7]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Create complete file\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.10.12\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::evaluating 7 versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::matched: 3.10.12\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.10.12/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.10.12 x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Successfully set up CPython (3.10.12)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2753  ::endgroup::\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2705  Success - Main Set up Python\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main actions/checkout@v3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.10.12/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.10.12/x64/lib/pkgconfig\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.10.12/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.10.12/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.10.12/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.10.12/x64/lib\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2705  Success - Main actions/checkout@v3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2699  ::set-output:: python-version=3.10.12\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.10.12/x64/bin/python\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.10.12/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.10.12/x64/bin\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ] \u2b50 Run Main install pytype\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main Set up Python 3.7\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker cp src=/tmp/act-cache/bbf7dae7-c0d8-4788-8700-296526264660/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:pypy-3.7]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \u2b50 Run Main actions/checkout@v3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2705  Success - Main actions/checkout@v3\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \u2b50 Run Main Set up Python pypy-3.7\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker cp src=/tmp/act-cache/bbf7dae7-c0d8-4788-8700-296526264660/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytest-test     ] \ud83c\udfc1  Job succeeded\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | Usage:   \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   |   pip install [options] <requirement specifier> [package-index-options] ...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   |   pip install [options] -r <requirements file> [package-index-options] ...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   |   pip install [options] [-e] <vcs project url> ...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   |   pip install [options] [-e] <local project path> ...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   |   pip install [options] <archive url/path> ...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   | no such option: --junitxml\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ]   \u274c  Failure - Main install pytype\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2753  ::group::Installed versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::isExplicit: \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::explicit? false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::matched: 3.7.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Successfully set up CPython (3.7.11)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2753  ::endgroup::\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2705  Success - Main Set up Python 3.7\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2753  ::group::Installed versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::isExplicit: \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::explicit? false\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::isExplicit: 3.6.12\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::isExplicit: 3.7.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::explicit? true\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::evaluating 3 versions\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::matched: 3.7.10\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/PyPy/3.7.10/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::Found tool in cache PyPy 3.7.10 x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Successfully set up PyPy 7.3.5 with Python (3.7.10)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2753  ::endgroup::\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2705  Success - Main Set up Python pypy-3.7\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/PyPy/3.7.10/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/PyPy/3.7.10/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/PyPy/3.7.10/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/PyPy/3.7.10/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/PyPy/3.7.10/x64/bin/lib/pkgconfig\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::set-output:: python-version=3.7.11\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ] exitcode '2': failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2699  ::set-output:: python-version=pypy7.3.5\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/PyPy/3.7.10/x64/bin/python\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main Get pip cache dir\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2699  ::add-path:: /opt/hostedtoolcache/PyPy/3.7.10/x64/bin\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2699  ::add-path:: /opt/hostedtoolcache/PyPy/3.7.10/x64/bin\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \u2b50 Run Main Get pip cache dir\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/pip-cache] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/pip-cache] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Successfully installed et-xmlfile-1.1.0 numpy-1.25.0 openpyxl-3.1.2 pandas-2.0.3 pathlib2-2.3.7.post1 python-dateutil-2.8.2 pytz-2023.3 scandir-1.10.0 six-1.16.0 tzdata-2023.3 xlrd-2.0.1\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | Usage:   \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   pip install [options] <requirement specifier> [package-index-options] ...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   pip install [options] -r <requirements file> [package-index-options] ...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   pip install [options] [-e] <vcs project url> ...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   pip install [options] [-e] <local project path> ...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   |   pip install [options] <archive url/path> ...\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   | no such option: --junitxml\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check]   \u274c  Failure - Main Install dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check] exitcode '2': failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/pytype          ] \ud83c\udfc1  Job failed\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Installing collected packages: pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Attempting uninstall: pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |     Found existing installation: pip 21.2.4\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |     Uninstalling pip-21.2.4:\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |       Successfully uninstalled pip-21.2.4\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Successfully installed pip-23.1.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2699  ::set-output:: dir=/home/runneradmin/.cache/pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2705  Success - Main Get pip cache dir\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main Cache dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/dependency-check] \ud83c\udfc1  Job failed\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker cp src=/tmp/act-cache/bbf7dae7-c0d8-4788-8700-296526264660/act/actions-cache@v3/ dst=/var/run/act/actions/actions-cache@v3/\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v3/] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/PyPy/3.7.10/x64/site-packages (21.2.4)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Installing collected packages: pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Attempting uninstall: pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |     Found existing installation: pip 21.2.4\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |     Uninstalling pip-21.2.4:\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |       Successfully uninstalled pip-21.2.4\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/restore/index.js] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::Resolved Keys:\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::[\"ubuntu-latest-3.7-pip-79c8c73e23cc99e6bab84a64b680f00ebe1d6ba8dbad995104b0e6fea354140f-cf5afcebd3a907efebbdb76f4aa9a792fecaf4e6a7ff0d196c1e3b575a0de664\",\"ubuntu-latest-3.7-pip-\"]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::1.5.0\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42637/_apis/artifactcache/cache?keys=ubuntu-latest-3.7-pip-79c8c73e23cc99e6bab84a64b680f00ebe1d6ba8dbad995104b0e6fea354140f-cf5afcebd3a907efebbdb76f4aa9a792fecaf4e6a7ff0d196c1e3b575a0de664%252Cubuntu-latest-3.7-pip-&version=79a244514713d0ea96d5d8aab70186082a897848df6e845ec8308965d2f82f4f\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Cache not found for input keys: ubuntu-latest-3.7-pip-79c8c73e23cc99e6bab84a64b680f00ebe1d6ba8dbad995104b0e6fea354140f-cf5afcebd3a907efebbdb76f4aa9a792fecaf4e6a7ff0d196c1e3b575a0de664, ubuntu-latest-3.7-pip-\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2705  Success - Main Cache dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main Install dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Successfully installed pip-23.1.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2699  ::set-output:: dir=/home/runneradmin/.cache/pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2705  Success - Main Get pip cache dir\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \u2b50 Run Main Cache dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker cp src=/tmp/act-cache/bbf7dae7-c0d8-4788-8700-296526264660/act/actions-cache@v3/ dst=/var/run/act/actions/actions-cache@v3/\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v3/] user=0 workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (47.1.0)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting wheel\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 9.6 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Installing collected packages: wheel\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Successfully installed wheel-0.40.0\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | [notice] To update, run: pip install --upgrade pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting pytest>=3.0.0 (from -r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 5.0 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting iniconfig (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting packaging (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 4.0 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting pluggy<2.0,>=0.12 (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting tomli>=1.0.0 (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting importlib-metadata>=0.12 (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting zipp>=0.5 (from importlib-metadata>=0.12->pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting typing-extensions>=3.6.4 (from importlib-metadata>=0.12->pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Installing collected packages: zipp, typing-extensions, tomli, packaging, iniconfig, exceptiongroup, importlib-metadata, pluggy, pytest\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Successfully installed exceptiongroup-1.1.1 importlib-metadata-6.7.0 iniconfig-2.0.0 packaging-23.1 pluggy-1.2.0 pytest-7.4.0 tomli-2.0.1 typing-extensions-4.7.0 zipp-3.15.0\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | [notice] To update, run: pip install --upgrade pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2705  Success - Main Install dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main Run unit tests without extra packages as non-root user\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/restore/index.js] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::Resolved Keys:\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::[\"ubuntu-latest-pypy-3.7-pip-79c8c73e23cc99e6bab84a64b680f00ebe1d6ba8dbad995104b0e6fea354140f-cf5afcebd3a907efebbdb76f4aa9a792fecaf4e6a7ff0d196c1e3b575a0de664\",\"ubuntu-latest-pypy-3.7-pip-\"]\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::1.5.0\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42637/_apis/artifactcache/cache?keys=ubuntu-latest-pypy-3.7-pip-79c8c73e23cc99e6bab84a64b680f00ebe1d6ba8dbad995104b0e6fea354140f-cf5afcebd3a907efebbdb76f4aa9a792fecaf4e6a7ff0d196c1e3b575a0de664%252Cubuntu-latest-pypy-3.7-pip-&version=79a244514713d0ea96d5d8aab70186082a897848df6e845ec8308965d2f82f4f\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Cache not found for input keys: ubuntu-latest-pypy-3.7-pip-79c8c73e23cc99e6bab84a64b680f00ebe1d6ba8dbad995104b0e6fea354140f-cf5afcebd3a907efebbdb76f4aa9a792fecaf4e6a7ff0d196c1e3b575a0de664, ubuntu-latest-pypy-3.7-pip-\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2705  Success - Main Cache dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_alt_sep (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_with_file_size (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_with_looping_symlink (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_all_dot_paths_removed_but_one (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_all_dot_paths_removed_if_another_path_component_exists (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_combine_dot_and_up_level_references_in_absolute_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_conserves_up_level_references_starting_from_current_dir (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dot_path_unchanged (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dots_in_path_collapses_to_last_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_becomes_dot_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ignores_up_level_references_starting_from_root (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_separators_collapsed_into_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_slashes_are_not_collapsed (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_link_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_symlink_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copying_preserves_byte_contents (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_content_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_fitting_content (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_after_reopened (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_after_reopened_rplus_seek (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_append (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_auto_mounted_drive_on_directory_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_auto_mounted_drive_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_unlimited_disk (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_automounted_drive (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_mounted_paths (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_diskusage_after_open_write (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_ascii_string_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_binary_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_directory_removal (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_directory_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_file_deletion (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_file_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_large_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_filesystem_size_after_2byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_filesystem_size_after_3byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resize_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resize_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_larger_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_smaller_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_disk_usage_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_hard_link_does_not_change_used_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_the_size_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_characters_before_root_ignored_in_join_paths (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_path_components (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_with_alt_separator (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_empty_parts (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_leave_file_unchanged_if_size_is_equal_to_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_new_file_and_directory (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ordered_dirs (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pads_with_nullbytes_if_size_is_greater_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_after_chdir (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_after_chdir_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_produce_empty_file_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_contents_to_dir_raises (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_m_time (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sets_content_empty_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_set_size_is_negative (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_set_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_file_if_size_is_smaller_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_regular_file_error_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_regular_file_error_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_current_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_read_only_directory_possible_in_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_read_only_directory_raises_in_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_changed_ids (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_incorrect_mode_type (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_size_but_no_content_creates_large_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_link (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_access_on_file_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_access_on_file_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_file_created_for_none_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_string_does_not_exist (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_added_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_file_added_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_file_removed_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_relative_path_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_relative_path_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_removed_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_unadded_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_nonexistent_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_nonexistent_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_root_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lresolve_object_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lresolve_object_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_new_filesystem (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_raises_type_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_not_exists_subpath_named_like_file_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_operate_on_grandchild_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pickle_fs (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #445 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_nonexisten_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_non_directory_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_windows_root_dir_name (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abs_path_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_bytes_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_bytes_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_deals_with_relative_non_root_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | abspath should correctly handle relative paths from a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | abspath should return a consistent representation of a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dirname (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dirname_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expand_root (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expand_user (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime_raises_os_error (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getattr_forward_to_real_os_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Forwards any non-faked calls to os.path. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_dir_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_dir_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_file_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_file_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_path_nonexistent (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link_case_sensitive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_with_cwd_change (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_alternate_path_separator (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_drive_letters (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_unc_paths (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join_bytes (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join_strings (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath_strict (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped \"'strict' new in Python 3.10\"\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath_vs_abspath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_side_effect_called (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_side_effect_file_object (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_two_level_absolute_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_two_level_relative_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_components_preceding_absolute_component_are_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_internal_empty_components_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separator_added_for_components_ending_in_separator (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separator_added_for_leading_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_empty_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_separator_added_between_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_separator_added_for_trailing_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_separators_not_stripped_from_single_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drives_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drives_are_auto_mounted_case_insensitive (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_mount_point_cannot_be_added_twice (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_directories_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_files_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_mount_points_get_new_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_drive (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_lazily_added_empty_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... skipped 'Regression test for Windows problem only'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_non_existing_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dot_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dotted_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_should_get_normalized_to_root_path (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path_forced_to_cwd (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_top_level_directory (pyfakefs.tests.fake_filesystem_test.OsPathInjectionRegressionTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_path_sep_matches_fake_filesystem_separator (pyfakefs.tests.fake_filesystem_test.PathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_not_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink_lazy_read (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink_target_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree_to_other_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_paths_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_paths_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_non_existing_real_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_non_existing_real_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_real_file_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_real_file_to_non_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_existing_fake_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_existing_fake_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_lazily_added_real_directory (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_real_file (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sets_content_none_if_size_is_non_negative_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_size_is_negative (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_eliminate_trailing_separators_from_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_components_are_preserved_in_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_tail_if_path_ends_in_separator (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separators (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_separator_is_not_stripped (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_slashes_do_not_split (pyfakefs.tests.fake_filesystem_test.SplitPathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob1 (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_empty (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_exact (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_no_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_question (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_star (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_has_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_magic_dir (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existent_path (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \u2b50 Run Main Install dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #799 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #799 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_path (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_xattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removeattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_setxattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temp_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access400 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access600 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access700 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir into '..' should behave appropriately. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capabilities (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure that the fake capabilities are the same as the real ones. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should work on a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.chown() with bad args (Issue #30) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Directory classification should work correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Consecutive relative chdir calls should work. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fstat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that hard link counts are updated correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_update (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs raises exception if access denied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs creates a directories with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a relative directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exeption if creating directory named ''. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent directory does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent is read only. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a directory with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a directory named with a trailing slash. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a device with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | open creates a file with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/' as part of a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/'. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | removedirs works on directory names with trailing slashes. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of an empty directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can't rename a file that doesn't exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test if rename preserves mtime. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to another filesystem device raises OSError. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target directory is not empty. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_umask (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can use `rename()` to change filename case in a case-insensitive ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_st_ctime (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_incorrect_ns_argument_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_invalid_times_arg_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_no_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_current_time_if_args_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_specified_time (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_specified_time_in_ns (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk up ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk a non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Caller can modify list of directories to visit while walking. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk down ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getgid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getuid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temp_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access400 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access600 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access700 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir into '..' should behave appropriately. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capabilities (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure that the fake capabilities are the same as the real ones. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should work on a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.chown() with bad args (Issue #30) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Directory classification should work correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Consecutive relative chdir calls should work. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fstat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that hard link counts are updated correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_update (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs raises exception if access denied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs creates a directories with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a relative directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exeption if creating directory named ''. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent directory does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent is read only. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a directory with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a directory named with a trailing slash. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a device with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | open creates a file with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/' as part of a ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/'. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | removedirs works on directory names with trailing slashes. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of an empty directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can't rename a file that doesn't exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test if rename preserves mtime. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Skipping because FakeFS does not match real FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to another filesystem device raises OSError. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target directory is not empty. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_umask (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can use `rename()` to change filename case in a case-insensitive ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk up ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk a non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Caller can modify list of directories to visit while walking. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk down ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getgid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getuid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'inode seems not to work in a Docker container'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'inode seems not to work in a Docker container'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'inode seems not to work in a Docker container'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'inode seems not to work in a Docker container'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_not_reset_after_close (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_truncation (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via open(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_updated_via_close (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via close(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_updated_via_flush (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via flush(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_large_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'r' mode, read, flushed and ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'w+' mode and is then written to, ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'r' mode, read, flushed and ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'w+' mode and is then written to, ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.FakeFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Expect raise when opening a file in a missing directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closefd_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that text mode flag is ignored ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.RealFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Expect raise when opening a file in a missing directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that text mode flag is ignored ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normal_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_link (pyfakefs.tests.fake_open_test.RealResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normal_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_link (pyfakefs.tests.fake_open_test.ResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdtemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkstemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkstemp_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test tempfile.mkstemp(dir=). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_named_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_named_temporary_file_no_delete (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporary_directory (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporay_file_with_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_bad_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_sym_link (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_builtin_open_modes (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_in_a_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_with_binary_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_with_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime_nonexistant_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hard_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hard_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_folder_after_chdir (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_through_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_sibling_directory_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_both (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_run_module (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_run_path (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.FailedPatchingTest) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_root_behavior (pyfakefs.tests.fake_filesystem_unittest_test.NoRootUserTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Check that fs behaves as non-root user regardless of actual ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists1 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists2 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists3 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists5 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists6 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists7 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_fails (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_patched_in_module_ending_with_io (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat_failing (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_filesystem_unittest_test.PathlibTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure fake file system is used for os in pathlib ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_fs (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_fs_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_without_patcher (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_filesystem_unittest_test.TestAbsolutePathOnWindows) ... skipped 'Windows-specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_attributes (pyfakefs.tests.fake_filesystem_unittest_test.TestAttributesWithFakeModuleNames)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Attributes of module under test are not patched ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_using_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_using_fs_functions (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_deprecation_warning (pyfakefs.tests.fake_filesystem_unittest_test.TestDeprecationSuppression)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Ensures that deprecation warnings are suppressed during module ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_copied (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_copied_again (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_drivelike_path (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_real_file_with_home (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #558 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_context_decorator (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_context_manager (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_argument_order1 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_argument_order2 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists4 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists_as_default_arg_in_function (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists_as_default_arg_in_method (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_exists_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os_path_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_io_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_isdir_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_isfile_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_islink_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_path_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure `from os import path` patches `path`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_path_from_pathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_pathlib_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_own_path_module (pyfakefs.tests.fake_filesystem_unittest_test.TestPathNotPatchedIfNotOsPath) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_test_case_type (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_up_pyfakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCaseMixin) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fakepathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake glob module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_io_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake io module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake `open()` function is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake os module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_shutil (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake shutil module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_a (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_b (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tempdir_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tmp_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_value (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.create_file() which uses `open()` ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.delete_file() which uses `os.remove()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_exists (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.path_exists() which uses `os.path.exists()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_globs (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.get_glob(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.scandir() which uses `os.scandir()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_real_file_access (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test `example.file_contents()` for a real file after adding it using ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rm_tree (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.rm_tree() using `shutil.rmtree()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.scandir() which uses `scandir.scandir()`. ... skipped 'Testing only if scandir module is installed'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | example (pyfakefs.tests)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | create_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.create_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | delete_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.delete_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | get_glob (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.get_glob ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | path_exists (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.path_exists ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_smart_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_class_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_class_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_method_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_method_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_module_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_module_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_submodule_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_import_as_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pathlib_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_shutil_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file_for_unreadable_dir_windows (pyfakefs.tests.fake_pathlib_test.FakeFilesystemChmodTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_dir_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_symlink_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_home (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure tests for class type will work ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_match (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_home (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure tests for class type will work ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_match (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ----------------------------------------------------------------------\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Ran 2133 tests in 7.677s\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | OK (skipped=307, expected failures=2)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2705  Success - Main Run unit tests without extra packages as non-root user\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main Run setup.py test (uses pytest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/PyPy/3.7.10/x64/site-packages (47.1.0)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting wheel\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 1.4 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Installing collected packages: wheel\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Successfully installed wheel-0.40.0\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | [notice] To update, run: pip install --upgrade pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | running test\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | WARNING: Testing via this command is deprecated and will be removed in a future version. Users looking for a generic test entry point independent of test runner are encouraged to use tox.\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | running egg_info\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | creating pyfakefs.egg-info\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | writing pyfakefs.egg-info/PKG-INFO\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | writing dependency_links to pyfakefs.egg-info/dependency_links.txt\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | writing entry points to pyfakefs.egg-info/entry_points.txt\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | writing top-level names to pyfakefs.egg-info/top_level.txt\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | writing manifest file 'pyfakefs.egg-info/SOURCES.txt'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | reading manifest file 'pyfakefs.egg-info/SOURCES.txt'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | reading manifest template 'MANIFEST.in'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | writing manifest file 'pyfakefs.egg-info/SOURCES.txt'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | running build_ext\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting pytest>=3.0.0 (from -r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 4.1 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_both (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/runpy.py:125: RuntimeWarning: 'pyfakefs.tests.fixtures.config_module' found in sys.modules after import of package 'pyfakefs.tests.fixtures', but prior to execution of 'pyfakefs.tests.fixtures.config_module'; this may result in unpredictable behaviour\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   warn(RuntimeWarning(msg))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_run_module (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/runpy.py:125: RuntimeWarning: 'pyfakefs.tests.fixtures.config_module' found in sys.modules after import of package 'pyfakefs.tests.fixtures', but prior to execution of 'pyfakefs.tests.fixtures.config_module'; this may result in unpredictable behaviour\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   warn(RuntimeWarning(msg))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_run_path (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.FailedPatchingTest) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_root_behavior (pyfakefs.tests.fake_filesystem_unittest_test.NoRootUserTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Check that fs behaves as non-root user regardless of actual ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists1 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists2 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists3 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists5 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists6 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists7 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_fails (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_patched_in_module_ending_with_io (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat_failing (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_filesystem_unittest_test.PathlibTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting iniconfig (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure fake file system is used for os in pathlib ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_fs (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_fs_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_without_patcher (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_filesystem_unittest_test.TestAbsolutePathOnWindows) ... skipped 'Windows-specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_attributes (pyfakefs.tests.fake_filesystem_unittest_test.TestAttributesWithFakeModuleNames)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Attributes of module under test are not patched ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_using_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_using_fs_functions (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_deprecation_warning (pyfakefs.tests.fake_filesystem_unittest_test.TestDeprecationSuppression)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Ensures that deprecation warnings are suppressed during module ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_copied (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... copying ./test2/subdir/1.txt -> ./test/subdir\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | removing './test2/' (and everything under it)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_copied_again (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... copying ./test2/subdir/1.txt -> ./test/subdir\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | removing './test2/' (and everything under it)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_drivelike_path (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_real_file_with_home (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #558 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting packaging (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_context_decorator (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_context_manager (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_argument_order1 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_argument_order2 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.7 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting pluggy<2.0,>=0.12 (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting tomli>=1.0.0 (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists4 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists_as_default_arg_in_function (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists_as_default_arg_in_method (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_exists_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os_path_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_io_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_isdir_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_isfile_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_islink_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_path_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure `from os import path` patches `path`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_path_from_pathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_pathlib_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_own_path_module (pyfakefs.tests.fake_filesystem_unittest_test.TestPathNotPatchedIfNotOsPath) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_test_case_type (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_up_pyfakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCaseMixin) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fakepathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake glob module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_io_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake io module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake `open()` function is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake os module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_shutil (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting importlib-metadata>=0.12 (from pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake shutil module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_a (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_b (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tempdir_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tmp_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_value (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_import_as_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pathlib_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_shutil_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_alt_sep (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_with_file_size (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_with_looping_symlink (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_all_dot_paths_removed_but_one (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_all_dot_paths_removed_if_another_path_component_exists (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_combine_dot_and_up_level_references_in_absolute_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_conserves_up_level_references_starting_from_current_dir (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dot_path_unchanged (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dots_in_path_collapses_to_last_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_becomes_dot_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ignores_up_level_references_starting_from_root (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_separators_collapsed_into_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_slashes_are_not_collapsed (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_link_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_symlink_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copying_preserves_byte_contents (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_content_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_fitting_content (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_after_reopened (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_after_reopened_rplus_seek (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_append (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_auto_mounted_drive_on_directory_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_auto_mounted_drive_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_unlimited_disk (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_automounted_drive (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_mounted_paths (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_diskusage_after_open_write (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_ascii_string_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_binary_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_directory_removal (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_directory_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_file_deletion (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_file_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_large_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_filesystem_size_after_2byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_filesystem_size_after_3byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resize_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resize_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_larger_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_smaller_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_disk_usage_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_hard_link_does_not_change_used_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_the_size_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_characters_before_root_ignored_in_join_paths (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_path_components (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_with_alt_separator (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_empty_parts (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_leave_file_unchanged_if_size_is_equal_to_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_new_file_and_directory (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ordered_dirs (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pads_with_nullbytes_if_size_is_greater_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_after_chdir (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_after_chdir_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_produce_empty_file_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_contents_to_dir_raises (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_m_time (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sets_content_empty_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_set_size_is_negative (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_set_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_file_if_size_is_smaller_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_regular_file_error_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_regular_file_error_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_current_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_read_only_directory_possible_in_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_read_only_directory_raises_in_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_changed_ids (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_incorrect_mode_type (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_size_but_no_content_creates_large_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_link (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_access_on_file_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_access_on_file_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_file_created_for_none_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_string_does_not_exist (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_added_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_file_added_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_file_removed_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_relative_path_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_relative_path_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_removed_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_unadded_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_nonexistent_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_nonexistent_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_root_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lresolve_object_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lresolve_object_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_new_filesystem (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_raises_type_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_not_exists_subpath_named_like_file_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_operate_on_grandchild_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pickle_fs (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #445 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_nonexisten_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_non_directory_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_windows_root_dir_name (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abs_path_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_bytes_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_bytes_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_deals_with_relative_non_root_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | abspath should correctly handle relative paths from a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | abspath should return a consistent representation of a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dirname (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dirname_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expand_root (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expand_user (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime_raises_os_error (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getattr_forward_to_real_os_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Forwards any non-faked calls to os.path. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_dir_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_dir_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_file_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_file_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_path_nonexistent (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link_case_sensitive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_with_cwd_change (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_alternate_path_separator (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_drive_letters (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_unc_paths (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join_bytes (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join_strings (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath_strict (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped \"'strict' new in Python 3.10\"\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath_vs_abspath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_side_effect_called (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_side_effect_file_object (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_two_level_absolute_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_two_level_relative_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_components_preceding_absolute_component_are_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_internal_empty_components_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separator_added_for_components_ending_in_separator (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separator_added_for_leading_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_empty_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_separator_added_between_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_separator_added_for_trailing_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_separators_not_stripped_from_single_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drives_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drives_are_auto_mounted_case_insensitive (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_mount_point_cannot_be_added_twice (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_directories_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_files_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_mount_points_get_new_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_drive (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_lazily_added_empty_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... skipped 'Regression test for Windows problem only'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_non_existing_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dot_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dotted_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_should_get_normalized_to_root_path (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path_forced_to_cwd (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_top_level_directory (pyfakefs.tests.fake_filesystem_test.OsPathInjectionRegressionTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_path_sep_matches_fake_filesystem_separator (pyfakefs.tests.fake_filesystem_test.PathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting zipp>=0.5 (from importlib-metadata>=0.12->pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_not_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink_lazy_read (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink_target_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting typing-extensions>=3.6.4 (from importlib-metadata>=0.12->pytest>=3.0.0->-r requirements.txt (line 1))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree_to_other_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_paths_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_paths_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_non_existing_real_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_non_existing_real_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_real_file_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_real_file_to_non_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_existing_fake_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_existing_fake_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_lazily_added_real_directory (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_real_file (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sets_content_none_if_size_is_non_negative_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_size_is_negative (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_eliminate_trailing_separators_from_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_components_are_preserved_in_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_tail_if_path_ends_in_separator (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separators (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_separator_is_not_stripped (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_slashes_do_not_split (pyfakefs.tests.fake_filesystem_test.SplitPathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file_for_unreadable_dir_windows (pyfakefs.tests.fake_pathlib_test.FakeFilesystemChmodTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_dir_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_symlink_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_home (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure tests for class type will work ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_match (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Installing collected packages: zipp, typing-extensions, tomli, packaging, iniconfig, exceptiongroup, importlib-metadata, pluggy, pytest\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_home (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure tests for class type will work ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_match (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_bad_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_sym_link (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_builtin_open_modes (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_in_a_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_with_binary_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_with_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime_nonexistant_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hard_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hard_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_folder_after_chdir (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_through_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_sibling_directory_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_smart_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_class_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_class_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_method_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_method_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_module_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_module_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_submodule_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'r' mode, read, flushed and ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'w+' mode and is then written to, ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'r' mode, read, flushed and ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'w+' mode and is then written to, ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdtemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkstemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkstemp_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test tempfile.mkstemp(dir=). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_named_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_named_temporary_file_no_delete (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporary_directory (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporay_file_with_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.FakeFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Expect raise when opening a file in a missing directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closefd_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that text mode flag is ignored ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.RealFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Expect raise when opening a file in a missing directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that text mode flag is ignored ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normal_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_link (pyfakefs.tests.fake_open_test.RealResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normal_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_link (pyfakefs.tests.fake_open_test.ResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.create_file() which uses `open()` ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.delete_file() which uses `os.remove()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_exists (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.path_exists() which uses `os.path.exists()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_globs (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.get_glob(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.scandir() which uses `os.scandir()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_real_file_access (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test `example.file_contents()` for a real file after adding it using ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rm_tree (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.rm_tree() using `shutil.rmtree()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.scandir() which uses `scandir.scandir()`. ... skipped 'Testing only if scandir module is installed'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | example (pyfakefs.tests)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | create_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.create_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | delete_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.delete_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | get_glob (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.get_glob ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | path_exists (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.path_exists ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #799 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #799 ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_path (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_xattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removeattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_setxattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temp_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access400 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access600 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access700 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir into '..' should behave appropriately. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capabilities (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure that the fake capabilities are the same as the real ones. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should work on a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.chown() with bad args (Issue #30) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Directory classification should work correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Consecutive relative chdir calls should work. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fstat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that hard link counts are updated correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_update (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs raises exception if access denied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs creates a directories with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a relative directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exeption if creating directory named ''. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent directory does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent is read only. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a directory with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a directory named with a trailing slash. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a device with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | open creates a file with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Successfully installed exceptiongroup-1.1.1 importlib-metadata-6.7.0 iniconfig-2.0.0 packaging-23.1 pluggy-1.2.0 pytest-7.4.0 tomli-2.0.1 typing-extensions-4.7.0 zipp-3.15.0\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | [notice] To update, run: pip install --upgrade pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2705  Success - Main Install dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/' as part of a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/'. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | removedirs works on directory names with trailing slashes. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of an empty directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can't rename a file that doesn't exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test if rename preserves mtime. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to another filesystem device raises OSError. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target directory is not empty. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_umask (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can use `rename()` to change filename case in a case-insensitive ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \u2b50 Run Main Run unit tests without extra packages as non-root user\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_st_ctime (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_incorrect_ns_argument_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_invalid_times_arg_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_no_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_current_time_if_args_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_specified_time (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_specified_time_in_ns (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk up ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk a non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Caller can modify list of directories to visit while walking. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk down ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getgid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getuid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temp_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access400 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access600 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access700 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir into '..' should behave appropriately. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capabilities (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure that the fake capabilities are the same as the real ones. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should work on a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.chown() with bad args (Issue #30) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Directory classification should work correctly. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Consecutive relative chdir calls should work. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fstat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that hard link counts are updated correctly. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_update (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs raises exception if access denied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs creates a directories with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a relative directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exeption if creating directory named ''. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent directory does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent is read only. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a directory with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a directory named with a trailing slash. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a device with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | open creates a file with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/' as part of a ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/'. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | removedirs works on directory names with trailing slashes. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of an empty directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can't rename a file that doesn't exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test if rename preserves mtime. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to another filesystem device raises OSError. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target directory is not empty. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_umask (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can use `rename()` to change filename case in a case-insensitive ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk up ordering is correct. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking non-directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk a non-directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Caller can modify list of directories to visit while walking. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk down ordering is correct. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getgid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getuid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_not_reset_after_close (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_truncation (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via open(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_updated_via_close (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via close(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_updated_via_flush (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via flush(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_large_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob1 (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_empty (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_exact (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_no_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_question (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_star (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_has_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_magic_dir (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existent_path (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ----------------------------------------------------------------------\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Ran 2133 tests in 6.999s\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | OK (skipped=864, expected failures=2)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2705  Success - Main Run setup.py test (uses pytest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main Run unit tests without extra packages as root\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_alt_sep (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_with_file_size (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_with_looping_symlink (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_all_dot_paths_removed_but_one (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_all_dot_paths_removed_if_another_path_component_exists (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_combine_dot_and_up_level_references_in_absolute_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_conserves_up_level_references_starting_from_current_dir (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dot_path_unchanged (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dots_in_path_collapses_to_last_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_becomes_dot_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ignores_up_level_references_starting_from_root (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_separators_collapsed_into_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_slashes_are_not_collapsed (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_link_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_symlink_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copying_preserves_byte_contents (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_content_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_fitting_content (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_after_reopened (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_after_reopened_rplus_seek (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_append (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_auto_mounted_drive_on_directory_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_auto_mounted_drive_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_unlimited_disk (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_automounted_drive (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_mounted_paths (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_diskusage_after_open_write (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_ascii_string_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_binary_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_directory_removal (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_directory_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_file_deletion (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_file_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_large_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_filesystem_size_after_2byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_filesystem_size_after_3byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resize_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resize_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_larger_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_smaller_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_disk_usage_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_hard_link_does_not_change_used_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_the_size_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_characters_before_root_ignored_in_join_paths (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_path_components (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_with_alt_separator (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_empty_parts (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_leave_file_unchanged_if_size_is_equal_to_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_new_file_and_directory (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ordered_dirs (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pads_with_nullbytes_if_size_is_greater_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_after_chdir (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_after_chdir_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_produce_empty_file_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_contents_to_dir_raises (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_m_time (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sets_content_empty_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_set_size_is_negative (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_set_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_file_if_size_is_smaller_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_regular_file_error_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_regular_file_error_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_current_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_read_only_directory_possible_in_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_read_only_directory_raises_in_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_changed_ids (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_incorrect_mode_type (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_size_but_no_content_creates_large_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_link (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_access_on_file_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_access_on_file_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_file_created_for_none_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_string_does_not_exist (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_added_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_file_added_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_file_removed_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_relative_path_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_relative_path_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_removed_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_unadded_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_nonexistent_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_nonexistent_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_root_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lresolve_object_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lresolve_object_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_new_filesystem (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_raises_type_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_not_exists_subpath_named_like_file_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_operate_on_grandchild_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pickle_fs (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #445 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_nonexisten_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_non_directory_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_windows_root_dir_name (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abs_path_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_bytes_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_bytes_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_deals_with_relative_non_root_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | abspath should correctly handle relative paths from a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | abspath should return a consistent representation of a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dirname (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dirname_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expand_root (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expand_user (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime_raises_os_error (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getattr_forward_to_real_os_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Forwards any non-faked calls to os.path. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_dir_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_dir_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_file_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_file_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_path_nonexistent (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link_case_sensitive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_with_cwd_change (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_alternate_path_separator (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_drive_letters (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_unc_paths (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join_bytes (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join_strings (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath_strict (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped \"'strict' new in Python 3.10\"\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath_vs_abspath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_side_effect_called (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_side_effect_file_object (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_two_level_absolute_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_two_level_relative_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_components_preceding_absolute_component_are_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_internal_empty_components_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separator_added_for_components_ending_in_separator (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separator_added_for_leading_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_empty_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_separator_added_between_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_separator_added_for_trailing_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_separators_not_stripped_from_single_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drives_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drives_are_auto_mounted_case_insensitive (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_mount_point_cannot_be_added_twice (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_directories_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_files_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_mount_points_get_new_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_drive (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_lazily_added_empty_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... skipped 'Regression test for Windows problem only'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_non_existing_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dot_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dotted_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_should_get_normalized_to_root_path (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path_forced_to_cwd (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_top_level_directory (pyfakefs.tests.fake_filesystem_test.OsPathInjectionRegressionTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_path_sep_matches_fake_filesystem_separator (pyfakefs.tests.fake_filesystem_test.PathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_not_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink_lazy_read (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink_target_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree_to_other_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_paths_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_paths_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_non_existing_real_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_non_existing_real_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_real_file_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_real_file_to_non_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_existing_fake_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_existing_fake_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_lazily_added_real_directory (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_real_file (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sets_content_none_if_size_is_non_negative_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_size_is_negative (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_eliminate_trailing_separators_from_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_components_are_preserved_in_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_tail_if_path_ends_in_separator (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separators (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_separator_is_not_stripped (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_slashes_do_not_split (pyfakefs.tests.fake_filesystem_test.SplitPathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob1 (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_empty (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_exact (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_no_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_question (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_star (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_has_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_magic_dir (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existent_path (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #799 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #799 ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_path (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_xattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removeattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_setxattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temp_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access400 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access600 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access700 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir into '..' should behave appropriately. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capabilities (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure that the fake capabilities are the same as the real ones. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should work on a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.chown() with bad args (Issue #30) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Directory classification should work correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Consecutive relative chdir calls should work. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fstat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that hard link counts are updated correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_update (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_alt_sep (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_collapse_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs raises exception if access denied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs creates a directories with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_with_file_size (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a relative directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exeption if creating directory named ''. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_with_looping_symlink (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent directory does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent is read only. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_all_dot_paths_removed_but_one (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_all_dot_paths_removed_if_another_path_component_exists (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_combine_dot_and_up_level_references_in_absolute_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_conserves_up_level_references_starting_from_current_dir (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dot_path_unchanged (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dots_in_path_collapses_to_last_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_becomes_dot_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ignores_up_level_references_starting_from_root (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_separators_collapsed_into_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_slashes_are_not_collapsed (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a directory with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a directory named with a trailing slash. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_link_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_symlink_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copying_preserves_byte_contents (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_content_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a device with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_fitting_content (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_full_after_reopened (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_full_after_reopened_rplus_seek (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_full_append (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_size_on_auto_mounted_drive_on_directory_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_size_on_auto_mounted_drive_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_size_on_unlimited_disk (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | open creates a file with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_on_automounted_drive (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_on_mounted_paths (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_diskusage_after_open_write (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_ascii_string_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_binary_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_directory_removal (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_directory_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_file_deletion (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_file_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_large_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_filesystem_size_after_2byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_filesystem_size_after_3byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resize_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resize_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_larger_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_smaller_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_disk_usage_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_hard_link_does_not_change_used_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_the_size_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_characters_before_root_ignored_in_join_paths (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_collapse_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_collapse_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_path_components (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_with_alt_separator (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_with_empty_parts (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_leave_file_unchanged_if_size_is_equal_to_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_new_file_and_directory (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/' as part of a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/'. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ordered_dirs (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pads_with_nullbytes_if_size_is_greater_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | removedirs works on directory names with trailing slashes. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_after_chdir (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_after_chdir_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_produce_empty_file_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_contents_to_dir_raises (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_m_time (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sets_content_empty_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_set_size_is_negative (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_set_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_file_if_size_is_smaller_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_regular_file_error_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_regular_file_error_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_current_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of an empty directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_read_only_directory_possible_in_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_read_only_directory_raises_in_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_changed_ids (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_incorrect_mode_type (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_size_but_no_content_creates_large_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can't rename a file that doesn't exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test if rename preserves mtime. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_link (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_access_on_file_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_access_on_file_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_file_created_for_none_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_string_does_not_exist (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_added_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_file_added_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_file_removed_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_relative_path_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_relative_path_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_removed_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_unadded_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to another filesystem device raises OSError. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_nonexistent_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_nonexistent_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_root_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lresolve_object_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lresolve_object_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_new_filesystem (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_raises_type_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_not_exists_subpath_named_like_file_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_operate_on_grandchild_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pickle_fs (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #445 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_nonexisten_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_non_directory_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_windows_root_dir_name (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abs_path_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_bytes_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target directory is not empty. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_bytes_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_deals_with_relative_non_root_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | abspath should correctly handle relative paths from a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | abspath should return a consistent representation of a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dirname (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dirname_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expand_root (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expand_user (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime_raises_os_error (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getattr_forward_to_real_os_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Forwards any non-faked calls to os.path. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_dir_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_dir_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_file_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_file_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_path_nonexistent (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link_case_sensitive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_umask (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir_with_cwd_change (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can use `rename()` to change filename case in a case-insensitive ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount_with_alternate_path_separator (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount_with_drive_letters (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount_with_unc_paths (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join_bytes (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join_strings (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath_strict (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped \"'strict' new in Python 3.10\"\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath_vs_abspath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relpath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_samefile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_side_effect_called (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_side_effect_file_object (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_two_level_absolute_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_two_level_relative_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_components_preceding_absolute_component_are_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_internal_empty_components_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_separator_added_for_components_ending_in_separator (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_separator_added_for_leading_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_one_empty_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_one_separator_added_between_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_one_separator_added_for_trailing_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_separators_not_stripped_from_single_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drives_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drives_are_auto_mounted_case_insensitive (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_mount_point_cannot_be_added_twice (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_new_directories_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_new_files_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_new_mount_points_get_new_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_unc_paths_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case_for_drive (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case_for_lazily_added_empty_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... skipped 'Regression test for Windows problem only'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case_for_non_existing_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dot_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dotted_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_should_get_normalized_to_root_path (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_path_forced_to_cwd (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_top_level_directory (pyfakefs.tests.fake_filesystem_test.OsPathInjectionRegressionTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_path_sep_matches_fake_filesystem_separator (pyfakefs.tests.fake_filesystem_test.PathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_not_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_st_ctime (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_incorrect_ns_argument_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_invalid_times_arg_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_no_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_current_time_if_args_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_specified_time (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_specified_time_in_ns (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk up ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk a non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_symlink (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Caller can modify list of directories to visit while walking. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk down ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getgid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getuid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_symlink_lazy_read (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_symlink_target_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_tree (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_tree_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_tree_to_other_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_file_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_file_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_paths_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_paths_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_non_existing_real_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_non_existing_real_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_real_file_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_real_file_to_non_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_existing_fake_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_existing_fake_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_from_lazily_added_real_directory (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_real_file (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sets_content_none_if_size_is_non_negative_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_size_is_negative (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_eliminate_trailing_separators_from_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_components_are_preserved_in_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_tail_if_path_ends_in_separator (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_separators (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_separator_is_not_stripped (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_slashes_do_not_split (pyfakefs.tests.fake_filesystem_test.SplitPathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob1 (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_empty (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_exact (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_no_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_question (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_star (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temp_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access400 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access600 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access700 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir into '..' should behave appropriately. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capabilities (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure that the fake capabilities are the same as the real ones. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should work on a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.chown() with bad args (Issue #30) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Directory classification should work correctly. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Consecutive relative chdir calls should work. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fstat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that hard link counts are updated correctly. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_update (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs raises exception if access denied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs creates a directories with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a relative directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exeption if creating directory named ''. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent directory does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent is read only. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a directory with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a directory named with a trailing slash. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a device with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | open creates a file with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/' as part of a ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/'. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | removedirs works on directory names with trailing slashes. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of an empty directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can't rename a file that doesn't exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test if rename preserves mtime. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to another filesystem device raises OSError. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target directory is not empty. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_umask (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can use `rename()` to change filename case in a case-insensitive ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk up ordering is correct. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking non-directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk a non-directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Caller can modify list of directories to visit while walking. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk down ordering is correct. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getgid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getuid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_not_reset_after_close (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_truncation (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via open(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_updated_via_close (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via close(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_updated_via_flush (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via flush(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_large_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_has_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'r' mode, read, flushed and ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'w+' mode and is then written to, ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'r' mode, read, flushed and ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'w+' mode and is then written to, ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_magic_dir (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existent_path (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.FakeFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Expect raise when opening a file in a missing directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closefd_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that text mode flag is ignored ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.RealFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Expect raise when opening a file in a missing directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that text mode flag is ignored ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normal_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_link (pyfakefs.tests.fake_open_test.RealResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normal_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_link (pyfakefs.tests.fake_open_test.ResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdtemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkstemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkstemp_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test tempfile.mkstemp(dir=). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_named_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_named_temporary_file_no_delete (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporary_directory (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporay_file_with_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_bad_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_sym_link (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_builtin_open_modes (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #799 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_in_a_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_with_binary_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_with_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime_nonexistant_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hard_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hard_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_folder_after_chdir (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_through_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_sibling_directory_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #799 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_both (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_run_module (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_run_path (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_path (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.FailedPatchingTest) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_root_behavior (pyfakefs.tests.fake_filesystem_unittest_test.NoRootUserTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_xattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Check that fs behaves as non-root user regardless of actual ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removeattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists1 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_setxattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists2 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists3 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists5 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists6 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists7 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_fails (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_patched_in_module_ending_with_io (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat_failing (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_filesystem_unittest_test.PathlibTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure fake file system is used for os in pathlib ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_fs (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_fs_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_without_patcher (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_filesystem_unittest_test.TestAbsolutePathOnWindows) ... skipped 'Windows-specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_attributes (pyfakefs.tests.fake_filesystem_unittest_test.TestAttributesWithFakeModuleNames)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Attributes of module under test are not patched ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_using_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_using_fs_functions (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_deprecation_warning (pyfakefs.tests.fake_filesystem_unittest_test.TestDeprecationSuppression)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temp_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Ensures that deprecation warnings are suppressed during module ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_copied (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access400 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access600 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_copied_again (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access700 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir into '..' should behave appropriately. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_drivelike_path (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capabilities (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure that the fake capabilities are the same as the real ones. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should work on a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.chown() with bad args (Issue #30) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_real_file_with_home (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #558 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_context_decorator (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Directory classification should work correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_context_manager (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Consecutive relative chdir calls should work. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_argument_order1 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_argument_order2 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fstat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that hard link counts are updated correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_update (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs raises exception if access denied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs creates a directories with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a relative directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exeption if creating directory named ''. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent directory does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent is read only. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists4 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists_as_default_arg_in_function (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a directory with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a directory named with a trailing slash. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists_as_default_arg_in_method (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a device with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | open creates a file with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_exists_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os_path_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_io_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_isdir_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_isfile_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_islink_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_path_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure `from os import path` patches `path`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_path_from_pathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_pathlib_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_own_path_module (pyfakefs.tests.fake_filesystem_unittest_test.TestPathNotPatchedIfNotOsPath) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_test_case_type (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_up_pyfakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCaseMixin) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fakepathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake glob module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_io_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake io module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake `open()` function is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake os module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_shutil (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake shutil module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_a (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/' as part of a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/'. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | removedirs works on directory names with trailing slashes. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_b (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tempdir_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tmp_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_value (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.create_file() which uses `open()` ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.delete_file() which uses `os.remove()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_exists (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.path_exists() which uses `os.path.exists()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_globs (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.get_glob(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of an empty directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can't rename a file that doesn't exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test if rename preserves mtime. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.scandir() which uses `os.scandir()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_real_file_access (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test `example.file_contents()` for a real file after adding it using ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rm_tree (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to another filesystem device raises OSError. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.rm_tree() using `shutil.rmtree()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.scandir() which uses `scandir.scandir()`. ... skipped 'Testing only if scandir module is installed'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | example (pyfakefs.tests)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | create_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.create_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | delete_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.delete_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | get_glob (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.get_glob ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | path_exists (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.path_exists ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_smart_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_class_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_class_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_method_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_method_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_module_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_module_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_submodule_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_import_as_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target directory is not empty. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pathlib_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_shutil_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file_for_unreadable_dir_windows (pyfakefs.tests.fake_pathlib_test.FakeFilesystemChmodTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_dir_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_symlink_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_umask (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can use `rename()` to change filename case in a case-insensitive ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_home (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure tests for class type will work ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_st_ctime (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_incorrect_ns_argument_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_invalid_times_arg_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_no_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_sets_current_time_if_args_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_sets_specified_time (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_sets_specified_time_in_ns (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk up ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk a non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Caller can modify list of directories to visit while walking. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk down ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getgid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getuid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_match (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temp_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access400 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access600 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access700 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir into '..' should behave appropriately. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capabilities (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure that the fake capabilities are the same as the real ones. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should work on a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.chown() with bad args (Issue #30) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Directory classification should work correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Consecutive relative chdir calls should work. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fstat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that hard link counts are updated correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_update (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_home (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure tests for class type will work ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_match (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ----------------------------------------------------------------------\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Ran 2133 tests in 5.028s\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | OK (skipped=864, expected failures=2)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs raises exception if access denied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs creates a directories with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a relative directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2705  Success - Main Run unit tests without extra packages as root\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exeption if creating directory named ''. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent directory does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent is read only. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a directory with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a directory named with a trailing slash. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a device with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | open creates a file with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/' as part of a ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/'. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | removedirs works on directory names with trailing slashes. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of an empty directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can't rename a file that doesn't exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test if rename preserves mtime. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Skipping because FakeFS does not match real FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to another filesystem device raises OSError. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target directory is not empty. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_umask (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can use `rename()` to change filename case in a case-insensitive ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Testing case insensitive specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk up ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk a non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Caller can modify list of directories to visit while walking. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk down ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getgid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getuid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'inode seems not to work in a Docker container'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main Install extra dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'inode seems not to work in a Docker container'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'inode seems not to work in a Docker container'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'inode seems not to work in a Docker container'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_not_reset_after_close (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_truncation (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test that file size gets updated via open(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_updated_via_close (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test that file size gets updated via close(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_updated_via_flush (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test that file size gets updated via flush(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_large_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/8.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'r' mode, read, flushed and ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'w+' mode and is then written to, ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'r' mode, read, flushed and ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'w+' mode and is then written to, ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... skipped 'Different exceptions with PyPy'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... skipped 'Different exceptions with PyPy'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.FakeFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Expect raise when opening a file in a missing directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closefd_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that text mode flag is ignored ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Different exceptions with PyPy'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Different exceptions with PyPy'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.RealFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Expect raise when opening a file in a missing directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Testing MacOS specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that text mode flag is ignored ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normal_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_link (pyfakefs.tests.fake_open_test.RealResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normal_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_link (pyfakefs.tests.fake_open_test.ResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdtemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkstemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkstemp_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test tempfile.mkstemp(dir=). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_named_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_named_temporary_file_no_delete (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temporary_directory (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temporay_file_with_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_bad_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_sym_link (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_builtin_open_modes (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_in_a_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_with_binary_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_with_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getmtime_nonexistant_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hard_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hard_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_folder_after_chdir (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_through_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_sibling_directory_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_both (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_run_module (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_run_path (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.FailedPatchingTest) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_root_behavior (pyfakefs.tests.fake_filesystem_unittest_test.NoRootUserTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Check that fs behaves as non-root user regardless of actual ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists1 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists2 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists3 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists5 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists6 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists7 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_fails (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_patched_in_module_ending_with_io (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat_failing (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_cwd (pyfakefs.tests.fake_filesystem_unittest_test.PathlibTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure fake file system is used for os in pathlib ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_fs (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_fs_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_without_patcher (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute (pyfakefs.tests.fake_filesystem_unittest_test.TestAbsolutePathOnWindows) ... skipped 'Windows-specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_attributes (pyfakefs.tests.fake_filesystem_unittest_test.TestAttributesWithFakeModuleNames)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Attributes of module under test are not patched ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_using_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_using_fs_functions (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_deprecation_warning (pyfakefs.tests.fake_filesystem_unittest_test.TestDeprecationSuppression)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Ensures that deprecation warnings are suppressed during module ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_copied (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_copied_again (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_drivelike_path (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_real_file_with_home (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #558 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_context_decorator (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_context_manager (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_argument_order1 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_argument_order2 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists4 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists_as_default_arg_in_function (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists_as_default_arg_in_method (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_exists_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_function_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_function_from_os_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_function_from_os_path_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_io_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_isdir_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_isfile_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_islink_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_path_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure `from os import path` patches `path`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_path_from_pathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_pathlib_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_own_path_module (pyfakefs.tests.fake_filesystem_unittest_test.TestPathNotPatchedIfNotOsPath) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_test_case_type (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_up_pyfakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCaseMixin) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fakepathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake glob module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_io_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake io module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake `open()` function is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake os module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_shutil (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake shutil module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_a (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_b (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tempdir_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tmp_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_value (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.create_file() which uses `open()` ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_delete_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.delete_file() which uses `os.remove()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_exists (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.path_exists() which uses `os.path.exists()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_globs (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.get_glob(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.scandir() which uses `os.scandir()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_real_file_access (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test `example.file_contents()` for a real file after adding it using ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rm_tree (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.rm_tree() using `shutil.rmtree()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.scandir() which uses `scandir.scandir()`. ... skipped 'Testing only if scandir module is installed'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | example (pyfakefs.tests)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | create_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.create_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | delete_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.delete_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | get_glob (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.get_glob ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | path_exists (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.path_exists ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_smart_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_class_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_class_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_method_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_method_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_module_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_module_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_submodule_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_import_as_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pathlib_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_shutil_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_file_for_unreadable_dir_windows (pyfakefs.tests.fake_pathlib_test.FakeFilesystemChmodTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_dir_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_symlink_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_home (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure tests for class type will work ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_match (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_home (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure tests for class type will work ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_match (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Testing Windows specific functionality'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | ----------------------------------------------------------------------\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Ran 2133 tests in 13.218s\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | OK (skipped=313, expected failures=2)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2705  Success - Main Run unit tests without extra packages as non-root user\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \u2b50 Run Main Run setup.py test (uses pytest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Ignoring pandas: markers 'python_version > \"3.7\"' don't match your environment\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting pathlib2>=2.3.2 (from -r extra_requirements.txt (line 10))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading pathlib2-2.3.7.post1-py2.py3-none-any.whl (18 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting scandir>=1.8 (from -r extra_requirements.txt (line 11))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading scandir-1.10.0.tar.gz (33 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Preparing metadata (setup.py): started\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Preparing metadata (setup.py): finished with status 'done'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | running test\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | WARNING: Testing via this command is deprecated and will be removed in a future version. Users looking for a generic test entry point independent of test runner are encouraged to use tox.\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | running egg_info\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | writing pyfakefs.egg-info/PKG-INFO\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | writing dependency_links to pyfakefs.egg-info/dependency_links.txt\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | writing entry points to pyfakefs.egg-info/entry_points.txt\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | writing top-level names to pyfakefs.egg-info/top_level.txt\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | reading manifest file 'pyfakefs.egg-info/SOURCES.txt'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | reading manifest template 'MANIFEST.in'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | writing manifest file 'pyfakefs.egg-info/SOURCES.txt'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | running build_ext\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting pandas==1.3.5 (from -r extra_requirements.txt (line 16))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading pandas-1.3.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.3 MB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_both (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... /opt/hostedtoolcache/PyPy/3.7.10/x64/lib-python/3/runpy.py:125: RuntimeWarning: 'pyfakefs.tests.fixtures.config_module' found in sys.modules after import of package 'pyfakefs.tests.fixtures', but prior to execution of 'pyfakefs.tests.fixtures.config_module'; this may result in unpredictable behaviour\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   warn(RuntimeWarning(msg))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_run_module (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... /opt/hostedtoolcache/PyPy/3.7.10/x64/lib-python/3/runpy.py:125: RuntimeWarning: 'pyfakefs.tests.fixtures.config_module' found in sys.modules after import of package 'pyfakefs.tests.fixtures', but prior to execution of 'pyfakefs.tests.fixtures.config_module'; this may result in unpredictable behaviour\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   warn(RuntimeWarning(msg))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_run_path (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.FailedPatchingTest) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_root_behavior (pyfakefs.tests.fake_filesystem_unittest_test.NoRootUserTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Check that fs behaves as non-root user regardless of actual ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists1 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists2 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists3 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists5 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists6 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists7 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_fails (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_patched_in_module_ending_with_io (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 11.3/11.3 MB 6.0 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat_failing (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_cwd (pyfakefs.tests.fake_filesystem_unittest_test.PathlibTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure fake file system is used for os in pathlib ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting xlrd==2.0.1 (from -r extra_requirements.txt (line 18))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading xlrd-2.0.1-py2.py3-none-any.whl (96 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.5/96.5 kB 3.4 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_fs (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_fs_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_without_patcher (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute (pyfakefs.tests.fake_filesystem_unittest_test.TestAbsolutePathOnWindows) ... skipped 'Windows-specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_attributes (pyfakefs.tests.fake_filesystem_unittest_test.TestAttributesWithFakeModuleNames)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Attributes of module under test are not patched ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_using_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_using_fs_functions (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_deprecation_warning (pyfakefs.tests.fake_filesystem_unittest_test.TestDeprecationSuppression)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Ensures that deprecation warnings are suppressed during module ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting openpyxl==3.1.2 (from -r extra_requirements.txt (line 19))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_copied (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... copying ./test2/subdir/1.txt -> ./test/subdir\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | removing './test2/' (and everything under it)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading openpyxl-3.1.2-py2.py3-none-any.whl (249 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_copied_again (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... copying ./test2/subdir/1.txt -> ./test/subdir\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | removing './test2/' (and everything under it)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_drivelike_path (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_real_file_with_home (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #558 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_context_decorator (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_context_manager (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_argument_order1 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_argument_order2 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 250.0/250.0 kB 899.3 kB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting python-dateutil>=2.7.3 (from pandas==1.3.5->-r extra_requirements.txt (line 16))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 247.7/247.7 kB 947.8 kB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting pytz>=2017.3 (from pandas==1.3.5->-r extra_requirements.txt (line 16))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 502.3/502.3 kB 4.0 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting numpy>=1.17.3 (from pandas==1.3.5->-r extra_requirements.txt (line 16))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading numpy-1.21.6-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (15.7 MB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists4 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists_as_default_arg_in_function (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists_as_default_arg_in_method (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_exists_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_function_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_function_from_os_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_function_from_os_path_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_io_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_isdir_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_isfile_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_islink_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_path_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure `from os import path` patches `path`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_path_from_pathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_pathlib_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_own_path_module (pyfakefs.tests.fake_filesystem_unittest_test.TestPathNotPatchedIfNotOsPath) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_test_case_type (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_up_pyfakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCaseMixin) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fakepathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake glob module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_io_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake io module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake `open()` function is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake os module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_shutil (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake shutil module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_a (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_b (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tempdir_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tmp_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_value (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_import_as_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pathlib_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_shutil_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_alt_sep (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_collapse_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_with_file_size (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_with_looping_symlink (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_all_dot_paths_removed_but_one (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_all_dot_paths_removed_if_another_path_component_exists (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_combine_dot_and_up_level_references_in_absolute_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_conserves_up_level_references_starting_from_current_dir (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dot_path_unchanged (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dots_in_path_collapses_to_last_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_becomes_dot_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ignores_up_level_references_starting_from_root (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_separators_collapsed_into_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_slashes_are_not_collapsed (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_link_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_symlink_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copying_preserves_byte_contents (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_content_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_fitting_content (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_full_after_reopened (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_full_after_reopened_rplus_seek (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_full_append (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_size_on_auto_mounted_drive_on_directory_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_size_on_auto_mounted_drive_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_size_on_unlimited_disk (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_on_automounted_drive (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_on_mounted_paths (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_diskusage_after_open_write (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_ascii_string_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_binary_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_directory_removal (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_directory_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_file_deletion (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_file_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_large_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_filesystem_size_after_2byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_filesystem_size_after_3byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resize_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resize_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_larger_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_smaller_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_disk_usage_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_hard_link_does_not_change_used_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_the_size_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_characters_before_root_ignored_in_join_paths (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_collapse_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_collapse_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_path_components (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_with_alt_separator (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_with_empty_parts (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_leave_file_unchanged_if_size_is_equal_to_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_new_file_and_directory (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ordered_dirs (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pads_with_nullbytes_if_size_is_greater_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_after_chdir (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_after_chdir_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_produce_empty_file_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_contents_to_dir_raises (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_m_time (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sets_content_empty_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_set_size_is_negative (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_set_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_file_if_size_is_smaller_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_regular_file_error_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_regular_file_error_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_current_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_read_only_directory_possible_in_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_read_only_directory_raises_in_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_changed_ids (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_incorrect_mode_type (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_size_but_no_content_creates_large_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_link (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_access_on_file_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_access_on_file_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_file_created_for_none_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_string_does_not_exist (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_added_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_file_added_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_file_removed_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_relative_path_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_relative_path_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_removed_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_unadded_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_nonexistent_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_nonexistent_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_root_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lresolve_object_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lresolve_object_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_new_filesystem (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_raises_type_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_not_exists_subpath_named_like_file_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_operate_on_grandchild_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pickle_fs (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #445 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_nonexisten_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_non_directory_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_windows_root_dir_name (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abs_path_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_bytes_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_bytes_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_deals_with_relative_non_root_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | abspath should correctly handle relative paths from a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | abspath should return a consistent representation of a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dirname (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dirname_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expand_root (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expand_user (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime_raises_os_error (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getattr_forward_to_real_os_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Forwards any non-faked calls to os.path. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_dir_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_dir_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_file_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_file_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_path_nonexistent (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link_case_sensitive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir_with_cwd_change (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount_with_alternate_path_separator (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount_with_drive_letters (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount_with_unc_paths (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join_bytes (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join_strings (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath_strict (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped \"'strict' new in Python 3.10\"\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath_vs_abspath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relpath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_samefile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_side_effect_called (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_side_effect_file_object (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_two_level_absolute_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_two_level_relative_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_components_preceding_absolute_component_are_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_internal_empty_components_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_separator_added_for_components_ending_in_separator (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_separator_added_for_leading_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_one_empty_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_one_separator_added_between_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_one_separator_added_for_trailing_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_separators_not_stripped_from_single_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drives_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drives_are_auto_mounted_case_insensitive (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_mount_point_cannot_be_added_twice (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_new_directories_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_new_files_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_new_mount_points_get_new_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_unc_paths_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case_for_drive (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case_for_lazily_added_empty_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... skipped 'Regression test for Windows problem only'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case_for_non_existing_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dot_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dotted_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_should_get_normalized_to_root_path (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_path_forced_to_cwd (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_top_level_directory (pyfakefs.tests.fake_filesystem_test.OsPathInjectionRegressionTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_path_sep_matches_fake_filesystem_separator (pyfakefs.tests.fake_filesystem_test.PathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_not_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_symlink (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_symlink_lazy_read (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_symlink_target_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_tree (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_tree_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_tree_to_other_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_file_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_file_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_paths_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_paths_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_non_existing_real_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_non_existing_real_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_real_file_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_real_file_to_non_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_existing_fake_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_existing_fake_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_from_lazily_added_real_directory (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_real_file (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sets_content_none_if_size_is_non_negative_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_size_is_negative (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_eliminate_trailing_separators_from_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_components_are_preserved_in_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_tail_if_path_ends_in_separator (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_separators (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_separator_is_not_stripped (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_slashes_do_not_split (pyfakefs.tests.fake_filesystem_test.SplitPathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_file_for_unreadable_dir_windows (pyfakefs.tests.fake_pathlib_test.FakeFilesystemChmodTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_dir_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_symlink_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_home (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 15.7/15.7 MB 7.3 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure tests for class type will work ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting et-xmlfile (from openpyxl==3.1.2->-r extra_requirements.txt (line 19))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading et_xmlfile-1.1.0-py3-none-any.whl (4.7 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Collecting six (from pathlib2>=2.3.2->-r extra_requirements.txt (line 10))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Building wheels for collected packages: scandir\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Building wheel for scandir (setup.py): started\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_match (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_home (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure tests for class type will work ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_match (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_bad_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_sym_link (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_builtin_open_modes (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_in_a_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_with_binary_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_with_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getmtime_nonexistant_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hard_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hard_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_folder_after_chdir (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_through_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Building wheel for scandir (setup.py): finished with status 'done'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Created wheel for scandir: filename=scandir-1.10.0-cp37-cp37m-linux_x86_64.whl size=49692 sha256=c37422969844481fa00a9937d0880db39bc03992ba2710b703730d76efc188d9\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/3e/63/83/28b90bed614474858ca1d8c95116b4c13e59ce00f640ea3152\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Successfully built scandir\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_sibling_directory_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_smart_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_class_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_class_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_method_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_method_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_module_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_module_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_submodule_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'r' mode, read, flushed and ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'w+' mode and is then written to, ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'r' mode, read, flushed and ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'w+' mode and is then written to, ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdtemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkstemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkstemp_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test tempfile.mkstemp(dir=). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_named_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_named_temporary_file_no_delete (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Installing collected packages: scandir, pytz, xlrd, six, numpy, et-xmlfile, python-dateutil, pathlib2, openpyxl, pandas\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temporary_directory (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temporay_file_with_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... skipped 'Different exceptions with PyPy'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... skipped 'Different exceptions with PyPy'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.FakeFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Expect raise when opening a file in a missing directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closefd_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that text mode flag is ignored ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.RealFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Expect raise when opening a file in a missing directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that text mode flag is ignored ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normal_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_link (pyfakefs.tests.fake_open_test.RealResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normal_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_link (pyfakefs.tests.fake_open_test.ResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.create_file() which uses `open()` ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_delete_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.delete_file() which uses `os.remove()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_exists (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.path_exists() which uses `os.path.exists()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_globs (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.get_glob(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.scandir() which uses `os.scandir()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_real_file_access (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test `example.file_contents()` for a real file after adding it using ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rm_tree (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.rm_tree() using `shutil.rmtree()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.scandir() which uses `scandir.scandir()`. ... skipped 'Testing only if scandir module is installed'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | example (pyfakefs.tests)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | create_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.create_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | delete_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.delete_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | get_glob (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.get_glob ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | path_exists (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.path_exists ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #799 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #799 ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_path (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_xattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removeattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_setxattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temp_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access400 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access600 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access700 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir into '..' should behave appropriately. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capabilities (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure that the fake capabilities are the same as the real ones. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should work on a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.chown() with bad args (Issue #30) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Directory classification should work correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Consecutive relative chdir calls should work. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fstat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that hard link counts are updated correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_update (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs raises exception if access denied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs creates a directories with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a relative directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exeption if creating directory named ''. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent directory does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent is read only. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a directory with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a directory named with a trailing slash. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a device with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | open creates a file with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/' as part of a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/'. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | removedirs works on directory names with trailing slashes. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of an empty directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can't rename a file that doesn't exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test if rename preserves mtime. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to another filesystem device raises OSError. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target directory is not empty. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_umask (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can use `rename()` to change filename case in a case-insensitive ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_st_ctime (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_incorrect_ns_argument_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_invalid_times_arg_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_no_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_sets_current_time_if_args_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_sets_specified_time (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_sets_specified_time_in_ns (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk up ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk a non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Caller can modify list of directories to visit while walking. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk down ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getgid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getuid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temp_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access400 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access600 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access700 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir into '..' should behave appropriately. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capabilities (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure that the fake capabilities are the same as the real ones. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should work on a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.chown() with bad args (Issue #30) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Directory classification should work correctly. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Consecutive relative chdir calls should work. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fstat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that hard link counts are updated correctly. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_update (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs raises exception if access denied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs creates a directories with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a relative directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exeption if creating directory named ''. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent directory does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent is read only. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a directory with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a directory named with a trailing slash. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a device with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | open creates a file with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/' as part of a ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/'. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | removedirs works on directory names with trailing slashes. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of an empty directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can't rename a file that doesn't exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test if rename preserves mtime. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to another filesystem device raises OSError. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target directory is not empty. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_umask (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can use `rename()` to change filename case in a case-insensitive ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk up ordering is correct. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking non-directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk a non-directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Caller can modify list of directories to visit while walking. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk down ordering is correct. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getgid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getuid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_not_reset_after_close (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_truncation (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test that file size gets updated via open(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_updated_via_close (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test that file size gets updated via close(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_updated_via_flush (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test that file size gets updated via flush(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_large_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob1 (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_empty (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_exact (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_no_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_question (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_star (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_has_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_magic_dir (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existent_path (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | ----------------------------------------------------------------------\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Ran 2133 tests in 12.022s\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | OK (skipped=866, expected failures=2)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2705  Success - Main Run setup.py test (uses pytest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \u2b50 Run Main Run unit tests without extra packages as root\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Successfully installed et-xmlfile-1.1.0 numpy-1.21.6 openpyxl-3.1.2 pandas-1.3.5 pathlib2-2.3.7.post1 python-dateutil-2.8.2 pytz-2023.3 scandir-1.10.0 six-1.16.0 xlrd-2.0.1\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | [notice] To update, run: pip install --upgrade pip\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2705  Success - Main Install extra dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main Run unit tests with extra packages as non-root user\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/9.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_alt_sep (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_collapse_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_with_file_size (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_with_looping_symlink (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_all_dot_paths_removed_but_one (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_all_dot_paths_removed_if_another_path_component_exists (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_combine_dot_and_up_level_references_in_absolute_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_conserves_up_level_references_starting_from_current_dir (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dot_path_unchanged (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dots_in_path_collapses_to_last_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_becomes_dot_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ignores_up_level_references_starting_from_root (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_separators_collapsed_into_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_slashes_are_not_collapsed (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_link_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_symlink_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copying_preserves_byte_contents (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_content_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_fitting_content (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_creating_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_full_after_reopened (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_full_after_reopened_rplus_seek (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_full_append (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_size_on_auto_mounted_drive_on_directory_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_size_on_auto_mounted_drive_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_size_on_unlimited_disk (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_on_automounted_drive (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_on_mounted_paths (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_diskusage_after_open_write (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_ascii_string_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_binary_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_directory_removal (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_directory_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_file_deletion (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_file_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_system_size_after_large_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_filesystem_size_after_2byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_filesystem_size_after_3byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resize_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resize_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_larger_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_smaller_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_disk_usage_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_hard_link_does_not_change_used_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_the_size_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_characters_before_root_ignored_in_join_paths (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_collapse_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_collapse_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_path_components (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_alt_sep (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_with_mixed_separators (pyfakefs.tests.fake_filesystem_test.AlternativePathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_drive_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_with_file_size (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_with_looping_symlink (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.CaseInsensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_with_different_case_root (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_different_case_dir (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_path_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split_with_alt_separator (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_isfile (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object (pyfakefs.tests.fake_filesystem_test.CaseSensitiveFakeFilesystemTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_all_dot_paths_removed_but_one (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_all_dot_paths_removed_if_another_path_component_exists (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_combine_dot_and_up_level_references_in_absolute_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_conserves_up_level_references_starting_from_current_dir (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dot_path_unchanged (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_with_empty_parts (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dots_in_path_collapses_to_last_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_becomes_dot_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ignores_up_level_references_starting_from_root (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_separators_collapsed_into_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_slashes_are_not_collapsed (pyfakefs.tests.fake_filesystem_test.CollapsePathPipeSeparatorTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_link_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_symlink_with_non_existent_parent (pyfakefs.tests.fake_filesystem_test.ConvenienceMethodTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copying_preserves_byte_contents (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_content_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_fitting_content (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_creating_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_after_reopened (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_after_reopened_rplus_seek (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_full_append (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_auto_mounted_drive_on_directory_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_leave_file_unchanged_if_size_is_equal_to_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_auto_mounted_drive_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_new_file_and_directory (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_size_on_unlimited_disk (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_automounted_drive (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ordered_dirs (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pads_with_nullbytes_if_size_is_greater_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_on_mounted_paths (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_diskusage_after_open_write (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_ascii_string_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_binary_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_after_chdir (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_directory_removal (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_directory_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_file_deletion (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_after_chdir_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_file_rename (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_system_size_after_large_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_filesystem_size_after_2byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_filesystem_size_after_3byte_unicode_file_creation (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_produce_empty_file_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resize_file_with_fitting_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resize_file_with_size_too_large (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_larger_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_contents_to_dir_raises (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_smaller_disk_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_m_time (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sets_content_empty_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_disk_usage_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_set_size_is_negative (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_hard_link_does_not_change_used_size (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_set_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_the_size_of_correct_mount_point_is_used (pyfakefs.tests.fake_filesystem_test.DiskSpaceTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_characters_before_root_ignored_in_join_paths (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_file_if_size_is_smaller_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_collapse_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_path_components (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initial_value (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_drive_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_regular_file_error_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_bytes (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_str (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_drive_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_regular_file_error_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_path_with_unc_path_alt_sep (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split_with_alt_separator (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_drive (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_empty_parts (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_with_unc_path (pyfakefs.tests.fake_filesystem_test.DriveLetterSupportTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_object_to_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_inode (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_leave_file_unchanged_if_size_is_equal_to_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_new_file_and_directory (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ordered_dirs (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pads_with_nullbytes_if_size_is_greater_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_after_chdir (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_after_chdir_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_with_drive (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_produce_empty_file_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_entry (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_contents_to_dir_raises (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_m_time (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sets_content_empty_if_set_size_is_zero (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_set_size_is_negative (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_set_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_file_if_size_is_smaller_than_current_size (pyfakefs.tests.fake_filesystem_test.FakeDirectoryUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_regular_file_error_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_regular_file_error_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_object_to_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_directory_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_current_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_read_only_directory_possible_in_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_read_only_directory_raises_in_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_changed_ids (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_incorrect_mode_type (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_size_but_no_content_creates_large_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_directory_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_link (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_access_on_file_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_directory_access_on_file_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_file_created_for_none_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_string_does_not_exist (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_added_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_file_added_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_file_removed_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_current_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_relative_path_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_read_only_directory_possible_in_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_read_only_directory_raises_in_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_relative_path_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_removed_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_unadded_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_root_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_nonexistent_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_nonexistent_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_in_root_directory_already_exists_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_root_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lresolve_object_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_changed_ids (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_incorrect_mode_type (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_size_but_no_content_creates_large_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lresolve_object_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_new_filesystem (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_raises_type_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_not_exists_subpath_named_like_file_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_operate_on_grandchild_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pickle_fs (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #445 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_nonexisten_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_link (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_non_directory_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_access_on_file_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_windows_root_dir_name (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abs_path_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_bytes_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_directory_access_on_file_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_bytes_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_deals_with_relative_non_root_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | abspath should correctly handle relative paths from a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_file_created_for_none_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | abspath should return a consistent representation of a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_string_does_not_exist (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_added_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dirname (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dirname_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_file_added_to_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_file_removed_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expand_root (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expand_user (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_mtime_raises_os_error (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getattr_forward_to_real_os_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Forwards any non-faked calls to os.path. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_dir_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_dir_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_relative_path_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_file_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_file_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_path_nonexistent (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link_case_sensitive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir_with_cwd_change (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_relative_path_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_removed_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_alternate_path_separator (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_drive_letters (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_unadded_file (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount_with_unc_paths (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join_bytes (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_nonexistent_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join_strings (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_nonexistent_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath_strict (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped \"'strict' new in Python 3.10\"\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_root_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath_vs_abspath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lresolve_object_posix (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitroot_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_side_effect_called (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_side_effect_file_object (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lresolve_object_windows (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_two_level_absolute_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_two_level_relative_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_new_filesystem (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_components_preceding_absolute_component_are_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_internal_empty_components_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_raises_type_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separator_added_for_components_ending_in_separator (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separator_added_for_leading_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_empty_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_separator_added_between_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_one_separator_added_for_trailing_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_separators_not_stripped_from_single_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_not_exists_subpath_named_like_file_contents (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_operate_on_grandchild_directory (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pickle_fs (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drives_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #445 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_nonexisten_object_from_root_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_child (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drives_are_auto_mounted_case_insensitive (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_mount_point_cannot_be_added_twice (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_child_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_non_directory_error (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_directories_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_object_from_root (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_files_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_new_mount_points_get_new_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_object (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_windows_root_dir_name (pyfakefs.tests.fake_filesystem_test.FakeFilesystemUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abs_path_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_bytes_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_drive (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_lazily_added_empty_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... skipped 'Regression test for Windows problem only'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normalize_case_for_non_existing_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dot_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dotted_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_should_get_normalized_to_root_path (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path_forced_to_cwd (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_bytes_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_deals_with_relative_non_root_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_top_level_directory (pyfakefs.tests.fake_filesystem_test.OsPathInjectionRegressionTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_path_sep_matches_fake_filesystem_separator (pyfakefs.tests.fake_filesystem_test.PathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | abspath should correctly handle relative paths from a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | abspath should return a consistent representation of a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath_windows (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dirname (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dirname_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_drive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expand_root (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expand_user (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_mtime_raises_os_error (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getattr_forward_to_real_os_path (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Forwards any non-faked calls to os.path. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_dir_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_dir_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_file_empty (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_file_non_zero_size (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_path_nonexistent (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link_case_sensitive (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs_with_drive_component (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir_with_cwd_change (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount_with_alternate_path_separator (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount_with_drive_letters (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount_with_unc_paths (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join_bytes (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join_strings (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath_strict (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... skipped \"'strict' new in Python 3.10\"\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath_vs_abspath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relpath (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_samefile (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitroot_posix (pyfakefs.tests.fake_filesystem_test.FakePathModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_side_effect_called (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_side_effect_file_object (pyfakefs.tests.fake_filesystem_test.FileSideEffectTests) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_path_with_one_component_should_return_component (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path_should_return_empty_list (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_two_level_absolute_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_two_level_relative_path_should_return_components (pyfakefs.tests.fake_filesystem_test.GetPathComponentsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_components_preceding_absolute_component_are_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_internal_empty_components_ignored (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_separator_added_for_components_ending_in_separator (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_separator_added_for_leading_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_one_empty_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_one_separator_added_between_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_one_separator_added_for_trailing_empty_components (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_separators_not_stripped_from_single_component (pyfakefs.tests.fake_filesystem_test.JoinPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_not_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drives_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drives_are_auto_mounted_case_insensitive (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_mount_point_cannot_be_added_twice (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_new_directories_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_new_files_get_correct_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_new_mount_points_get_new_device_number (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_unc_paths_are_auto_mounted (pyfakefs.tests.fake_filesystem_test.MountPointTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case_for_drive (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case_for_lazily_added_empty_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... skipped 'Regression test for Windows problem only'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normalize_case_for_non_existing_file (pyfakefs.tests.fake_filesystem_test.NormalizeCaseTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dot_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dotted_path_is_normalized (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_should_get_normalized_to_root_path (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_path_forced_to_cwd (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path_remains_unchanged (pyfakefs.tests.fake_filesystem_test.NormalizePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_top_level_directory (pyfakefs.tests.fake_filesystem_test.OsPathInjectionRegressionTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_path_sep_matches_fake_filesystem_separator (pyfakefs.tests.fake_filesystem_test.PathSeparatorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink_lazy_read (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_symlink_target_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_tree_to_other_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_not_lazily (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_paths_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_paths_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_non_existing_real_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_non_existing_real_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_real_file_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_real_file_to_non_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_existing_fake_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_existing_fake_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_object_from_lazily_added_real_directory (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_real_file (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sets_content_none_if_size_is_non_negative_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_size_is_negative (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_should_throw_if_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_eliminate_trailing_separators_from_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path_components_are_preserved_in_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_tail_if_path_ends_in_separator (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_separators (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_separator_is_not_stripped (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_slashes_do_not_split (pyfakefs.tests.fake_filesystem_test.SplitPathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob1 (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_empty (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_exact (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_no_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_symlink (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_question (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_star (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_has_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_magic_dir (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existent_path (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_symlink_lazy_read (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #799 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_symlink_target_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_tree (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_tree_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #799 ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_path (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_xattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removeattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_setxattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_tree_to_other_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_file_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_file_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_paths_read_only (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_paths_read_write (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_non_existing_real_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_non_existing_real_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_real_file_to_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_real_file_to_non_existing_path (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_existing_fake_directory_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_existing_fake_file_raises (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_object_from_lazily_added_real_directory (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_real_file (pyfakefs.tests.fake_filesystem_test.RealFileSystemAccessTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sets_content_none_if_size_is_non_negative_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_size_is_negative (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_should_throw_if_size_is_not_integer (pyfakefs.tests.fake_filesystem_test.SetLargeFileSizeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_eliminate_trailing_separators_from_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path_components_are_preserved_in_head (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_tail_if_path_ends_in_separator (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_separators (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_separator_is_not_stripped (pyfakefs.tests.fake_filesystem_test.SplitPathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_slashes_do_not_split (pyfakefs.tests.fake_filesystem_test.SplitPathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests that '/' is not treated specially if the ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temp_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access400 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access600 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access700 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir into '..' should behave appropriately. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capabilities (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure that the fake capabilities are the same as the real ones. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should work on a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.chown() with bad args (Issue #30) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Directory classification should work correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Consecutive relative chdir calls should work. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fstat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that hard link counts are updated correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob1 (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_empty (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_update (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_exact (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_no_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_question (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs raises exception if access denied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs creates a directories with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a relative directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exeption if creating directory named ''. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent directory does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_star (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent is read only. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_has_magic (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_magic_dir (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a directory with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a directory named with a trailing slash. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a device with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existent_path (pyfakefs.tests.fake_filesystem_glob_test.FakeGlobUnitTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | open creates a file with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/' as part of a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/'. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | removedirs works on directory names with trailing slashes. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of an empty directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can't rename a file that doesn't exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test if rename preserves mtime. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to another filesystem device raises OSError. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target directory is not empty. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.FakeCopyFileTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_umask (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can use `rename()` to change filename case in a case-insensitive ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #799 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_st_ctime (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_incorrect_ns_argument_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_invalid_times_arg_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_no_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_current_time_if_args_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_specified_time (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_sets_specified_time_in_ns (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk up ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk a non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Caller can modify list of directories to visit while walking. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk down ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getgid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getuid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... skipped 'Path-like objects have been introduced in Python 3.6'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.FakeShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_common_case (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_moving_dir_into_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_dir_is_not_writable_under_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_exists_and_is_not_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_dest_is_a_symlink_to_src (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_source_and_dest_are_the_same_file (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_doesnt_exist (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_is_a_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_raises_if_src_not_readable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_succeeds_if_dest_exists_and_is_writable (pyfakefs.tests.fake_filesystem_shutil_test.RealCopyFileTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_catch_permission_error (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2 (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy2_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copy_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copystat_symlinks (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #799 ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_copytree_src_is_file (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_disk_usage_with_path (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_in_same_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_directory (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_move_file_into_other_filesystem (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_non_existing_dir_with_handler (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_fails_under_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_open_file_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_with_trailing_slash (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_dir_in_posix (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmtree_without_permission_for_a_file_in_windows (pyfakefs.tests.fake_filesystem_shutil_test.RealShutilModuleTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_path (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_xattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removeattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_setxattr (pyfakefs.tests.fake_os_test.FakeExtendedAttributeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Path-like objects have been introduced in Python 3.6'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_dst_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_src_fd (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temp_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access400 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access600 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access700 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir into '..' should behave appropriately. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capabilities (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure that the fake capabilities are the same as the real ones. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should work on a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.chown() with bad args (Issue #30) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Directory classification should work correctly. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Consecutive relative chdir calls should work. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fstat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that hard link counts are updated correctly. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_update (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime (pyfakefs.tests.fake_os_test.FakeOsModuleDirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs raises exception if access denied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs creates a directories with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a relative directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exeption if creating directory named ''. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent directory does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if parent is read only. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a directory with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir can create a directory named with a trailing slash. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir creates a device with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | open creates a file with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/' as part of a ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises exception if asked to remove '/'. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | removedirs works on directory names with trailing slashes. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of an empty directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can't rename a file that doesn't exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test if rename preserves mtime. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to another filesystem device raises OSError. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target directory is not empty. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception if the target does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_umask (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can use `rename()` to change filename case in a case-insensitive ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test a rename of a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a directory to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Can remove a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk up ordering is correct. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Calls onerror with correct errno when walking non-directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Raises an exception when attempting to walk a non-directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Caller can modify list of directories to visit while walking. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Walk down ordering is correct. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getgid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getuid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'no dir_fd support for scandir package'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Path-like objects have been introduced in Python 3.6'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Path-like objects have been introduced in Python 3.6'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_not_reset_after_close (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_truncation (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via open(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_updated_via_close (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via close(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_size_updated_via_flush (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test that file size gets updated via flush(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_large_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'r' mode, read, flushed and ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'w+' mode and is then written to, ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'r' mode, read, flushed and ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | When an existing file is opened with 'w+' mode and is then written to, ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temp_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.FakeFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Expect raise when opening a file in a missing directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_read (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.FakeOsModuleLowLevelFileOpTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access400 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access600 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access700 (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir into '..' should behave appropriately. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capabilities (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure that the fake capabilities are the same as the real ones. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should work on a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closefd_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that text mode flag is ignored ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closed (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.RealFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Expect raise when opening a file in a missing directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test that text mode flag is ignored ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normal_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_link (pyfakefs.tests.fake_open_test.RealResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normal_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.chown() with bad args (Issue #30) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime_link (pyfakefs.tests.fake_open_test.ResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdtemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkstemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkstemp_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test tempfile.mkstemp(dir=). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_named_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_named_temporary_file_no_delete (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporary_directory (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_temporay_file_with_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_absolute_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Directory classification should work correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_bad_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Consecutive relative chdir calls should work. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_sym_link (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_broken_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fstat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that hard link counts are updated correctly. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_update (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_builtin_open_modes (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_in_a_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_with_binary_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_with_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime_nonexistant_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hard_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs raises exception if access denied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs creates a directories with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hard_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a relative directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to_folder_after_chdir (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exeption if creating directory named ''. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_none_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent directory does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_through_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent is read only. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a directory with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a directory named with a trailing slash. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_root_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a device with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | open creates a file with umask applied. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_sym_link_to_sibling_directory_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/' as part of a ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/'. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | removedirs works on directory names with trailing slashes. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of an empty directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can't rename a file that doesn't exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test if rename preserves mtime. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to another filesystem device raises OSError. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target directory is not empty. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_both (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_run_module (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_run_path (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.FailedPatchingTest) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_non_root_behavior (pyfakefs.tests.fake_filesystem_unittest_test.NoRootUserTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Check that fs behaves as non-root user regardless of actual ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists1 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists2 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists3 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists5 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists6 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_umask (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.FakeOsModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can use `rename()` to change filename case in a case-insensitive ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists7 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_fails (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open_patched_in_module_ending_with_io (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_system_stat_failing (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_filesystem_unittest_test.PathlibTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure fake file system is used for os in pathlib ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_fs (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_fs_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pause_resume_without_patcher (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_filesystem_unittest_test.TestAbsolutePathOnWindows) ... skipped 'Windows-specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_attributes (pyfakefs.tests.fake_filesystem_unittest_test.TestAttributesWithFakeModuleNames)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Attributes of module under test are not patched ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_using_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_using_fs_functions (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_no_deprecation_warning (pyfakefs.tests.fake_filesystem_unittest_test.TestDeprecationSuppression)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Ensures that deprecation warnings are suppressed during module ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_copied (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_copied_again (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_drivelike_path (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_real_file_with_home (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Regression test for #558 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.FakeOsModuleTestCaseInsensitiveFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_st_ctime (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_dir (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_incorrect_ns_argument_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_invalid_times_arg_raises (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_no_follow_symlinks (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_sets_current_time_if_args_is_none (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_sets_specified_time (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_sets_specified_time_in_ns (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.FakeOsModuleTimeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_context_decorator (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_context_manager (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk up ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_argument_order1 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_argument_order2 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk a non-directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Caller can modify list of directories to visit while walking. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.FakeOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk down ordering is correct. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getgid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getuid (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.FakeOsUnreadableDirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.FakeScandirTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.FakeScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode444Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | testOpenCreateMode666Windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_after_create_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_devnull_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_open_raises_without_create_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_sendfile_to_regular_file_under_macos (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Testing MacOs only behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_create_truncate_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_for_writing_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_raises_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_read_only_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_if_symlink_exists_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_exclusive_raises_if_symlink_exists_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_mode_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_if_parent_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_only_write_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_truncate (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_raises_on_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_posix (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_only_read_zero_bytes_windows (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_creation_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_opening_existing_directory_in_write_mode (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_after_closing_write_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_only_read_after_write (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_no_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_offset_none (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_twice (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sendfile_with_offset (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temp_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'O_TEMPORARY only present in Windows'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_f_ds (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_from_different_fds_with_append (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_read (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_behind_end_of_file (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_to_existing_directory (pyfakefs.tests.fake_os_test.RealOsModuleLowLevelFileOpTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access400 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access600 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access700 (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_mode_tell_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_backwards_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir into '..' should behave appropriately. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_symlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capabilities (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure that the fake capabilities are the same as the real ones. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should work on a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_bad_arguments (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.chown() with bad args (Issue #30) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_no_follow_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_nonexisting_file_should_raise_os_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chown_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_circular_readlink_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_classify_directory_contents (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Directory classification should work correctly. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed_file_descriptor (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_consecutive_chdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Consecutive relative chdir calls should work. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_dir_with_trailing_sep_is_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_effective_ids_not_supported_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdatasync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fstat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_invalid_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_raises_on_non_int (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ftruncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_cwd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | lchmod shall behave like chmod with follow_symlinks=True. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_broken_link_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_bogus (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_count1 (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that hard link counts are updated correctly. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_non_existent_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_target_is_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_update (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_current (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_error (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_size_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_if_parent_is_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_in_write_protected_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_access_denied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs raises exception if access denied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_looping_link (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_on_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs creates a directories with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_can_create_a_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_empty_file_name (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_filename_is_double_dot (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mk_nod_raises_if_parent_dir_doesnt_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a relative directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_linux_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_empty_directory_name (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exeption if creating directory named ''. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_no_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent directory does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_read_only (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if parent is read only. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_double_dots_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/foo2/../foo3. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_with_slash_dot_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if mkdir foo/. (trailing /.). ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a directory with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_sep (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir can create a directory named with a trailing slash. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_with_with_symlink_parent (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_existing_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_empty_tail_for_nonexistent_file_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_filename_is_empty_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_parent_is_not_a_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_raises_if_unsupported_options (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mknod_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir creates a device with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_nlink_for_directories (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_st_blocks_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_broken_symlink_to_path_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_file_with_existing_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_pipe_with_existing_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_umask_applied (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | open creates a file with umask applied. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_out_of_range_fdopen (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_write_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_circular_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_empty_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_does_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_none (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_is_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_top_symlink_fails (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_raises_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_with_read_permission_shall_succeed_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_without_parent_permission_raises_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_link_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_cascade_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/' as part of a ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_raises_if_removing_root (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises exception if asked to remove '/'. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_removedirs_with_trailing_slash (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | removedirs works on directory names with trailing slashes. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_mac (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_with_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_empty_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of an empty directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_parent_dir_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_link_with_trailing_sep_to_self_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_nonexistent_file_should_raise_error (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can't rename a file that doesn't exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_preserves_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test if rename preserves mtime. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_another_device_should_raise (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to another filesystem device raises OSError. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_dir_under_posix_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_path_ending_with_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_linux (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_macos (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_link_with_trailing_sep_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_directory_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_empty (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target directory is not empty. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception if the target does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_blocks (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_non_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_uses_open_fd_as_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_byte_string (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_current_dir (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_drive (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_trailing_separator_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_unc_path (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_on_nonexisting_path_raises (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_with_path_ending_with_sep_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seek_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_after_seekback_in_append_mode (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_non_existing (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_to_larger (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_with_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_umask (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink_raises_if_not_exist (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_pipe (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_to_read_fd (pyfakefs.tests.fake_os_test.RealOsModuleTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_change_case_in_case_insensitive_file_system (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can use `rename()` to change filename case in a case-insensitive ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_fails_non_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | chdir should raise OSError if the target is not a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fdopen_mode (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fsync_pass (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_works_with_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_delete (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_is_existing_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_on_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_returns_list (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs can create a directory even if parent does not exist. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_exist_ok (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | makedirs uses the exist_ok argument ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_broken_link (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_directory_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if directory already exists. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_file_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | mkdir raises exception if name already exists as a file. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_parent_is_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_if_symlink_exists (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_raises_on_symlink_in_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_removes_symlink_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_has_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_raises_if_path_not_a_link_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_chained_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_with_links_in_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_recursive_rename_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_raises_error_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dir_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_dirs_with_non_top_symlink_succeeds (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_no_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_file_relative_path (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_fails_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_open_file_possible_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_symlink_to_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_broken_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_macos (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_case_only_with_symlink_parent_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test a rename of a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_existing_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_dir_to_symlink_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a directory to an unused name. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_existing_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_directory_to_linked_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_existing_directory_raises_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_file_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_looping_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_same_filenames (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test renaming when old and new names are the same. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_dir_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_does_nothing_in_mac_os (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_other_case_works_in_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_source (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_to_symlink_for_parent_raises (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_symlink_with_changed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_a_hardlink_of_same_file_should_do_nothing (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a used name under Unix. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existent_file_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming a file to a used name raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_existing_directory_under_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory changes the existing directory ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_to_nonexistent_dir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can rename a file to a name in a nonexistent dir. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_incorrect_source_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename_with_target_parent_file_raises_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_creates_missing_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_renames_removes_empty_dirs (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_existing_directory_should_raise_under_windows (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Renaming to an existing directory raises OSError under Windows. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace_to_existent_file (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Replaces an existing file (does not work with `rename()` under ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Can remove a directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir_via_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_no_follow_symlinks_posix (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that stat with follow_symlinks=False behaves like lstat. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_with_mixed_case (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_os_test.RealOsModuleTestCaseInsensitiveFS) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_base_dirpath (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_bottom_up (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk up ordering is correct. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_calls_on_error_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Calls onerror with correct errno when walking non-directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_disabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_followsymlink_enabled (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_linked_file_in_subdir (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_non_existent (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_raises_if_not_directory (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Raises an exception when attempting to walk a non-directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_skips_removed_directories (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Caller can modify list of directories to visit while walking. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_walk_top_down (pyfakefs.tests.fake_os_test.RealOsModuleWalkTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Walk down ordering is correct. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getgid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getuid (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_group_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_other_readable_dir_from_other_group (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir_user_readable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove_unreadable_dir_from_other_user (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_unreadable_dir (pyfakefs.tests.fake_os_test.RealOsUnreadableDirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirFdTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirRelTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_index_access_to_stat_times_returns_int (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_inode (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_link (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existing_dir (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_like (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_links_not_resolved (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_paths (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_stat_nlink (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_with_fd (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_ino_dev (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_posix (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_windows (pyfakefs.tests.fake_os_test.RealScandirTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_not_reset_after_close (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_truncation (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test that file size gets updated via open(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_updated_via_close (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test that file size gets updated via close(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_size_updated_via_flush (pyfakefs.tests.fake_os_test.StatPropagationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test that file size gets updated via flush(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_large_file_size_after_write (pyfakefs.tests.fake_os_test.StatPropagationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeA) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeAPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'r' mode, read, flushed and ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeRPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestFakeModeW) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'w+' mode and is then written to, ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestFakeModeWPlus) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeA) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeAPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeR)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'r' mode, read, flushed and ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_not_existing_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeRPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_raises (pyfakefs.tests.fake_stat_time_test.TestRealModeW) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | When an existing file is opened with 'w+' mode and is then written to, ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_read_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_close_new_file (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_write_flush_close (pyfakefs.tests.fake_stat_time_test.TestRealModeWPlus) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.BufferingModeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.FakeFileOpenLineEndingWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... skipped 'Different exceptions with PyPy'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... skipped 'Different exceptions with PyPy'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.FakeFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Expect raise when opening a file in a missing directory. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.FakeFileOpenTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.FakeFileOpenWithOpenerTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFilePatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.FakeFileUnpatchedOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenFileWithEncodingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_str (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_error_modes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.OpenRealFileWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_binary (pyfakefs.tests.fake_open_test.OpenWithBinaryFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closefd_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_file_descriptor (pyfakefs.tests.fake_open_test.OpenWithFileDescriptorTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsRealFsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_a (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fake_path_exists4 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_r (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_capital_w (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_rw (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lower_u (pyfakefs.tests.fake_open_test.OpenWithInvalidFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_open_test.OpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that text mode flag is ignored ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_default_buffering_no_flush (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_flush_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_failed_write_does_not_truncate_file (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_buffering_not_allowed_in_textmode (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_large_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_default_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_line_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_text_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_writing_with_specific_buffer (pyfakefs.tests.fake_open_test.RealBufferingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_binary_readline (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_default_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_ignored_universal_newlines_flag (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_universal_newlines_flag_not_supported (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'U flag still supported'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_standard_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlines_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_universal_newline_mode (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_open_test.RealFileOpenLineEndingWithEncodingTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_closed_file_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_accessing_open_file_with_another_handle_raises (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_linux_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_append_with_aplus_read_with_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_can_read_from_block_device (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closed (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_closed_file_does_nothing (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_closing_file_with_different_close_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_compatibility_of_with_statement (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_append (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_delete_on_close (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_binary_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exclusive_create_file_failure (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_different_files (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_descriptors_for_the_same_file_are_different (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_intra_path_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_read (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_follow_link_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_intertwined_read_write_python3_str (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterate_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_next_over_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_delete_on_close_by_default (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_directory_error (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags100 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags200 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags400 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_flags700 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_io_errors (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_no_parent_dir (pyfakefs.tests.fake_open_test.RealFileOpenTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Expect raise when opening a file in a missing directory. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_io_error_if_parent_is_file_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_raises_on_symlink_loop (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_args (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_valid_file_with_cwd (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_append_flag (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_linux (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_macos (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_trailing_sep_windows (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_with_wplus_truncation (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_overwrite_existing_file (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_empty_file_with_aplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_posix (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_flushes_under_windows_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_with_rplus (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_reused_file_descriptors_do_not_affect_others (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_append_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_seek_outside_and_truncate_sets_size_in_write_mode (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_st_size_after_truncate (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_in_python3 (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tell_flushes_under_mac_os (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_read_over_end_does_not_reset_position (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate_flushes_zeros (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_contents (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unicode_filename (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_update_other_instances_of_same_file_on_flush (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utf16_text (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_devnull (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_str_read_bytes (pyfakefs.tests.fake_open_test.RealFileOpenTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_append_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_exclusive_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_read_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_use_opener_with_write_plus (pyfakefs.tests.fake_open_test.RealFileOpenWithOpenerTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_and_read_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_binary (pyfakefs.tests.fake_open_test.RealOpenWithBinaryFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mixed_text_and_binary_flags (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_open_test.RealOpenWithTextModeFlagsTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test that text mode flag is ignored ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealPatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normal_path (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_link (pyfakefs.tests.fake_open_test.RealResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.RealResolvePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_byte_contents_open_code (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_invalid_path (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_code_in_real_fs (pyfakefs.tests.fake_open_test.RealUnpatchedFileOpenCodeTest) ... skipped 'open_code only present since Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_through_relative_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir_uses_open_fd_as_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_filepath_raises_io_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_absolute_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_parent_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_sub_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_within_same_directory (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_multiple_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_filepath_raises_type_error (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normal_path (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_links_work_after_chdir (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_drive_letters_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_that_unc_paths_are_preserved (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_too_many_links (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime_link (pyfakefs.tests.fake_open_test.ResolvePathTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | os.utime() and os.stat() via symbolic link (issue #49) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_link_to_link (pyfakefs.tests.fake_open_test.ResolvePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdtemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkstemp (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkstemp_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists_as_default_arg_in_function (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_exists_as_default_arg_in_method (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test tempfile.mkstemp(dir=). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_named_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_named_temporary_file_no_delete (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temporary_directory (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_exists_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_function_from_os_path_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_io_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_isdir_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_isfile_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_islink_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_path_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure `from os import path` patches `path`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_path_from_pathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_import_pathlib_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_own_path_module (pyfakefs.tests.fake_filesystem_unittest_test.TestPathNotPatchedIfNotOsPath) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_test_case_type (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_up_pyfakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCaseMixin) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fakepathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temporary_file (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake glob module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_io_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake io module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake `open()` function is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake os module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_shutil (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Fake shutil module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_a (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_b (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tempdir_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_temporay_file_with_dir (pyfakefs.tests.fake_tempfile_test.FakeTempfileModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_tmp_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_value (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_absolute_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.create_file() which uses `open()` ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_delete_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.delete_file() which uses `os.remove()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_file_exists (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_bad_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.path_exists() which uses `os.path.exists()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_get_globs (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.get_glob(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.scandir() which uses `os.scandir()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_real_file_access (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_sym_link (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test `example.file_contents()` for a real file after adding it using ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rm_tree (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.rm_tree() using `shutil.rmtree()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_broken_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Test example.scandir() which uses `scandir.scandir()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | example (pyfakefs.tests)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | create_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.create_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | delete_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.delete_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | get_glob (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.get_glob ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | path_exists (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Doctest: pyfakefs.tests.example.path_exists ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_smart_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_class_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_class_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_method_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_method_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_module_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_module_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stubout_submodule_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_import_as_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_os_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_pathlib_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_shutil_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file_for_unreadable_dir_windows (pyfakefs.tests.fake_pathlib_test.FakeFilesystemChmodTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_directory_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_add_existing_real_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_dir_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_create_symlink_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_home (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_builtin_open_modes (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_empty_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_in_a_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_with_binary_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_with_contents (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getmtime_nonexistant_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hard_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hard_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to_folder_after_chdir (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_none_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_through_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure tests for class type will work ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_sym_link_to_folder (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_root_path (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_empty_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_parent (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_real_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_sibling_directory (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_sym_link_to_sibling_directory_non_existant_file (pyfakefs.tests.fake_filesystem_vs_real_test.FakeFilesystemVsRealTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_match (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist1 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist2 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist3 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist4 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist5 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist6 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_does_not_exist7 (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_succeeds (pyfakefs.tests.fake_filesystem_unittest_test.AdditionalSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_home (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Make sure tests for class type will work ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_open (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_match (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_access (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_join (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_link (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_split (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_both (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_csv (pyfakefs.tests.patched_packages_test.TestPatchedPackages) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_run_module (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_excel (pyfakefs.tests.patched_packages_test.TestPatchedPackages) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_read_table (pyfakefs.tests.patched_packages_test.TestPatchedPackages) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_run_path (pyfakefs.tests.fake_filesystem_unittest_test.AutoPatchOpenCodeTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.FailedPatchingTest) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_non_root_behavior (pyfakefs.tests.fake_filesystem_unittest_test.NoRootUserTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | test_write_excel (pyfakefs.tests.patched_packages_test.TestPatchedPackages) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ----------------------------------------------------------------------\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Ran 2137 tests in 5.715s\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | OK (skipped=891, expected failures=2)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Check that fs behaves as non-root user regardless of actual ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists1 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists2 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists3 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists5 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists6 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u2705  Success - Main Run unit tests with extra packages as non-root user\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists7 (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_fails (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open_patched_in_module_ending_with_io (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists (pyfakefs.tests.fake_filesystem_unittest_test.NoSkipNamesTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_system_stat_failing (pyfakefs.tests.fake_filesystem_unittest_test.PatchModuleTestUsingDecorator) ... expected failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_cwd (pyfakefs.tests.fake_filesystem_unittest_test.PathlibTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure fake file system is used for os in pathlib ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumePatcherTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_fs (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_fs_contextmanager (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pause_resume_without_patcher (pyfakefs.tests.fake_filesystem_unittest_test.PauseResumeTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute (pyfakefs.tests.fake_filesystem_unittest_test.TestAbsolutePathOnWindows) ... skipped 'Windows-specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_attributes (pyfakefs.tests.fake_filesystem_unittest_test.TestAttributesWithFakeModuleNames)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Attributes of module under test are not patched ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_using_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_using_fs_functions (pyfakefs.tests.fake_filesystem_unittest_test.TestClassSetup) ... skipped 'Not available before Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_no_deprecation_warning (pyfakefs.tests.fake_filesystem_unittest_test.TestDeprecationSuppression)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Ensures that deprecation warnings are suppressed during module ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_copied (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_copied_again (pyfakefs.tests.fake_filesystem_unittest_test.TestDistutilsCopyTree) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_drivelike_path (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_linux (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_macos (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_real_file_with_home (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Regression test for #558 ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \u2b50 Run Main Run performance tests\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_windows (pyfakefs.tests.fake_filesystem_unittest_test.TestOtherFS) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_context_decorator (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_context_manager (pyfakefs.tests.fake_filesystem_unittest_test.TestPatcher) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_argument_order1 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_argument_order2 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchfsArgumentOrder) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/10.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fake_path_exists4 (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists_as_default_arg_in_function (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_exists_as_default_arg_in_method (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingDefaultArgs) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_exists_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_function_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_function_from_os_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_function_from_os_path_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_io_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_isdir_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_isfile_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_islink_from_os_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_open_as_other_name (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_path_from_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure `from os import path` patches `path`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_path_from_pathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_import_pathlib_path (pyfakefs.tests.fake_filesystem_unittest_test.TestPatchingImports) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_own_path_module (pyfakefs.tests.fake_filesystem_unittest_test.TestPathNotPatchedIfNotOsPath) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_test_case_type (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCase) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_up_pyfakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsTestCaseMixin) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fakepathlib (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake glob module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_io_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake io module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake `open()` function is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake os module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_shutil (pyfakefs.tests.fake_filesystem_unittest_test.TestPyfakefsUnittest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Fake shutil module is bound ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_a (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_b (pyfakefs.tests.fake_filesystem_unittest_test.TestShutilWithZipfile) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tempdir_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_tmp_exists (pyfakefs.tests.fake_filesystem_unittest_test.TestTempDirCreation) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_fakefs (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_value (pyfakefs.tests.fake_filesystem_unittest_test.TestTempFileReload) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.create_file() which uses `open()` ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_delete_file (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.delete_file() which uses `os.remove()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_file_exists (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.path_exists() which uses `os.path.exists()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_get_globs (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.get_glob(). ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.scandir() which uses `os.scandir()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_real_file_access (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test `example.file_contents()` for a real file after adding it using ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rm_tree (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.rm_tree() using `shutil.rmtree()`. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir_scandir (pyfakefs.tests.example_test.TestExample)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Test example.scandir() which uses `scandir.scandir()`. ... skipped 'Testing only if scandir module is installed'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | example (pyfakefs.tests)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | create_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.create_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | delete_file (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.delete_file ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | get_glob (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.get_glob ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | path_exists (pyfakefs.tests.example)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Doctest: pyfakefs.tests.example.path_exists ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_smart_set_raise_if_unknown_attribute (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_class_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_class_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_method_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_method_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_module_with_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_module_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stubout_submodule_with_smart_set (pyfakefs.tests.mox3_stubout_test.StubOutForTestingTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_import_as_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_os_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_pathlib_path_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_shutil_patch (pyfakefs.tests.dynamic_patch_test.DynamicImportPatchTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_file_for_unreadable_dir_windows (pyfakefs.tests.fake_pathlib_test.FakeFilesystemChmodTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_directory_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_add_existing_real_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_dir_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_file_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_create_symlink_with_pathlib_path (pyfakefs.tests.fake_pathlib_test.FakeFilesystemPathLikeObjectTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_home (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.FakePathlibFileObjectPropertyTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure tests for class type will work ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.FakePathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.FakePathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_match (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.FakePathlibPurePathTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.FakePathlibUsageInOsFunctionsTest) ... ok\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod_no_followsymlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'follow_symlinks argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_cwd (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_home (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lchmod (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lstat_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_resolve_nonexisting_file (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_file_in_unreadable_dir (pyfakefs.tests.fake_pathlib_test.RealPathlibFileObjectPropertyTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_initialization_type (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Make sure tests for class type will work ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_collapse (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Tests for collapsing path during initialization. ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_init_with_segments (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Basic initialization tests - taken from pathlib.Path ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_absolute (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_path_parts (pyfakefs.tests.fake_pathlib_test.RealPathlibInitializationWithDriveTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_glob_case_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Windows specific test'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_hardlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'hardlink_to new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_junction (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'is_junction method new in Python 3.12'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_iterdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'link_to new in Python 3.8'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir_exist_ok (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_open (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_read_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'readlink new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_samefile (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_touch_non_existing (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_unlink (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_text_with_encoding (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_write_with_newline_arg (pyfakefs.tests.fake_pathlib_test.RealPathlibPathFileOperationTest) ... skipped 'newline argument new in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'is_relative_to new in Python 3.9'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_is_reserved_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Windows specific behavior'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_joinpath_drive (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_match (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relative_to (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_name (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_with_suffix (pyfakefs.tests.fake_pathlib_test.RealPathlibPurePathTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_abspath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_access (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_changed_owner_and_group (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_chmod (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_exists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_expanduser (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getatime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getctime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getmtime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_getsize (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isabs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_isfile_not_readable (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_islink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_ismount (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_join (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_lexists (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_link (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_listdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_makedirs (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_mkdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normcase (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_normpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_posix (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_owner_and_group_windows (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_readlink_bytes (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_realpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_relpath (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_remove (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rename (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_replace (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_rmdir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_scandir (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_split (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_splitdrive (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_stat_follow_symlinks (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'New in Python 3.10'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_symlink (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_truncate (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | test_utime (pyfakefs.tests.fake_pathlib_test.RealPathlibUsageInOsFunctionsTest) ... skipped 'Only tests fake FS'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | ----------------------------------------------------------------------\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Ran 2133 tests in 9.115s\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | OK (skipped=866, expected failures=2)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u2705  Success - Main Run unit tests without extra packages as root\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \u2b50 Run Main Install extra dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/8.sh] user= workdir=\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Ignoring pandas: markers 'python_version > \"3.7\"' don't match your environment\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting pathlib2>=2.3.2 (from -r extra_requirements.txt (line 10))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading pathlib2-2.3.7.post1-py2.py3-none-any.whl (18 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting scandir>=1.8 (from -r extra_requirements.txt (line 11))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading scandir-1.10.0.tar.gz (33 kB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Preparing metadata (setup.py): started\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Preparing metadata (setup.py): finished with status 'done'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   | Collecting pandas==1.3.5 (from -r extra_requirements.txt (line 16))\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Downloading pandas-1.3.5.tar.gz (4.7 MB)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.7/4.7 MB 14.8 MB/s eta 0:00:00\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ........................................................................................................................................................................................................FF\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ======================================================================\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | FAIL: test_cached_time (__main__.TimePerformanceTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ----------------------------------------------------------------------\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Traceback (most recent call last):\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   File \"/tmp/558156d8-17ed-11ee-8a50-bb14de238602/pytest-dev-pyfakefs/pyfakefs/tests/performance_test.py\", line 63, in test_cached_time\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |     self.assertLess(SetupPerformanceTest.elapsed_time, 0.4)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | AssertionError: 0.6556644439697266 not less than 0.4\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ======================================================================\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | FAIL: test_uncached_time (__main__.TimePerformanceTest)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ----------------------------------------------------------------------\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Traceback (most recent call last):\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |   File \"/tmp/558156d8-17ed-11ee-8a50-bb14de238602/pytest-dev-pyfakefs/pyfakefs/tests/performance_test.py\", line 66, in test_uncached_time\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   |     self.assertLess(SetupNoCachePerformanceTest.elapsed_time, 6)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | AssertionError: 7.373847246170044 not less than 6\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | ----------------------------------------------------------------------\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Ran 202 tests in 8.031s\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | \n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | FAILED (failures=2)\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Elapsed time per test for uncached setup: 73.738 ms\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   | Elapsed time per test for cached setup: 6.557 ms\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Installing build dependencies: started\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ]   \u274c  Failure - Main Run performance tests\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] exitcode '1': failure\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Installing build dependencies: finished with status 'done'\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   |   Getting requirements to build wheel: started\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] failed to remove container: Delete \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/58de9f80f6ee6a272caa1a1e9aa4cee424654bb5f47c730db4b8cf1a279ad012?force=1&v=1\": context deadline exceeded\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-1         ] \ud83c\udfc1  Job failed\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ]   \u274c  Failure - Main Install extra dependencies\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/9425801f13ca4ee079260a7d40b80e9002f179faafa8f9d8f4d700a19c98f2c9/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[a9e40f9f-2be9-4a86-a634-ce8149a48c1f/tests-2         ] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: context canceled\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/pytest-dev-pyfakefs/.github/workflows/testsuite-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "a9e40f9f-2be9-4a86-a634-ce8149a48c1f",
        "build_tool": "pytest",
        "elapsed_time": 645.9779176712036
    }
}