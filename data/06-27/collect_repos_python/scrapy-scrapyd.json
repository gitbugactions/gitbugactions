{
    "repository": "scrapy/scrapyd",
    "stars": 2666,
    "language": "python",
    "size": 603,
    "clone_url": "https://github.com/scrapy/scrapyd.git",
    "timestamp": "2023-06-28T10:07:40.118401Z",
    "clone_success": true,
    "number_of_actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "scrapyd.tests.test_dont_load_settings.SettingsSafeModulesTest",
                "name": "test_modules_that_shouldnt_load_settings",
                "time": 0.255,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_eggstorage.TestConfigureEggStorage",
                "name": "test_egg_config_application",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_eggstorage.EggStorageTest",
                "name": "test_interface",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_eggstorage.EggStorageTest",
                "name": "test_list_hashes",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_eggstorage.EggStorageTest",
                "name": "test_list_semantic_versions",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_eggstorage.EggStorageTest",
                "name": "test_put_get_list_delete",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_endpoints.TestEndpoint",
                "name": "test_urljoin",
                "time": 1.129,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_endpoints.TestEndpoint",
                "name": "test_root",
                "time": 1.151,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=52995): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749abda50>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_endpoints.TestEndpoint",
                "name": "test_auth",
                "time": 1.12,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=60505): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749be6f10>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_endpoints.TestEndpoint",
                "name": "test_launch_spider_get",
                "time": 1.094,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=45927): Max retries exceeded with url: /schedule.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc7498261d0>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_endpoints.TestEndpoint",
                "name": "test_spider_list_no_project",
                "time": 1.096,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=46479): Max retries exceeded with url: /listspiders.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749a12d10>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_endpoints.TestEndpoint",
                "name": "test_spider_list_project_no_egg",
                "time": 1.104,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=60907): Max retries exceeded with url: /listprojects.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749ada410>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_endpoints.TestEndpoint",
                "name": "test_addversion_and_delversion",
                "time": 1.111,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=55419): Max retries exceeded with url: /addversion.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc74981a790>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_endpoints.TestEndpoint",
                "name": "test_failed_settings",
                "time": 1.079,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=41467): Max retries exceeded with url: /addversion.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749b54490>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_environ.EnvironmentTest",
                "name": "test_get_environment_with_eggfile",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_environ.EnvironmentTest",
                "name": "test_get_environment_with_no_items_dir",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_environ.EnvironmentTest",
                "name": "test_interface",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_jobstorage.MemoryJobStorageTest",
                "name": "test_add",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_jobstorage.MemoryJobStorageTest",
                "name": "test_interface",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_jobstorage.MemoryJobStorageTest",
                "name": "test_iter",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_jobstorage.MemoryJobStorageTest",
                "name": "test_len",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_jobstorage.SqliteJobsStorageTest",
                "name": "test_add",
                "time": 0.046,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_jobstorage.SqliteJobsStorageTest",
                "name": "test_interface",
                "time": 0.039,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_jobstorage.SqliteJobsStorageTest",
                "name": "test_iter",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_poller.QueuePollerTest",
                "name": "test_interface",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_poller.QueuePollerTest",
                "name": "test_poll_next",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_scheduler.SpiderSchedulerTest",
                "name": "test_interface",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_scheduler.SpiderSchedulerTest",
                "name": "test_list_update_projects",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_scheduler.SpiderSchedulerTest",
                "name": "test_schedule",
                "time": 0.017,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_scripts",
                "name": "test_print_version",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_scripts",
                "name": "test_print_v",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_scripts",
                "name": "test_twisted_options",
                "time": 0.062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_spiderqueue.SpiderQueueTest",
                "name": "test_add_pop_count",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_spiderqueue.SpiderQueueTest",
                "name": "test_clear",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_spiderqueue.SpiderQueueTest",
                "name": "test_interface",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_spiderqueue.SpiderQueueTest",
                "name": "test_list",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqliteDictTest",
                "name": "test_basic_types",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqliteDictTest",
                "name": "test_in",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqliteDictTest",
                "name": "test_keyerror",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqliteDictTest",
                "name": "test_replace",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqlitePriorityQueueTest",
                "name": "test_empty",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqlitePriorityQueueTest",
                "name": "test_iter_len_clear",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqlitePriorityQueueTest",
                "name": "test_multiple",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqlitePriorityQueueTest",
                "name": "test_one",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqlitePriorityQueueTest",
                "name": "test_priority",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqlitePriorityQueueTest",
                "name": "test_remove",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.JsonSqlitePriorityQueueTest",
                "name": "test_types",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.SqliteFinishedJobsTest",
                "name": "test__iter__",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.SqliteFinishedJobsTest",
                "name": "test_add",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.SqliteFinishedJobsTest",
                "name": "test_clear_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_sqlite.SqliteFinishedJobsTest",
                "name": "test_clear_keep_2",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_utils.UtilsTest",
                "name": "test_get_crawl_args",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_utils.UtilsTest",
                "name": "test_get_crawl_args_with_settings",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_utils.GetSpiderListTest",
                "name": "test_failed_spider_list",
                "time": 1.291,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_utils.GetSpiderListTest",
                "name": "test_get_spider_list",
                "time": 5.379,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_utils.GetSpiderListTest",
                "name": "test_get_spider_list_log_stdout",
                "time": 1.393,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_utils.GetSpiderListTest",
                "name": "test_get_spider_list_unicode",
                "time": 1.388,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_utils",
                "name": "test_sorted_versions[versions0-expected0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_utils",
                "name": "test_sorted_versions[versions1-expected1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_utils",
                "name": "test_sorted_versions[versions2-expected2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_list_spiders[default]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_list_spiders[default_with_local_items]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_list_versions[default]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_list_versions[default_with_local_items]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_list_projects[default]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_list_projects[default_with_local_items]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_list_jobs[default]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_list_jobs[default_with_local_items]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_list_jobs_finished[default]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_list_jobs_finished[default_with_local_items]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_delete_version[default]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_delete_version[default_with_local_items]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_delete_project[default]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_delete_project[default_with_local_items]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_addversion[default]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_addversion[default_with_local_items]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_schedule[default]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_webservice.TestWebservice",
                "name": "test_schedule[default_with_local_items]",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_website.TestWebsite",
                "name": "test_render_jobs[default]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_website.TestWebsite",
                "name": "test_render_jobs[default_with_local_items]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_website.TestWebsite",
                "name": "test_render_home[default]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "scrapyd.tests.test_website.TestWebsite",
                "name": "test_render_home[default_with_local_items]",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests] \ud83d\ude80  Start image=crawlergpt:latest\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/scrapy-scrapyd] user=0 workdir=\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v2\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests] \ud83e\uddea  Matrix: map[python-version:3.7]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests] \u2b50 Run Main actions/checkout@v2\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2705  Success - Main actions/checkout@v2\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests] \u2b50 Run Main Set up Python 3.7\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/dfa14e7f-ecdd-465a-8a1f-f5a01332fcc0/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::isExplicit: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::explicit? false\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::explicit? true\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::explicit? true\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::explicit? true\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::explicit? true\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::explicit? true\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::explicit? true\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::evaluating 6 versions\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::matched: 3.7.11\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Successfully setup CPython (3.7.11)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2705  Success - Main Set up Python 3.7\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2699  ::set-output:: python-version=3.7.11\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests] \u2b50 Run Main install requirements\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting pip\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Installing collected packages: pip\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Attempting uninstall: pip\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     Found existing installation: pip 21.2.4\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     Uninstalling pip-21.2.4:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |       Successfully uninstalled pip-21.2.4\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Successfully installed pip-23.1.2\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/scrapy-scrapyd\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Installing build dependencies: started\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Installing build dependencies: finished with status 'done'\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Checking if build backend supports build_editable: started\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Checking if build backend supports build_editable: finished with status 'done'\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Getting requirements to build editable: started\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Getting requirements to build editable: finished with status 'done'\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Preparing editable metadata (pyproject.toml): started\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Preparing editable metadata (pyproject.toml): finished with status 'done'\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting packaging (from scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 654.9 kB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting twisted>=17.9 (from scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading Twisted-22.10.0-py3-none-any.whl (3.1 MB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.1/3.1 MB 32.1 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting scrapy>=2.0.0 (from scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading Scrapy-2.9.0-py2.py3-none-any.whl (277 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 277.2/277.2 kB 939.4 kB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from scrapyd==1.4.2) (47.1.0)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting w3lib (from scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading w3lib-2.1.1-py3-none-any.whl (21 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting zope.interface (from scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading zope.interface-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (241 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 241.5/241.5 kB 4.7 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting pytest (from scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 3.5 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting pytest-cov (from scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting requests (from scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 3.5 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting cryptography>=3.4.6 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading cryptography-41.0.1-cp37-abi3-manylinux_2_28_x86_64.whl (4.3 MB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.3/4.3 MB 3.9 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting cssselect>=0.9.1 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading cssselect-1.2.0-py2.py3-none-any.whl (18 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting itemloaders>=1.0.1 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading itemloaders-1.1.0-py3-none-any.whl (11 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting parsel>=1.5.0 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading parsel-1.8.1-py2.py3-none-any.whl (17 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting pyOpenSSL>=21.0.0 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading pyOpenSSL-23.2.0-py3-none-any.whl (59 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 59.0/59.0 kB 4.5 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting queuelib>=1.4.2 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading queuelib-1.6.2-py2.py3-none-any.whl (13 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting service-identity>=18.1.0 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading service_identity-21.1.0-py2.py3-none-any.whl (12 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting protego>=0.1.15 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading Protego-0.2.1-py2.py3-none-any.whl (8.2 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting itemadapter>=0.1.0 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading itemadapter-0.8.0-py3-none-any.whl (11 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting tldextract (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading tldextract-3.4.4-py3-none-any.whl (93 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 93.3/93.3 kB 2.7 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting lxml>=4.3.0 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading lxml-4.9.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (6.6 MB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 6.6/6.6 MB 21.9 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting PyDispatcher>=2.0.5 (from scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading PyDispatcher-2.0.7-py3-none-any.whl (12 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting constantly>=15.1 (from twisted>=17.9->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading constantly-15.1.0-py2.py3-none-any.whl (7.9 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting incremental>=21.3.0 (from twisted>=17.9->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading incremental-22.10.0-py2.py3-none-any.whl (16 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting Automat>=0.8.0 (from twisted>=17.9->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading Automat-22.10.0-py2.py3-none-any.whl (26 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting hyperlink>=17.1.1 (from twisted>=17.9->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading hyperlink-21.0.0-py2.py3-none-any.whl (74 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 74.6/74.6 kB 8.1 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting attrs>=19.2.0 (from twisted>=17.9->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.2/61.2 kB 2.0 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting typing-extensions>=3.6.5 (from twisted>=17.9->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting iniconfig (from pytest->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting pluggy<2.0,>=0.12 (from pytest->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting tomli>=1.0.0 (from pytest->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting importlib-metadata>=0.12 (from pytest->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.6/225.6 kB 7.6 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting charset-normalizer<4,>=2 (from requests->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 171.0/171.0 kB 14.2 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting idna<4,>=2.5 (from requests->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 12.2 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting urllib3<3,>=1.21.1 (from requests->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 12.9 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting certifi>=2017.4.17 (from requests->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 18.5 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting six (from Automat>=0.8.0->twisted>=17.9->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting cffi>=1.12 (from cryptography>=3.4.6->scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading cffi-1.15.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (427 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 427.9/427.9 kB 39.5 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting zipp>=0.5 (from importlib-metadata>=0.12->pytest->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting jmespath>=0.9.5 (from itemloaders>=1.0.1->scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting pyasn1-modules (from service-identity>=18.1.0->scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading pyasn1_modules-0.3.0-py2.py3-none-any.whl (181 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 181.3/181.3 kB 5.2 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting pyasn1 (from service-identity>=18.1.0->scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading pyasn1-0.5.0-py2.py3-none-any.whl (83 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 83.9/83.9 kB 14.1 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting requests-file>=1.4 (from tldextract->scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading requests_file-1.5.1-py2.py3-none-any.whl (3.7 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting filelock>=3.0.8 (from tldextract->scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Collecting pycparser (from cffi>=1.12->cryptography>=3.4.6->scrapy>=2.0.0->scrapyd==1.4.2)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 118.7/118.7 kB 17.4 MB/s eta 0:00:00\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Building wheels for collected packages: scrapyd\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Building editable for scrapyd (pyproject.toml): started\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Building editable for scrapyd (pyproject.toml): finished with status 'done'\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Created wheel for scrapyd: filename=scrapyd-1.4.2-0.editable-py2.py3-none-any.whl size=4353 sha256=01b415377f6e9b5397f3b7fd4c13ac483c3c7d3ac1377c6348f6e9d797d0a8a5\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   Stored in directory: /tmp/pip-ephem-wheel-cache-nbi2uass/wheels/96/3f/df/f4f7d9e6ae35482891cb735233026901f2f9bd086e7c497615\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Successfully built scrapyd\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Installing collected packages: PyDispatcher, incremental, constantly, zope.interface, zipp, w3lib, urllib3, typing-extensions, tomli, six, queuelib, pycparser, pyasn1, packaging, lxml, jmespath, itemadapter, iniconfig, idna, filelock, exceptiongroup, cssselect, coverage, charset-normalizer, certifi, requests, pyasn1-modules, protego, parsel, importlib-metadata, hyperlink, cffi, requests-file, pluggy, itemloaders, cryptography, attrs, tldextract, service-identity, pytest, pyOpenSSL, Automat, twisted, pytest-cov, scrapy, scrapyd\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Successfully installed Automat-22.10.0 PyDispatcher-2.0.7 attrs-23.1.0 certifi-2023.5.7 cffi-1.15.1 charset-normalizer-3.1.0 constantly-15.1.0 coverage-7.2.7 cryptography-41.0.1 cssselect-1.2.0 exceptiongroup-1.1.1 filelock-3.12.2 hyperlink-21.0.0 idna-3.4 importlib-metadata-6.7.0 incremental-22.10.0 iniconfig-2.0.0 itemadapter-0.8.0 itemloaders-1.1.0 jmespath-1.0.1 lxml-4.9.2 packaging-23.1 parsel-1.8.1 pluggy-1.2.0 protego-0.2.1 pyOpenSSL-23.2.0 pyasn1-0.5.0 pyasn1-modules-0.3.0 pycparser-2.21 pytest-7.4.0 pytest-cov-4.1.0 queuelib-1.6.2 requests-2.31.0 requests-file-1.5.1 scrapy-2.9.0 scrapyd-1.4.2 service-identity-21.1.0 six-1.16.0 tldextract-3.4.4 tomli-2.0.1 twisted-22.10.0 typing-extensions-4.6.3 urllib3-2.0.3 w3lib-2.1.1 zipp-3.15.0 zope.interface-6.0\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | [notice] To update, run: pip install --upgrade pip\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u2705  Success - Main install requirements\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests] \u2b50 Run Main Run unit tests\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | ============================= test session starts ==============================\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/scrapy-scrapyd\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | plugins: cov-4.1.0\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | collected 82 items\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_dont_load_settings.py .                               [  1%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_eggstorage.py .....                                   [  7%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_endpoints.py .FFFFFFF                                 [ 17%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_environ.py ...                                        [ 20%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_jobstorage.py .......                                 [ 29%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_poller.py ..                                          [ 31%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_scheduler.py ...                                      [ 35%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_scripts.py ...                                        [ 39%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_spiderqueue.py ....                                   [ 43%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_sqlite.py ...............                             [ 62%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_utils.py .........                                    [ 73%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_webservice.py ..................                      [ 95%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_website.py ....                                       [100%]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | =================================== FAILURES ===================================\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | ____________________________ TestEndpoint.test_root ____________________________\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc749abda50>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:204: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     raise err\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | address = ('127.0.0.1', 52995), timeout = None, source_address = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | socket_options = [(6, 1, 1)]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         address: tuple[str, int],\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         source_address: tuple[str, int] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Connect to *address* and return the socket object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         port)``) and return the socket object.  Passing the optional\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         *timeout* parameter will set the timeout on the socket instance\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         before attempting to connect.  If no *timeout* is supplied, the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for the socket to bind as a source address before making the connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         An host of '' or port 0 tells the OS to use the default.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         host, port = address\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if host.startswith(\"[\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host = host.strip(\"[]\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # The original create_connection function always returns all records.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         family = allowed_gai_family()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host.encode(\"idna\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except UnicodeError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             af, socktype, proto, canonname, sa = res\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 sock = socket.socket(af, socktype, proto)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # If provided, set socket level options before connecting.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 _set_socket_options(sock, socket_options)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.settimeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if source_address:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.bind(source_address)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               sock.connect(sa)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749a5bcd0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'GET', url = '/', body = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | redirect = False, assert_same_host = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | decode_content = False, response_kw = {}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def urlopen(  # type: ignore[override]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body: _TYPE_BODY | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         retries: Retry | bool | int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         assert_same_host: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         pool_timeout: int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_conn: bool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked: bool = False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         preload_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         decode_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         **response_kw: typing.Any,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> BaseHTTPResponse:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         lowest level call for making a request, so you'll need to specify all\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         the raw details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            More commonly, it's appropriate to use a convenience method\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            such as :meth:`request`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `release_conn` will only behave as expected if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` because we want to make\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` the default behaviour someday soon without\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            breaking backwards compatibility.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param method:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param url:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             The URL to perform the request on.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param body:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param headers:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             these headers completely replace any pool-specific headers.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param retries:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Configure the number of retries to allow before raising a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             over different types of retries.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass an integer number to retry connection errors that many times,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             but no other types of errors. Pass zero to never retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the redirect response will be returned.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param redirect:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             will disable redirect, too.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param assert_same_host:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If specified, overrides the default timeout for this one\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request. It may be a float (in seconds) or an instance of\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`urllib3.util.Timeout`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param pool_timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If set and the pool is set to block=True, then this method will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connection is available within the time period.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool preload_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, the response's body will be preloaded into memory.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool decode_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, will attempt to decode the body based on the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             'content-encoding' header.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param release_conn:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If False, then the urlopen call will not release the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool once a response is received (but will release if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             you read the entire contents of the response such as when\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the response's content immediately. You will need to call\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             which defaults to ``True``.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool chunked:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, urllib3 will send the body using chunked transfer\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             content-length form. Defaults to False.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param int body_pos:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Position to seek to in file-like body in the event of a retry or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             auto-populate the value when needed.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         parsed_url = parse_url(url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         destination_scheme = parsed_url.scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if headers is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = self.headers\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not isinstance(retries, Retry):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if release_conn is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             release_conn = preload_content\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Check host\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if assert_same_host and not self.is_same_host(url):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise HostChangedError(self, url, retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if url.startswith(\"/\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(_encode_target(url))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(parsed_url.url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         conn = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Track whether `conn` needs to be released before\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # the function recurses, the original value of `release_conn` will be\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # passed down into the recursive call, and its value will be respected.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # See issue #651 [1] for details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_this_conn = release_conn\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # have to copy the headers dict so we can safely change it without those\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # changes being reflected in anyone else's copy.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not http_tunnel_required:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # complains about UnboundLocalError.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # ensures we do proper cleanup in finally.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Rewind body position, if needed. Record current position\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # for future rewinds in the event of a redirect/retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos = set_file_position(body, body_pos)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Request a connection from the queue.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout_obj = self._get_timeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._prepare_proxy(conn)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._raise_timeout(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # If we're going to release the connection in ``finally:``, then\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # it will also try to release it and we'll have a double-release\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # mess.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_conn = conn if not release_conn else None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Make the request on the HTTPConnection object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response = self._make_request(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout_obj,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 response_conn=response_conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=preload_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=decode_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               **response_kw,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     enforce_content_length=enforce_content_length,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.endheaders()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.send(msg)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.connect()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.sock = self._new_conn()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc749abda50>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except socket.gaierror as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NameResolutionError(self.host, self, e) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except SocketTimeout as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectTimeoutError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except OSError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NewConnectionError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self, f\"Failed to establish a new connection: {e}\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7fc749abda50>: Failed to establish a new connection: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc7497d13d0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [GET]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'GET', url = '/', response = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749abda50>: Failed to establish a new connection: [Errno 111] Connection refused')\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749a5bcd0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _stacktrace = <traceback object at 0x7fc749abeb90>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def increment(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         response: BaseHTTPResponse | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         error: Exception | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _pool: ConnectionPool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _stacktrace: TracebackType | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> Retry:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param response: A response object, or None, if the server did not\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             return a response.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param Exception error: An error encountered during the request, or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             None if the response was received successfully.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: A new ``Retry`` object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if self.total is False and error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Disabled, indicate to re-raise the error.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         total = self.total\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if total is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         connect = self.connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         read = self.read\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect = self.redirect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status_count = self.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         other = self.other\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         cause = \"unknown\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect_location = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if error and self._is_connection_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Connect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if connect is False:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif connect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error and self._is_read_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Read retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if read is False or method is None or not self._is_method_retryable(method):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif read is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 read -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Other retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if other is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 other -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif response and response.get_redirect_location():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Redirect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if redirect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = \"too many redirects\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_redirect_location = response.get_redirect_location()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response_redirect_location:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect_location = response_redirect_location\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Incrementing because of a server error like a 500 in\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # status_forcelist and the given method is in the allowed_methods\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = ResponseError.GENERIC_ERROR\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response and response.status:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if status_count is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     status_count -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         history = self.history + (\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             RequestHistory(method, url, error, status, redirect_location),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         new_retry = self.new(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total=total,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connect=connect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read=read,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect=redirect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status=status_count,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             other=other,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             history=history,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if new_retry.is_exhausted():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             reason = error or ResponseError(cause)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=52995): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749abda50>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | During handling of the above exception, another exception occurred:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <scrapyd.tests.test_endpoints.TestEndpoint object at 0x7fc749e93990>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | mock_scrapyd = <scrapyd.tests.mockserver.MockScrapyDServer object at 0x7fc749ab7090>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def test_root(self, mock_scrapyd):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >       resp = requests.get(mock_scrapyd.url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_endpoints.py:37: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return request(\"get\", url, params=params, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return session.request(method=method, url=url, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     resp = self.send(prep, **send_kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     r = adapter.send(request, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc7497d13d0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [GET]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except (ProtocolError, OSError) as err:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectionError(err, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except MaxRetryError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ConnectTimeoutError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # TODO: Remove this in 3.0.0: see #2811\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if not isinstance(e.reason, NewConnectionError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise ConnectTimeout(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ResponseError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise RetryError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _ProxyError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ProxyError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _SSLError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # This branch is for urllib3 v1.22 and later.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise SSLError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise ConnectionError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=52995): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749abda50>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | ____________________________ TestEndpoint.test_auth ____________________________\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc749be6f10>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:204: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     raise err\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | address = ('127.0.0.1', 60505), timeout = None, source_address = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | socket_options = [(6, 1, 1)]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         address: tuple[str, int],\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         source_address: tuple[str, int] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Connect to *address* and return the socket object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         port)``) and return the socket object.  Passing the optional\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         *timeout* parameter will set the timeout on the socket instance\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         before attempting to connect.  If no *timeout* is supplied, the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for the socket to bind as a source address before making the connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         An host of '' or port 0 tells the OS to use the default.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         host, port = address\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if host.startswith(\"[\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host = host.strip(\"[]\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # The original create_connection function always returns all records.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         family = allowed_gai_family()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host.encode(\"idna\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except UnicodeError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             af, socktype, proto, canonname, sa = res\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 sock = socket.socket(af, socktype, proto)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # If provided, set socket level options before connecting.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 _set_socket_options(sock, socket_options)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.settimeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if source_address:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.bind(source_address)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               sock.connect(sa)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749be6510>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'GET', url = '/', body = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | redirect = False, assert_same_host = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | decode_content = False, response_kw = {}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def urlopen(  # type: ignore[override]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body: _TYPE_BODY | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         retries: Retry | bool | int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         assert_same_host: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         pool_timeout: int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_conn: bool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked: bool = False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         preload_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         decode_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         **response_kw: typing.Any,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> BaseHTTPResponse:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         lowest level call for making a request, so you'll need to specify all\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         the raw details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            More commonly, it's appropriate to use a convenience method\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            such as :meth:`request`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `release_conn` will only behave as expected if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` because we want to make\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` the default behaviour someday soon without\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            breaking backwards compatibility.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param method:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param url:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             The URL to perform the request on.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param body:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param headers:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             these headers completely replace any pool-specific headers.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param retries:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Configure the number of retries to allow before raising a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             over different types of retries.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass an integer number to retry connection errors that many times,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             but no other types of errors. Pass zero to never retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the redirect response will be returned.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param redirect:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             will disable redirect, too.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param assert_same_host:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If specified, overrides the default timeout for this one\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request. It may be a float (in seconds) or an instance of\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`urllib3.util.Timeout`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param pool_timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If set and the pool is set to block=True, then this method will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connection is available within the time period.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool preload_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, the response's body will be preloaded into memory.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool decode_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, will attempt to decode the body based on the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             'content-encoding' header.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param release_conn:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If False, then the urlopen call will not release the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool once a response is received (but will release if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             you read the entire contents of the response such as when\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the response's content immediately. You will need to call\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             which defaults to ``True``.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool chunked:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, urllib3 will send the body using chunked transfer\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             content-length form. Defaults to False.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param int body_pos:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Position to seek to in file-like body in the event of a retry or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             auto-populate the value when needed.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         parsed_url = parse_url(url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         destination_scheme = parsed_url.scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if headers is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = self.headers\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not isinstance(retries, Retry):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if release_conn is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             release_conn = preload_content\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Check host\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if assert_same_host and not self.is_same_host(url):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise HostChangedError(self, url, retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if url.startswith(\"/\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(_encode_target(url))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(parsed_url.url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         conn = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Track whether `conn` needs to be released before\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # the function recurses, the original value of `release_conn` will be\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # passed down into the recursive call, and its value will be respected.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # See issue #651 [1] for details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_this_conn = release_conn\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # have to copy the headers dict so we can safely change it without those\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # changes being reflected in anyone else's copy.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not http_tunnel_required:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # complains about UnboundLocalError.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # ensures we do proper cleanup in finally.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Rewind body position, if needed. Record current position\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # for future rewinds in the event of a redirect/retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos = set_file_position(body, body_pos)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Request a connection from the queue.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout_obj = self._get_timeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._prepare_proxy(conn)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._raise_timeout(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # If we're going to release the connection in ``finally:``, then\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # it will also try to release it and we'll have a double-release\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # mess.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_conn = conn if not release_conn else None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Make the request on the HTTPConnection object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response = self._make_request(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout_obj,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 response_conn=response_conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=preload_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=decode_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               **response_kw,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     enforce_content_length=enforce_content_length,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.endheaders()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.send(msg)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.connect()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.sock = self._new_conn()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc749be6f10>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except socket.gaierror as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NameResolutionError(self.host, self, e) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except SocketTimeout as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectTimeoutError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except OSError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NewConnectionError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self, f\"Failed to establish a new connection: {e}\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7fc749be6f10>: Failed to establish a new connection: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc749a12c50>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [GET]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'GET', url = '/', response = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749be6f10>: Failed to establish a new connection: [Errno 111] Connection refused')\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749be6510>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _stacktrace = <traceback object at 0x7fc7499aa640>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def increment(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         response: BaseHTTPResponse | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         error: Exception | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _pool: ConnectionPool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _stacktrace: TracebackType | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> Retry:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param response: A response object, or None, if the server did not\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             return a response.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param Exception error: An error encountered during the request, or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             None if the response was received successfully.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: A new ``Retry`` object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if self.total is False and error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Disabled, indicate to re-raise the error.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         total = self.total\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if total is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         connect = self.connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         read = self.read\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect = self.redirect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status_count = self.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         other = self.other\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         cause = \"unknown\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect_location = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if error and self._is_connection_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Connect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if connect is False:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif connect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error and self._is_read_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Read retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if read is False or method is None or not self._is_method_retryable(method):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif read is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 read -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Other retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if other is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 other -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif response and response.get_redirect_location():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Redirect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if redirect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = \"too many redirects\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_redirect_location = response.get_redirect_location()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response_redirect_location:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect_location = response_redirect_location\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Incrementing because of a server error like a 500 in\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # status_forcelist and the given method is in the allowed_methods\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = ResponseError.GENERIC_ERROR\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response and response.status:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if status_count is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     status_count -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         history = self.history + (\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             RequestHistory(method, url, error, status, redirect_location),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         new_retry = self.new(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total=total,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connect=connect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read=read,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect=redirect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status=status_count,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             other=other,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             history=history,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if new_retry.is_exhausted():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             reason = error or ResponseError(cause)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=60505): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749be6f10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | During handling of the above exception, another exception occurred:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <scrapyd.tests.test_endpoints.TestEndpoint object at 0x7fc749e93b50>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def test_auth(self):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         username, password = \"Leonardo\", \"hunter2\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         with MockScrapyDServer(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 authentication=username + \":\" + password\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         ) as server:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           assert requests.get(server.url).status_code == 401\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_endpoints.py:51: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return request(\"get\", url, params=params, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return session.request(method=method, url=url, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     resp = self.send(prep, **send_kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     r = adapter.send(request, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc749a12c50>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [GET]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except (ProtocolError, OSError) as err:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectionError(err, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except MaxRetryError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ConnectTimeoutError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # TODO: Remove this in 3.0.0: see #2811\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if not isinstance(e.reason, NewConnectionError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise ConnectTimeout(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ResponseError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise RetryError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _ProxyError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ProxyError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _SSLError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # This branch is for urllib3 v1.22 and later.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise SSLError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise ConnectionError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=60505): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749be6f10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _____________________ TestEndpoint.test_launch_spider_get ______________________\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc7498261d0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:204: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     raise err\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | address = ('127.0.0.1', 45927), timeout = None, source_address = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | socket_options = [(6, 1, 1)]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         address: tuple[str, int],\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         source_address: tuple[str, int] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Connect to *address* and return the socket object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         port)``) and return the socket object.  Passing the optional\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         *timeout* parameter will set the timeout on the socket instance\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         before attempting to connect.  If no *timeout* is supplied, the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for the socket to bind as a source address before making the connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         An host of '' or port 0 tells the OS to use the default.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         host, port = address\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if host.startswith(\"[\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host = host.strip(\"[]\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # The original create_connection function always returns all records.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         family = allowed_gai_family()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host.encode(\"idna\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except UnicodeError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             af, socktype, proto, canonname, sa = res\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 sock = socket.socket(af, socktype, proto)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # If provided, set socket level options before connecting.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 _set_socket_options(sock, socket_options)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.settimeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if source_address:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.bind(source_address)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               sock.connect(sa)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749826b50>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'GET', url = '/schedule.json', body = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | redirect = False, assert_same_host = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | decode_content = False, response_kw = {}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/schedule.json', query=None, fragment=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def urlopen(  # type: ignore[override]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body: _TYPE_BODY | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         retries: Retry | bool | int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         assert_same_host: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         pool_timeout: int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_conn: bool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked: bool = False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         preload_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         decode_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         **response_kw: typing.Any,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> BaseHTTPResponse:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         lowest level call for making a request, so you'll need to specify all\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         the raw details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            More commonly, it's appropriate to use a convenience method\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            such as :meth:`request`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `release_conn` will only behave as expected if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` because we want to make\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` the default behaviour someday soon without\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            breaking backwards compatibility.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param method:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param url:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             The URL to perform the request on.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param body:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param headers:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             these headers completely replace any pool-specific headers.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param retries:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Configure the number of retries to allow before raising a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             over different types of retries.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass an integer number to retry connection errors that many times,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             but no other types of errors. Pass zero to never retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the redirect response will be returned.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param redirect:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             will disable redirect, too.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param assert_same_host:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If specified, overrides the default timeout for this one\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request. It may be a float (in seconds) or an instance of\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`urllib3.util.Timeout`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param pool_timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If set and the pool is set to block=True, then this method will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connection is available within the time period.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool preload_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, the response's body will be preloaded into memory.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool decode_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, will attempt to decode the body based on the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             'content-encoding' header.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param release_conn:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If False, then the urlopen call will not release the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool once a response is received (but will release if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             you read the entire contents of the response such as when\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the response's content immediately. You will need to call\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             which defaults to ``True``.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool chunked:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, urllib3 will send the body using chunked transfer\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             content-length form. Defaults to False.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param int body_pos:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Position to seek to in file-like body in the event of a retry or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             auto-populate the value when needed.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         parsed_url = parse_url(url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         destination_scheme = parsed_url.scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if headers is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = self.headers\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not isinstance(retries, Retry):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if release_conn is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             release_conn = preload_content\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Check host\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if assert_same_host and not self.is_same_host(url):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise HostChangedError(self, url, retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if url.startswith(\"/\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(_encode_target(url))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(parsed_url.url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         conn = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Track whether `conn` needs to be released before\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # the function recurses, the original value of `release_conn` will be\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # passed down into the recursive call, and its value will be respected.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # See issue #651 [1] for details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_this_conn = release_conn\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # have to copy the headers dict so we can safely change it without those\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # changes being reflected in anyone else's copy.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not http_tunnel_required:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # complains about UnboundLocalError.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # ensures we do proper cleanup in finally.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Rewind body position, if needed. Record current position\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # for future rewinds in the event of a redirect/retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos = set_file_position(body, body_pos)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Request a connection from the queue.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout_obj = self._get_timeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._prepare_proxy(conn)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._raise_timeout(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # If we're going to release the connection in ``finally:``, then\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # it will also try to release it and we'll have a double-release\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # mess.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_conn = conn if not release_conn else None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Make the request on the HTTPConnection object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response = self._make_request(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout_obj,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 response_conn=response_conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=preload_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=decode_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               **response_kw,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     enforce_content_length=enforce_content_length,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.endheaders()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.send(msg)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.connect()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.sock = self._new_conn()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc7498261d0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except socket.gaierror as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NameResolutionError(self.host, self, e) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except SocketTimeout as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectTimeoutError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except OSError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NewConnectionError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self, f\"Failed to establish a new connection: {e}\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7fc7498261d0>: Failed to establish a new connection: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc7498a3350>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [GET]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'GET', url = '/schedule.json', response = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc7498261d0>: Failed to establish a new connection: [Errno 111] Connection refused')\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749826b50>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _stacktrace = <traceback object at 0x7fc7497c85a0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def increment(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         response: BaseHTTPResponse | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         error: Exception | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _pool: ConnectionPool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _stacktrace: TracebackType | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> Retry:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param response: A response object, or None, if the server did not\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             return a response.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param Exception error: An error encountered during the request, or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             None if the response was received successfully.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: A new ``Retry`` object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if self.total is False and error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Disabled, indicate to re-raise the error.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         total = self.total\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if total is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         connect = self.connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         read = self.read\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect = self.redirect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status_count = self.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         other = self.other\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         cause = \"unknown\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect_location = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if error and self._is_connection_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Connect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if connect is False:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif connect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error and self._is_read_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Read retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if read is False or method is None or not self._is_method_retryable(method):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif read is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 read -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Other retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if other is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 other -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif response and response.get_redirect_location():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Redirect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if redirect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = \"too many redirects\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_redirect_location = response.get_redirect_location()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response_redirect_location:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect_location = response_redirect_location\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Incrementing because of a server error like a 500 in\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # status_forcelist and the given method is in the allowed_methods\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = ResponseError.GENERIC_ERROR\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response and response.status:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if status_count is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     status_count -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         history = self.history + (\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             RequestHistory(method, url, error, status, redirect_location),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         new_retry = self.new(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total=total,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connect=connect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read=read,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect=redirect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status=status_count,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             other=other,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             history=history,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if new_retry.is_exhausted():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             reason = error or ResponseError(cause)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=45927): Max retries exceeded with url: /schedule.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc7498261d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | During handling of the above exception, another exception occurred:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <scrapyd.tests.test_endpoints.TestEndpoint object at 0x7fc749e93710>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | mock_scrapyd = <scrapyd.tests.mockserver.MockScrapyDServer object at 0x7fc7498a37d0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def test_launch_spider_get(self, mock_scrapyd):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >       resp = requests.get(mock_scrapyd.urljoin(\"schedule.json\"))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_endpoints.py:63: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return request(\"get\", url, params=params, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return session.request(method=method, url=url, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     resp = self.send(prep, **send_kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     r = adapter.send(request, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc7498a3350>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [GET]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except (ProtocolError, OSError) as err:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectionError(err, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except MaxRetryError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ConnectTimeoutError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # TODO: Remove this in 3.0.0: see #2811\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if not isinstance(e.reason, NewConnectionError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise ConnectTimeout(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ResponseError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise RetryError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _ProxyError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ProxyError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _SSLError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # This branch is for urllib3 v1.22 and later.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise SSLError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise ConnectionError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=45927): Max retries exceeded with url: /schedule.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc7498261d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | ___________________ TestEndpoint.test_spider_list_no_project ___________________\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc749a12d10>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:204: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     raise err\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | address = ('127.0.0.1', 46479), timeout = None, source_address = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | socket_options = [(6, 1, 1)]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         address: tuple[str, int],\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         source_address: tuple[str, int] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Connect to *address* and return the socket object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         port)``) and return the socket object.  Passing the optional\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         *timeout* parameter will set the timeout on the socket instance\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         before attempting to connect.  If no *timeout* is supplied, the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for the socket to bind as a source address before making the connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         An host of '' or port 0 tells the OS to use the default.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         host, port = address\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if host.startswith(\"[\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host = host.strip(\"[]\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # The original create_connection function always returns all records.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         family = allowed_gai_family()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host.encode(\"idna\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except UnicodeError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             af, socktype, proto, canonname, sa = res\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 sock = socket.socket(af, socktype, proto)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # If provided, set socket level options before connecting.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 _set_socket_options(sock, socket_options)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.settimeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if source_address:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.bind(source_address)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               sock.connect(sa)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749c42f50>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'GET', url = '/listspiders.json', body = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | redirect = False, assert_same_host = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | decode_content = False, response_kw = {}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/listspiders.json', query=None, fragment=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def urlopen(  # type: ignore[override]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body: _TYPE_BODY | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         retries: Retry | bool | int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         assert_same_host: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         pool_timeout: int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_conn: bool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked: bool = False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         preload_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         decode_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         **response_kw: typing.Any,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> BaseHTTPResponse:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         lowest level call for making a request, so you'll need to specify all\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         the raw details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            More commonly, it's appropriate to use a convenience method\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            such as :meth:`request`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `release_conn` will only behave as expected if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` because we want to make\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` the default behaviour someday soon without\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            breaking backwards compatibility.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param method:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param url:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             The URL to perform the request on.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param body:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param headers:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             these headers completely replace any pool-specific headers.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param retries:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Configure the number of retries to allow before raising a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             over different types of retries.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass an integer number to retry connection errors that many times,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             but no other types of errors. Pass zero to never retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the redirect response will be returned.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param redirect:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             will disable redirect, too.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param assert_same_host:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If specified, overrides the default timeout for this one\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request. It may be a float (in seconds) or an instance of\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`urllib3.util.Timeout`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param pool_timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If set and the pool is set to block=True, then this method will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connection is available within the time period.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool preload_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, the response's body will be preloaded into memory.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool decode_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, will attempt to decode the body based on the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             'content-encoding' header.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param release_conn:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If False, then the urlopen call will not release the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool once a response is received (but will release if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             you read the entire contents of the response such as when\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the response's content immediately. You will need to call\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             which defaults to ``True``.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool chunked:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, urllib3 will send the body using chunked transfer\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             content-length form. Defaults to False.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param int body_pos:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Position to seek to in file-like body in the event of a retry or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             auto-populate the value when needed.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         parsed_url = parse_url(url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         destination_scheme = parsed_url.scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if headers is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = self.headers\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not isinstance(retries, Retry):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if release_conn is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             release_conn = preload_content\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Check host\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if assert_same_host and not self.is_same_host(url):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise HostChangedError(self, url, retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if url.startswith(\"/\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(_encode_target(url))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(parsed_url.url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         conn = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Track whether `conn` needs to be released before\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # the function recurses, the original value of `release_conn` will be\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # passed down into the recursive call, and its value will be respected.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # See issue #651 [1] for details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_this_conn = release_conn\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # have to copy the headers dict so we can safely change it without those\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # changes being reflected in anyone else's copy.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not http_tunnel_required:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # complains about UnboundLocalError.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # ensures we do proper cleanup in finally.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Rewind body position, if needed. Record current position\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # for future rewinds in the event of a redirect/retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos = set_file_position(body, body_pos)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Request a connection from the queue.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout_obj = self._get_timeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._prepare_proxy(conn)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._raise_timeout(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # If we're going to release the connection in ``finally:``, then\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # it will also try to release it and we'll have a double-release\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # mess.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_conn = conn if not release_conn else None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Make the request on the HTTPConnection object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response = self._make_request(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout_obj,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 response_conn=response_conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=preload_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=decode_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               **response_kw,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     enforce_content_length=enforce_content_length,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.endheaders()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.send(msg)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.connect()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.sock = self._new_conn()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc749a12d10>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except socket.gaierror as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NameResolutionError(self.host, self, e) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except SocketTimeout as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectTimeoutError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except OSError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NewConnectionError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self, f\"Failed to establish a new connection: {e}\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7fc749a12d10>: Failed to establish a new connection: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc749a1ee10>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [GET]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'GET', url = '/listspiders.json', response = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749a12d10>: Failed to establish a new connection: [Errno 111] Connection refused')\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749c42f50>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _stacktrace = <traceback object at 0x7fc7497774b0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def increment(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         response: BaseHTTPResponse | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         error: Exception | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _pool: ConnectionPool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _stacktrace: TracebackType | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> Retry:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param response: A response object, or None, if the server did not\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             return a response.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param Exception error: An error encountered during the request, or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             None if the response was received successfully.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: A new ``Retry`` object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if self.total is False and error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Disabled, indicate to re-raise the error.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         total = self.total\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if total is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         connect = self.connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         read = self.read\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect = self.redirect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status_count = self.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         other = self.other\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         cause = \"unknown\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect_location = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if error and self._is_connection_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Connect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if connect is False:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif connect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error and self._is_read_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Read retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if read is False or method is None or not self._is_method_retryable(method):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif read is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 read -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Other retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if other is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 other -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif response and response.get_redirect_location():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Redirect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if redirect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = \"too many redirects\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_redirect_location = response.get_redirect_location()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response_redirect_location:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect_location = response_redirect_location\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Incrementing because of a server error like a 500 in\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # status_forcelist and the given method is in the allowed_methods\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = ResponseError.GENERIC_ERROR\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response and response.status:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if status_count is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     status_count -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         history = self.history + (\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             RequestHistory(method, url, error, status, redirect_location),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         new_retry = self.new(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total=total,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connect=connect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read=read,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect=redirect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status=status_count,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             other=other,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             history=history,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if new_retry.is_exhausted():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             reason = error or ResponseError(cause)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=46479): Max retries exceeded with url: /listspiders.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749a12d10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | During handling of the above exception, another exception occurred:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <scrapyd.tests.test_endpoints.TestEndpoint object at 0x7fc749e93dd0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | mock_scrapyd = <scrapyd.tests.mockserver.MockScrapyDServer object at 0x7fc749a1e810>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def test_spider_list_no_project(self, mock_scrapyd):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >       resp = requests.get(mock_scrapyd.urljoin(\"listspiders.json\"))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_endpoints.py:70: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return request(\"get\", url, params=params, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return session.request(method=method, url=url, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     resp = self.send(prep, **send_kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     r = adapter.send(request, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc749a1ee10>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [GET]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except (ProtocolError, OSError) as err:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectionError(err, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except MaxRetryError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ConnectTimeoutError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # TODO: Remove this in 3.0.0: see #2811\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if not isinstance(e.reason, NewConnectionError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise ConnectTimeout(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ResponseError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise RetryError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _ProxyError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ProxyError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _SSLError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # This branch is for urllib3 v1.22 and later.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise SSLError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise ConnectionError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=46479): Max retries exceeded with url: /listspiders.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749a12d10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _________________ TestEndpoint.test_spider_list_project_no_egg _________________\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc749ada410>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:204: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     raise err\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | address = ('127.0.0.1', 60907), timeout = None, source_address = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | socket_options = [(6, 1, 1)]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         address: tuple[str, int],\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         source_address: tuple[str, int] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Connect to *address* and return the socket object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         port)``) and return the socket object.  Passing the optional\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         *timeout* parameter will set the timeout on the socket instance\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         before attempting to connect.  If no *timeout* is supplied, the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for the socket to bind as a source address before making the connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         An host of '' or port 0 tells the OS to use the default.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         host, port = address\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if host.startswith(\"[\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host = host.strip(\"[]\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # The original create_connection function always returns all records.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         family = allowed_gai_family()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host.encode(\"idna\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except UnicodeError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             af, socktype, proto, canonname, sa = res\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 sock = socket.socket(af, socktype, proto)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # If provided, set socket level options before connecting.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 _set_socket_options(sock, socket_options)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.settimeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if source_address:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.bind(source_address)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               sock.connect(sa)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749ada390>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'GET', url = '/listprojects.json', body = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | redirect = False, assert_same_host = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | decode_content = False, response_kw = {}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/listprojects.json', query=None, fragment=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def urlopen(  # type: ignore[override]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body: _TYPE_BODY | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         retries: Retry | bool | int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         assert_same_host: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         pool_timeout: int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_conn: bool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked: bool = False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         preload_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         decode_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         **response_kw: typing.Any,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> BaseHTTPResponse:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         lowest level call for making a request, so you'll need to specify all\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         the raw details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            More commonly, it's appropriate to use a convenience method\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            such as :meth:`request`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `release_conn` will only behave as expected if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` because we want to make\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` the default behaviour someday soon without\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            breaking backwards compatibility.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param method:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param url:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             The URL to perform the request on.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param body:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param headers:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             these headers completely replace any pool-specific headers.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param retries:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Configure the number of retries to allow before raising a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             over different types of retries.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass an integer number to retry connection errors that many times,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             but no other types of errors. Pass zero to never retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the redirect response will be returned.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param redirect:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             will disable redirect, too.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param assert_same_host:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If specified, overrides the default timeout for this one\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request. It may be a float (in seconds) or an instance of\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`urllib3.util.Timeout`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param pool_timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If set and the pool is set to block=True, then this method will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connection is available within the time period.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool preload_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, the response's body will be preloaded into memory.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool decode_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, will attempt to decode the body based on the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             'content-encoding' header.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param release_conn:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If False, then the urlopen call will not release the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool once a response is received (but will release if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             you read the entire contents of the response such as when\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the response's content immediately. You will need to call\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             which defaults to ``True``.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool chunked:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, urllib3 will send the body using chunked transfer\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             content-length form. Defaults to False.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param int body_pos:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Position to seek to in file-like body in the event of a retry or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             auto-populate the value when needed.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         parsed_url = parse_url(url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         destination_scheme = parsed_url.scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if headers is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = self.headers\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not isinstance(retries, Retry):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if release_conn is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             release_conn = preload_content\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Check host\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if assert_same_host and not self.is_same_host(url):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise HostChangedError(self, url, retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if url.startswith(\"/\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(_encode_target(url))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(parsed_url.url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         conn = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Track whether `conn` needs to be released before\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # the function recurses, the original value of `release_conn` will be\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # passed down into the recursive call, and its value will be respected.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # See issue #651 [1] for details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_this_conn = release_conn\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # have to copy the headers dict so we can safely change it without those\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # changes being reflected in anyone else's copy.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not http_tunnel_required:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # complains about UnboundLocalError.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # ensures we do proper cleanup in finally.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Rewind body position, if needed. Record current position\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # for future rewinds in the event of a redirect/retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos = set_file_position(body, body_pos)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Request a connection from the queue.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout_obj = self._get_timeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._prepare_proxy(conn)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._raise_timeout(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # If we're going to release the connection in ``finally:``, then\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # it will also try to release it and we'll have a double-release\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # mess.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_conn = conn if not release_conn else None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Make the request on the HTTPConnection object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response = self._make_request(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout_obj,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 response_conn=response_conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=preload_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=decode_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               **response_kw,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     enforce_content_length=enforce_content_length,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.endheaders()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.send(msg)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.connect()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.sock = self._new_conn()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc749ada410>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except socket.gaierror as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NameResolutionError(self.host, self, e) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except SocketTimeout as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectTimeoutError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except OSError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NewConnectionError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self, f\"Failed to establish a new connection: {e}\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7fc749ada410>: Failed to establish a new connection: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc749774250>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [GET]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'GET', url = '/listprojects.json', response = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749ada410>: Failed to establish a new connection: [Errno 111] Connection refused')\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749ada390>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _stacktrace = <traceback object at 0x7fc749851af0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def increment(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         response: BaseHTTPResponse | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         error: Exception | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _pool: ConnectionPool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _stacktrace: TracebackType | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> Retry:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param response: A response object, or None, if the server did not\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             return a response.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param Exception error: An error encountered during the request, or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             None if the response was received successfully.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: A new ``Retry`` object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if self.total is False and error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Disabled, indicate to re-raise the error.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         total = self.total\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if total is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         connect = self.connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         read = self.read\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect = self.redirect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status_count = self.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         other = self.other\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         cause = \"unknown\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect_location = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if error and self._is_connection_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Connect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if connect is False:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif connect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error and self._is_read_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Read retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if read is False or method is None or not self._is_method_retryable(method):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif read is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 read -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Other retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if other is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 other -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif response and response.get_redirect_location():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Redirect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if redirect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = \"too many redirects\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_redirect_location = response.get_redirect_location()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response_redirect_location:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect_location = response_redirect_location\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Incrementing because of a server error like a 500 in\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # status_forcelist and the given method is in the allowed_methods\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = ResponseError.GENERIC_ERROR\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response and response.status:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if status_count is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     status_count -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         history = self.history + (\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             RequestHistory(method, url, error, status, redirect_location),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         new_retry = self.new(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total=total,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connect=connect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read=read,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect=redirect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status=status_count,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             other=other,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             history=history,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if new_retry.is_exhausted():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             reason = error or ResponseError(cause)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=60907): Max retries exceeded with url: /listprojects.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749ada410>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | During handling of the above exception, another exception occurred:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <scrapyd.tests.test_endpoints.TestEndpoint object at 0x7fc749e93f10>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | mock_scrapyd = <scrapyd.tests.mockserver.MockScrapyDServer object at 0x7fc749774c50>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def test_spider_list_project_no_egg(self, mock_scrapyd):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >       resp = requests.get(mock_scrapyd.urljoin('listprojects.json'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_endpoints.py:77: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return request(\"get\", url, params=params, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return session.request(method=method, url=url, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     resp = self.send(prep, **send_kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     r = adapter.send(request, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc749774250>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [GET]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except (ProtocolError, OSError) as err:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectionError(err, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except MaxRetryError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ConnectTimeoutError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # TODO: Remove this in 3.0.0: see #2811\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if not isinstance(e.reason, NewConnectionError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise ConnectTimeout(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ResponseError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise RetryError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _ProxyError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ProxyError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _SSLError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # This branch is for urllib3 v1.22 and later.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise SSLError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise ConnectionError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=60907): Max retries exceeded with url: /listprojects.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749ada410>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _________________ TestEndpoint.test_addversion_and_delversion __________________\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc74981a790>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:204: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     raise err\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | address = ('127.0.0.1', 55419), timeout = None, source_address = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | socket_options = [(6, 1, 1)]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         address: tuple[str, int],\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         source_address: tuple[str, int] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Connect to *address* and return the socket object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         port)``) and return the socket object.  Passing the optional\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         *timeout* parameter will set the timeout on the socket instance\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         before attempting to connect.  If no *timeout* is supplied, the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for the socket to bind as a source address before making the connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         An host of '' or port 0 tells the OS to use the default.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         host, port = address\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if host.startswith(\"[\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host = host.strip(\"[]\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # The original create_connection function always returns all records.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         family = allowed_gai_family()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host.encode(\"idna\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except UnicodeError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             af, socktype, proto, canonname, sa = res\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 sock = socket.socket(af, socktype, proto)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # If provided, set socket level options before connecting.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 _set_socket_options(sock, socket_options)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.settimeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if source_address:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.bind(source_address)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               sock.connect(sa)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc74981a9d0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'POST', url = '/addversion.json'\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | body = b'--d1ce0f68a78ca046a6b97115c35afa96\\r\\nContent-Disposition: form-data; name=\"project\"\\r\\n\\r\\nquotesbot\\r\\n--d1ce0f68a...5\\x06\\x00\\x00\\x00\\x00\\x14\\x00\\x14\\x00(\\x06\\x00\\x00\\x15\\x18\\x00\\x00\\x00\\x00\\r\\n--d1ce0f68a78ca046a6b97115c35afa96--\\r\\n'\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '8100', 'Content-Type': 'multipart/form-data; boundary=d1ce0f68a78ca046a6b97115c35afa96'}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | redirect = False, assert_same_host = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | decode_content = False, response_kw = {}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/addversion.json', query=None, fragment=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def urlopen(  # type: ignore[override]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body: _TYPE_BODY | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         retries: Retry | bool | int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         assert_same_host: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         pool_timeout: int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_conn: bool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked: bool = False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         preload_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         decode_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         **response_kw: typing.Any,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> BaseHTTPResponse:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         lowest level call for making a request, so you'll need to specify all\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         the raw details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            More commonly, it's appropriate to use a convenience method\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            such as :meth:`request`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `release_conn` will only behave as expected if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` because we want to make\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` the default behaviour someday soon without\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            breaking backwards compatibility.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param method:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param url:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             The URL to perform the request on.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param body:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param headers:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             these headers completely replace any pool-specific headers.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param retries:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Configure the number of retries to allow before raising a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             over different types of retries.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass an integer number to retry connection errors that many times,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             but no other types of errors. Pass zero to never retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the redirect response will be returned.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param redirect:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             will disable redirect, too.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param assert_same_host:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If specified, overrides the default timeout for this one\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request. It may be a float (in seconds) or an instance of\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`urllib3.util.Timeout`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param pool_timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If set and the pool is set to block=True, then this method will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connection is available within the time period.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool preload_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, the response's body will be preloaded into memory.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool decode_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, will attempt to decode the body based on the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             'content-encoding' header.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param release_conn:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If False, then the urlopen call will not release the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool once a response is received (but will release if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             you read the entire contents of the response such as when\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the response's content immediately. You will need to call\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             which defaults to ``True``.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool chunked:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, urllib3 will send the body using chunked transfer\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             content-length form. Defaults to False.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param int body_pos:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Position to seek to in file-like body in the event of a retry or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             auto-populate the value when needed.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         parsed_url = parse_url(url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         destination_scheme = parsed_url.scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if headers is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = self.headers\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not isinstance(retries, Retry):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if release_conn is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             release_conn = preload_content\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Check host\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if assert_same_host and not self.is_same_host(url):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise HostChangedError(self, url, retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if url.startswith(\"/\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(_encode_target(url))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(parsed_url.url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         conn = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Track whether `conn` needs to be released before\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # the function recurses, the original value of `release_conn` will be\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # passed down into the recursive call, and its value will be respected.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # See issue #651 [1] for details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_this_conn = release_conn\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # have to copy the headers dict so we can safely change it without those\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # changes being reflected in anyone else's copy.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not http_tunnel_required:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # complains about UnboundLocalError.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # ensures we do proper cleanup in finally.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Rewind body position, if needed. Record current position\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # for future rewinds in the event of a redirect/retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos = set_file_position(body, body_pos)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Request a connection from the queue.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout_obj = self._get_timeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._prepare_proxy(conn)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._raise_timeout(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # If we're going to release the connection in ``finally:``, then\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # it will also try to release it and we'll have a double-release\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # mess.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_conn = conn if not release_conn else None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Make the request on the HTTPConnection object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response = self._make_request(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout_obj,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 response_conn=response_conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=preload_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=decode_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               **response_kw,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     enforce_content_length=enforce_content_length,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.endheaders()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.send(msg)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.connect()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.sock = self._new_conn()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc74981a790>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except socket.gaierror as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NameResolutionError(self.host, self, e) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except SocketTimeout as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectTimeoutError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except OSError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NewConnectionError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self, f\"Failed to establish a new connection: {e}\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7fc74981a790>: Failed to establish a new connection: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc74981a090>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [POST]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'POST', url = '/addversion.json', response = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc74981a790>: Failed to establish a new connection: [Errno 111] Connection refused')\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc74981a9d0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _stacktrace = <traceback object at 0x7fc7499fa500>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def increment(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         response: BaseHTTPResponse | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         error: Exception | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _pool: ConnectionPool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _stacktrace: TracebackType | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> Retry:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param response: A response object, or None, if the server did not\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             return a response.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param Exception error: An error encountered during the request, or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             None if the response was received successfully.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: A new ``Retry`` object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if self.total is False and error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Disabled, indicate to re-raise the error.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         total = self.total\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if total is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         connect = self.connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         read = self.read\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect = self.redirect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status_count = self.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         other = self.other\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         cause = \"unknown\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect_location = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if error and self._is_connection_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Connect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if connect is False:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif connect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error and self._is_read_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Read retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if read is False or method is None or not self._is_method_retryable(method):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif read is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 read -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Other retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if other is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 other -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif response and response.get_redirect_location():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Redirect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if redirect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = \"too many redirects\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_redirect_location = response.get_redirect_location()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response_redirect_location:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect_location = response_redirect_location\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Incrementing because of a server error like a 500 in\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # status_forcelist and the given method is in the allowed_methods\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = ResponseError.GENERIC_ERROR\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response and response.status:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if status_count is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     status_count -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         history = self.history + (\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             RequestHistory(method, url, error, status, redirect_location),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         new_retry = self.new(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total=total,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connect=connect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read=read,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect=redirect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status=status_count,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             other=other,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             history=history,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if new_retry.is_exhausted():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             reason = error or ResponseError(cause)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=55419): Max retries exceeded with url: /addversion.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc74981a790>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | During handling of the above exception, another exception occurred:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <scrapyd.tests.test_endpoints.TestEndpoint object at 0x7fc749ea31d0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | mock_scrapyd = <scrapyd.tests.mockserver.MockScrapyDServer object at 0x7fc74998ea10>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | quotesbot_egg = <_io.BufferedReader name='/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/scrapy-scrapyd/scrapyd/tests/quotesbot.egg'>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def test_addversion_and_delversion(self, mock_scrapyd, quotesbot_egg):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >       resp = self._deploy(mock_scrapyd, quotesbot_egg)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_endpoints.py:84: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_endpoints.py:108: in _deploy\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     resp = requests.post(url, data=data, files=files)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:115: in post\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return request(\"post\", url, data=data, json=json, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return session.request(method=method, url=url, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     resp = self.send(prep, **send_kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     r = adapter.send(request, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc74981a090>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [POST]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except (ProtocolError, OSError) as err:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectionError(err, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except MaxRetryError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ConnectTimeoutError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # TODO: Remove this in 3.0.0: see #2811\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if not isinstance(e.reason, NewConnectionError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise ConnectTimeout(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ResponseError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise RetryError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _ProxyError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ProxyError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _SSLError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # This branch is for urllib3 v1.22 and later.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise SSLError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise ConnectionError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=55419): Max retries exceeded with url: /addversion.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc74981a790>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | ______________________ TestEndpoint.test_failed_settings _______________________\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc749b54490>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:204: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:85: in create_connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     raise err\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | address = ('127.0.0.1', 41467), timeout = None, source_address = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | socket_options = [(6, 1, 1)]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         address: tuple[str, int],\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         source_address: tuple[str, int] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Connect to *address* and return the socket object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         port)``) and return the socket object.  Passing the optional\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         *timeout* parameter will set the timeout on the socket instance\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         before attempting to connect.  If no *timeout* is supplied, the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for the socket to bind as a source address before making the connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         An host of '' or port 0 tells the OS to use the default.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         host, port = address\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if host.startswith(\"[\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host = host.strip(\"[]\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # The original create_connection function always returns all records.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         family = allowed_gai_family()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             host.encode(\"idna\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except UnicodeError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             af, socktype, proto, canonname, sa = res\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 sock = socket.socket(af, socktype, proto)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # If provided, set socket level options before connecting.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 _set_socket_options(sock, socket_options)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.settimeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if source_address:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     sock.bind(source_address)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               sock.connect(sa)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749b54f10>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'POST', url = '/addversion.json'\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | body = b'--1dc52d6ad6adb82c9289ab61487b8b76\\r\\nContent-Disposition: form-data; name=\"project\"\\r\\n\\r\\nquotesbot\\r\\n--1dc52d6ad...5\\x06\\x00\\x00\\x00\\x00\\x14\\x00\\x14\\x00(\\x06\\x00\\x00\\x89\\x18\\x00\\x00\\x00\\x00\\r\\n--1dc52d6ad6adb82c9289ab61487b8b76--\\r\\n'\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '8224', 'Content-Type': 'multipart/form-data; boundary=1dc52d6ad6adb82c9289ab61487b8b76'}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | redirect = False, assert_same_host = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | decode_content = False, response_kw = {}\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/addversion.json', query=None, fragment=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def urlopen(  # type: ignore[override]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body: _TYPE_BODY | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         retries: Retry | bool | int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         assert_same_host: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         pool_timeout: int | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_conn: bool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked: bool = False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         preload_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         decode_content: bool = True,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         **response_kw: typing.Any,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> BaseHTTPResponse:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         lowest level call for making a request, so you'll need to specify all\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         the raw details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            More commonly, it's appropriate to use a convenience method\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            such as :meth:`request`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         .. note::\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `release_conn` will only behave as expected if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` because we want to make\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            `preload_content=False` the default behaviour someday soon without\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |            breaking backwards compatibility.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param method:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param url:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             The URL to perform the request on.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param body:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param headers:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             these headers completely replace any pool-specific headers.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param retries:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Configure the number of retries to allow before raising a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             over different types of retries.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Pass an integer number to retry connection errors that many times,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             but no other types of errors. Pass zero to never retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the redirect response will be returned.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param redirect:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             will disable redirect, too.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param assert_same_host:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If specified, overrides the default timeout for this one\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request. It may be a float (in seconds) or an instance of\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             :class:`urllib3.util.Timeout`.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param pool_timeout:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If set and the pool is set to block=True, then this method will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connection is available within the time period.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool preload_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, the response's body will be preloaded into memory.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool decode_content:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, will attempt to decode the body based on the\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             'content-encoding' header.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param release_conn:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If False, then the urlopen call will not release the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool once a response is received (but will release if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             you read the entire contents of the response such as when\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             the response's content immediately. You will need to call\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             which defaults to ``True``.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param bool chunked:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             If True, urllib3 will send the body using chunked transfer\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             content-length form. Defaults to False.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param int body_pos:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             Position to seek to in file-like body in the event of a retry or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             auto-populate the value when needed.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         parsed_url = parse_url(url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         destination_scheme = parsed_url.scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if headers is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = self.headers\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not isinstance(retries, Retry):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if release_conn is None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             release_conn = preload_content\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Check host\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if assert_same_host and not self.is_same_host(url):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise HostChangedError(self, url, retries)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if url.startswith(\"/\"):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(_encode_target(url))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             url = to_str(parsed_url.url)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         conn = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Track whether `conn` needs to be released before\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # the function recurses, the original value of `release_conn` will be\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # passed down into the recursive call, and its value will be respected.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # See issue #651 [1] for details.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         #\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         release_this_conn = release_conn\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # have to copy the headers dict so we can safely change it without those\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # changes being reflected in anyone else's copy.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if not http_tunnel_required:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # complains about UnboundLocalError.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         err = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # ensures we do proper cleanup in finally.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         clean_exit = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # Rewind body position, if needed. Record current position\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         # for future rewinds in the event of a redirect/retry.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         body_pos = set_file_position(body, body_pos)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Request a connection from the queue.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout_obj = self._get_timeout(timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._prepare_proxy(conn)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     self._raise_timeout(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # If we're going to release the connection in ``finally:``, then\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # it will also try to release it and we'll have a double-release\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # mess.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_conn = conn if not release_conn else None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Make the request on the HTTPConnection object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response = self._make_request(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout_obj,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 response_conn=response_conn,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=preload_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=decode_content,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               **response_kw,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:802: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:504: in _make_request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     enforce_content_length=enforce_content_length,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:388: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.endheaders()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: in endheaders\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: in _send_output\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.send(msg)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.connect()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:236: in connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.sock = self._new_conn()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <urllib3.connection.HTTPConnection object at 0x7fc749b54490>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def _new_conn(self) -> socket.socket:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: New socket connection.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             sock = connection.create_connection(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 (self._dns_host, self.port),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self.timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 source_address=self.source_address,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 socket_options=self.socket_options,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except socket.gaierror as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NameResolutionError(self.host, self, e) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except SocketTimeout as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectTimeoutError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except OSError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise NewConnectionError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 self, f\"Failed to establish a new connection: {e}\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           ) from e\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7fc749b54490>: Failed to establish a new connection: [Errno 111] Connection refused\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connection.py:217: NewConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | The above exception was the direct cause of the following exception:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc749e02410>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [POST]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >               chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:845: in urlopen\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | method = 'POST', url = '/addversion.json', response = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749b54490>: Failed to establish a new connection: [Errno 111] Connection refused')\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7fc749b54f10>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _stacktrace = <traceback object at 0x7fc749972730>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def increment(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         method: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url: str | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         response: BaseHTTPResponse | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         error: Exception | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _pool: ConnectionPool | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         _stacktrace: TracebackType | None = None,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ) -> Retry:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param response: A response object, or None, if the server did not\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             return a response.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param Exception error: An error encountered during the request, or\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             None if the response was received successfully.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :return: A new ``Retry`` object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if self.total is False and error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Disabled, indicate to re-raise the error.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         total = self.total\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if total is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         connect = self.connect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         read = self.read\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect = self.redirect\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status_count = self.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         other = self.other\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         cause = \"unknown\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         status = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         redirect_location = None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if error and self._is_connection_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Connect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if connect is False:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif connect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error and self._is_read_error(error):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Read retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if read is False or method is None or not self._is_method_retryable(method):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise reraise(type(error), error, _stacktrace)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             elif read is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 read -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif error:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Other retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if other is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 other -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif response and response.get_redirect_location():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Redirect retry?\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if redirect is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = \"too many redirects\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             response_redirect_location = response.get_redirect_location()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response_redirect_location:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect_location = response_redirect_location\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # Incrementing because of a server error like a 500 in\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             # status_forcelist and the given method is in the allowed_methods\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cause = ResponseError.GENERIC_ERROR\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if response and response.status:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if status_count is not None:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     status_count -= 1\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 status = response.status\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         history = self.history + (\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             RequestHistory(method, url, error, status, redirect_location),\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         new_retry = self.new(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             total=total,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             connect=connect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read=read,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             redirect=redirect,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             status=status_count,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             other=other,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             history=history,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if new_retry.is_exhausted():\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             reason = error or ResponseError(cause)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=41467): Max retries exceeded with url: /addversion.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749b54490>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | During handling of the above exception, another exception occurred:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <scrapyd.tests.test_endpoints.TestEndpoint object at 0x7fc749ea3390>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | mock_scrapyd = <scrapyd.tests.mockserver.MockScrapyDServer object at 0x7fc749b639d0>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | quotesbot_egg_asyncio = <_io.BufferedReader name='/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/scrapy-scrapyd/scrapyd/tests/quotesbot_asyncio.egg'>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def test_failed_settings(self, mock_scrapyd, quotesbot_egg_asyncio):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >       response = self._deploy(mock_scrapyd, quotesbot_egg_asyncio)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_endpoints.py:112: \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | scrapyd/tests/test_endpoints.py:108: in _deploy\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     resp = requests.post(url, data=data, files=files)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:115: in post\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return request(\"post\", url, data=data, json=json, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     return session.request(method=method, url=url, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     resp = self.send(prep, **send_kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     r = adapter.send(request, **kwargs)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | self = <requests.adapters.HTTPAdapter object at 0x7fc749e02410>\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | request = <PreparedRequest [POST]>, stream = False\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | cert = None, proxies = OrderedDict()\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     def send(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     ):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param stream: (optional) Whether to stream the request content.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             read timeout) <timeouts>` tuple.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             must be a path to a CA bundle to use\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         :rtype: requests.Response\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         \"\"\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             conn = self.get_connection(request.url, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except LocationValueError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise InvalidURL(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         url = self.request_url(request, proxies)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         self.add_headers(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             request,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             stream=stream,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             verify=verify,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             cert=cert,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             proxies=proxies,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         if isinstance(timeout, tuple):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 connect, read = timeout\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             except ValueError:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ValueError(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             pass\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         else:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         try:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             resp = conn.urlopen(\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 method=request.method,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 url=url,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 body=request.body,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 headers=request.headers,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 redirect=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 assert_same_host=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 preload_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 decode_content=False,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 retries=self.max_retries,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 timeout=timeout,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 chunked=chunked,\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             )\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except (ProtocolError, OSError) as err:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             raise ConnectionError(err, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |         except MaxRetryError as e:\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ConnectTimeoutError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # TODO: Remove this in 3.0.0: see #2811\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 if not isinstance(e.reason, NewConnectionError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                     raise ConnectTimeout(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, ResponseError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise RetryError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _ProxyError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise ProxyError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |             if isinstance(e.reason, _SSLError):\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 # This branch is for urllib3 v1.22 and later.\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |                 raise SSLError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | >           raise ConnectionError(e, request=request)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=41467): Max retries exceeded with url: /addversion.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749b54490>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | =============================== warnings summary ===============================\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | ../../../opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/coverage/inorout.py:460\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |   /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/coverage/inorout.py:460: CoverageWarning: --include is ignored because --source is set (include-ignored)\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   |     self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/scrapy-scrapyd/report.xml -\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | ---------- coverage: platform linux, python 3.7.11-final-0 -----------\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | Coverage XML written to file coverage.xml\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | \n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | =========================== short test summary info ============================\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | FAILED scrapyd/tests/test_endpoints.py::TestEndpoint::test_root - requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=52995): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749abda50>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | FAILED scrapyd/tests/test_endpoints.py::TestEndpoint::test_auth - requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=60505): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749be6f10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | FAILED scrapyd/tests/test_endpoints.py::TestEndpoint::test_launch_spider_get - requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=45927): Max retries exceeded with url: /schedule.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc7498261d0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | FAILED scrapyd/tests/test_endpoints.py::TestEndpoint::test_spider_list_no_project - requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=46479): Max retries exceeded with url: /listspiders.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749a12d10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | FAILED scrapyd/tests/test_endpoints.py::TestEndpoint::test_spider_list_project_no_egg - requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=60907): Max retries exceeded with url: /listprojects.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749ada410>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | FAILED scrapyd/tests/test_endpoints.py::TestEndpoint::test_addversion_and_delversion - requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=55419): Max retries exceeded with url: /addversion.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc74981a790>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | FAILED scrapyd/tests/test_endpoints.py::TestEndpoint::test_failed_settings - requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=41467): Max retries exceeded with url: /addversion.json (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fc749b54490>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   | =================== 7 failed, 75 passed, 1 warning in 23.42s ===================\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests]   \u274c  Failure - Main Run unit tests\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests] exitcode '1': failure\n[ee030057-b5ee-48c8-bcd5-2d74130d546e/tests] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'tests' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/scrapy-scrapyd/.github/workflows/tests-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 114.26018214225769
    }
}