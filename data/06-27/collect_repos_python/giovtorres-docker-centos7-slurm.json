{
    "repository": "giovtorres/docker-centos7-slurm",
    "stars": 80,
    "language": "python",
    "size": 98,
    "clone_url": "https://github.com/giovtorres/docker-centos7-slurm.git",
    "timestamp": "2023-06-28T11:42:54.515810Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "tests.test_config",
                "name": "test_slurm_var_files[/var/spool/slurmd]",
                "time": 0.152,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_var_files[/var/spool/slurmctld/clustername]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_var_files[/var/run/slurm/slurmctld.pid]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_var_files[/var/run/slurm/slurmd.pid]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_var_files[/var/log/slurm/slurmctld.log]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_var_files[/var/log/slurm/slurmd.log]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_var_files[/var/log/slurm/slurmdbd.log]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_var_files[/etc/slurm/jwt_hs256.key]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_etc_file_owners[/etc/slurm/gres.conf]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_etc_file_owners[/etc/slurm/slurm.conf]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_etc_file_owners[/etc/slurm/slurmdbd.conf]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurm_etc_file_owners[/etc/slurm/jwt_hs256.key]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_slurmdbd_permissions",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_tini_is_installed",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_slurm_user_group_exists",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_python_is_installed[3.6.15]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_python_is_installed[3.7.12]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_python_is_installed[3.8.12]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_python_is_installed[3.9.9]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_python_is_installed[3.10.0]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_slurmd_version",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_mariadb_is_listening",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_slurmdbd_is_listening",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_slurmctld_is_listening",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_container",
                "name": "test_slurmd_is_listening",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurm",
                "name": "test_partitions_are_up[normal]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurm",
                "name": "test_partitions_are_up[debug]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurm",
                "name": "test_job_can_run[normal]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurm",
                "name": "test_job_can_run[debug]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurmrestapi",
                "name": "test_unauthorized",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurmrestapi",
                "name": "test_slurm_ping[slurm]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurmrestapi",
                "name": "test_submit_job[slurm]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurmrestapi",
                "name": "test_slurmdb_jobs[slurm]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurmrestapi",
                "name": "test_slurm_ping[root]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurmrestapi",
                "name": "test_submit_job[root]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_slurmrestapi",
                "name": "test_slurmdb_jobs[root]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build] \ud83d\ude80  Start image=crawlergpt:latest\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/giovtorres-docker-centos7-slurm] user=0 workdir=\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build] \ud83e\uddea  Matrix: map[python-version:3.9]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build] \u2b50 Run Main Checkout repository code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u2705  Success - Main Checkout repository code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build] \u2b50 Run Main Set up Python\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udc33  docker cp src=/tmp/act-cache/0c2d38d3-e123-45f7-9ffb-b194074643b7/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::isExplicit: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::explicit? false\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::explicit? true\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::explicit? true\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::explicit? true\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::explicit? true\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::explicit? true\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::explicit? true\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::matched: 3.9.6\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Successfully setup CPython (3.9.6)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u2705  Success - Main Set up Python\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u2699  ::set-output:: python-version=3.9.6\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build] \u2b50 Run Main Install Dependencies\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Collecting pip\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Installing collected packages: pip\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Attempting uninstall: pip\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     Found existing installation: pip 21.2.4\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     Uninstalling pip-21.2.4:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |       Successfully uninstalled pip-21.2.4\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Successfully installed pip-23.1.2\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Collecting pipenv\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Downloading pipenv-2023.6.26-py3-none-any.whl (2.8 MB)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.8/2.8 MB 25.8 MB/s eta 0:00:00\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Collecting certifi (from pipenv)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 6.4 MB/s eta 0:00:00\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Collecting setuptools>=67.0.0 (from pipenv)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Downloading setuptools-68.0.0-py3-none-any.whl (804 kB)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 804.0/804.0 kB 21.2 MB/s eta 0:00:00\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Collecting virtualenv-clone>=0.2.5 (from pipenv)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Downloading virtualenv_clone-0.5.7-py3-none-any.whl (6.6 kB)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Collecting virtualenv>=20.17.1 (from pipenv)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.3/3.3 MB 36.2 MB/s eta 0:00:00\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Collecting distlib<1,>=0.3.6 (from virtualenv>=20.17.1->pipenv)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 468.5/468.5 kB 29.4 MB/s eta 0:00:00\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Collecting filelock<4,>=3.12 (from virtualenv>=20.17.1->pipenv)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Collecting platformdirs<4,>=3.5.1 (from virtualenv>=20.17.1->pipenv)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Installing collected packages: distlib, virtualenv-clone, setuptools, platformdirs, filelock, certifi, virtualenv, pipenv\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   Attempting uninstall: setuptools\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     Found existing installation: setuptools 56.0.0\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     Uninstalling setuptools-56.0.0:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |       Successfully uninstalled setuptools-56.0.0\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Successfully installed certifi-2023.5.7 distlib-0.3.6 filelock-3.12.2 pipenv-2023.6.26 platformdirs-3.8.0 setuptools-68.0.0 virtualenv-20.23.1 virtualenv-clone-0.5.7\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | [notice] To update, run: pip install --upgrade pip\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Creating a virtualenv for this project...\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Pipfile: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/giovtorres-docker-centos7-slurm/Pipfile\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Using /opt/hostedtoolcache/Python/3.9.6/x64/bin/python3.9 (3.9.6) to create virtualenv...\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | created virtual environment CPython3.9.6.final.0-64 in 718ms\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   creator CPython3Posix(dest=/home/runneradmin/.local/share/virtualenvs/giovtorres-docker-centos7-slurm-cdbBklew, clear=False, no_vcs_ignore=False, global=False)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/runneradmin/.local/share/virtualenv)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     added seed packages: pip==23.1.2, setuptools==67.8.0, wheel==0.40.0\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |   activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Successfully created virtual environment!\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Virtualenv location: /home/runneradmin/.local/share/virtualenvs/giovtorres-docker-centos7-slurm-cdbBklew\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | The flag --skip-lock has been deprecated for removal.  Without running the lock resolver it is not possible to manage multiple package indexes.  Additionally it bypasses the build consistency guarantees provided by maintaining a lock file.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Installing dependencies from Pipfile...\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Installing dependencies from Pipfile...\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | To activate this project's virtualenv, run pipenv shell.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | Alternatively, run a command inside the virtualenv with pipenv run.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u2705  Success - Main Install Dependencies\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build] \u2b50 Run Main Run Tests\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ============================= test session starts ==============================\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | platform linux -- Python 3.9.6, pytest-7.4.0, pluggy-1.2.0 -- /home/runneradmin/.local/share/virtualenvs/giovtorres-docker-centos7-slurm-cdbBklew/bin/python\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | cachedir: .pytest_cache\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/giovtorres-docker-centos7-slurm\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | plugins: testinfra-8.1.0, cov-4.1.0, sugar-0.9.7\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | collecting ... collected 36 items\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_var_files[/var/spool/slurmd] Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/build?buildargs=%7B%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile&labels=%7B%7D&memory=0&memswap=0&networkmode=default&rm=1&shmsize=0&t=docker-centos7-slurm%3Atest&target=&ulimits=null&version=1\": dial unix /var/run/docker.sock: connect: permission denied\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create\": dial unix /var/run/docker.sock: connect: permission denied.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | See 'docker run --help'.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_var_files[/var/spool/slurmctld/clustername] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_var_files[/var/run/slurm/slurmctld.pid] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_var_files[/var/run/slurm/slurmd.pid] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_var_files[/var/log/slurm/slurmctld.log] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_var_files[/var/log/slurm/slurmd.log] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_var_files[/var/log/slurm/slurmdbd.log] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_var_files[/etc/slurm/jwt_hs256.key] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_etc_file_owners[/etc/slurm/gres.conf] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_etc_file_owners[/etc/slurm/slurm.conf] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_etc_file_owners[/etc/slurm/slurmdbd.conf] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurm_etc_file_owners[/etc/slurm/jwt_hs256.key] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_config.py::test_slurmdbd_permissions ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_tini_is_installed ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_slurm_user_group_exists ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_python_is_installed[3.6.15] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_python_is_installed[3.7.12] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_python_is_installed[3.8.12] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_python_is_installed[3.9.9] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_python_is_installed[3.10.0] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_slurmd_version ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_mariadb_is_listening ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_slurmdbd_is_listening ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_slurmctld_is_listening ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_container.py::test_slurmd_is_listening ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurm.py::test_partitions_are_up[normal] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurm.py::test_partitions_are_up[debug] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurm.py::test_job_can_run[normal] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurm.py::test_job_can_run[debug] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurmrestapi.py::test_unauthorized ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurmrestapi.py::test_slurm_ping[slurm] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurmrestapi.py::test_submit_job[slurm] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurmrestapi.py::test_slurmdb_jobs[slurm] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurmrestapi.py::test_slurm_ping[root] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurmrestapi.py::test_submit_job[root] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/test_slurmrestapi.py::test_slurmdb_jobs[root] ERROR\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ==================================== ERRORS ====================================\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | __________ ERROR at setup of test_slurm_var_files[/var/spool/slurmd] ___________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ___ ERROR at setup of test_slurm_var_files[/var/spool/slurmctld/clustername] ___\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _____ ERROR at setup of test_slurm_var_files[/var/run/slurm/slurmctld.pid] _____\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ______ ERROR at setup of test_slurm_var_files[/var/run/slurm/slurmd.pid] _______\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _____ ERROR at setup of test_slurm_var_files[/var/log/slurm/slurmctld.log] _____\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ______ ERROR at setup of test_slurm_var_files[/var/log/slurm/slurmd.log] _______\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _____ ERROR at setup of test_slurm_var_files[/var/log/slurm/slurmdbd.log] ______\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _______ ERROR at setup of test_slurm_var_files[/etc/slurm/jwt_hs256.key] _______\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ______ ERROR at setup of test_slurm_etc_file_owners[/etc/slurm/gres.conf] ______\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _____ ERROR at setup of test_slurm_etc_file_owners[/etc/slurm/slurm.conf] ______\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ____ ERROR at setup of test_slurm_etc_file_owners[/etc/slurm/slurmdbd.conf] ____\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ____ ERROR at setup of test_slurm_etc_file_owners[/etc/slurm/jwt_hs256.key] ____\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _________________ ERROR at setup of test_slurmdbd_permissions __________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ___________________ ERROR at setup of test_tini_is_installed ___________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ________________ ERROR at setup of test_slurm_user_group_exists ________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ______________ ERROR at setup of test_python_is_installed[3.6.15] ______________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ______________ ERROR at setup of test_python_is_installed[3.7.12] ______________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ______________ ERROR at setup of test_python_is_installed[3.8.12] ______________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ______________ ERROR at setup of test_python_is_installed[3.9.9] _______________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ______________ ERROR at setup of test_python_is_installed[3.10.0] ______________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ____________________ ERROR at setup of test_slurmd_version _____________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _________________ ERROR at setup of test_mariadb_is_listening __________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _________________ ERROR at setup of test_slurmdbd_is_listening _________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ________________ ERROR at setup of test_slurmctld_is_listening _________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | __________________ ERROR at setup of test_slurmd_is_listening __________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _______________ ERROR at setup of test_partitions_are_up[normal] _______________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _______________ ERROR at setup of test_partitions_are_up[debug] ________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | __________________ ERROR at setup of test_job_can_run[normal] __________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | __________________ ERROR at setup of test_job_can_run[debug] ___________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _____________________ ERROR at setup of test_unauthorized ______________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ___________________ ERROR at setup of test_slurm_ping[slurm] ___________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ___________________ ERROR at setup of test_submit_job[slurm] ___________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | __________________ ERROR at setup of test_slurmdb_jobs[slurm] __________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ___________________ ERROR at setup of test_slurm_ping[root] ____________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ___________________ ERROR at setup of test_submit_job[root] ____________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | __________________ ERROR at setup of test_slurmdb_jobs[root] ___________________\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | request = <SubRequest 'host' for <Function test_slurm_var_files[/var/spool/slurmd]>>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     @pytest.fixture(scope=\"session\")\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def host(request):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         subprocess.run([\"docker\", \"build\", \"-t\", \"docker-centos7-slurm:test\", \".\"])\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         docker_id = (\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >           subprocess.check_output(\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 [\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"run\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-d\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-it\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"-h\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"slurmctl\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"--cap-add\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"sys_admin\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     \"docker-centos7-slurm:test\",\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 ]\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .decode()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             .strip()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         )\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | tests/conftest.py:15: \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:424: in check_output\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | input = None, capture_output = False, timeout = None, check = True\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | popenargs = (['docker', 'run', '-d', '-it', '-h', 'slurmctl', ...],)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | kwargs = {'stdout': -1}\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | process = <Popen: returncode: 126 args: ['docker', 'run', '-d', '-it', '-h', 'slurmctl...>\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | stdout = b'', stderr = None, retcode = 126\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     def run(*popenargs,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The returned instance will have attributes args, returncode, stdout and\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If check is True and the exit code was non-zero, it raises a\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         CalledProcessError. The CalledProcessError object will have the return code\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         in the returncode attribute, and output & stderr attributes if those streams\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         were captured.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         exception will be raised.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         There is an optional argument \"input\", allowing you to\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         it will be used internally.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         The other arguments are the same as for the Popen constructor.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         \"\"\"\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if input is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdin') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdin'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         if capture_output:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                  'with capture_output.')\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stdout'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             kwargs['stderr'] = PIPE\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |     \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |         with Popen(*popenargs, **kwargs) as process:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             try:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except TimeoutExpired as exc:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 if _mswindows:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # Windows accumulates the output in a single blocking\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # read() call run on child threads, with the timeout\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # being done in a join() on those threads.  communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # _after_ kill() is required to collect that and add it\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # to the exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     exc.stdout, exc.stderr = process.communicate()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 else:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # POSIX _communicate already populated the output so\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     # far into the TimeoutExpired exception.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                     process.wait()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 process.kill()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                 raise\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             retcode = process.poll()\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |             if check and retcode:\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | >               raise CalledProcessError(retcode, process.args,\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   |                                          output=stdout, stderr=stderr)\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | E               subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | \n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/subprocess.py:528: CalledProcessError\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/giovtorres-docker-centos7-slurm/report.xml -\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | =========================== short test summary info ============================\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_var_files[/var/spool/slurmd] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_var_files[/var/spool/slurmctld/clustername] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_var_files[/var/run/slurm/slurmctld.pid] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_var_files[/var/run/slurm/slurmd.pid] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_var_files[/var/log/slurm/slurmctld.log] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_var_files[/var/log/slurm/slurmd.log] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_var_files[/var/log/slurm/slurmdbd.log] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_var_files[/etc/slurm/jwt_hs256.key] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_etc_file_owners[/etc/slurm/gres.conf] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_etc_file_owners[/etc/slurm/slurm.conf] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_etc_file_owners[/etc/slurm/slurmdbd.conf] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurm_etc_file_owners[/etc/slurm/jwt_hs256.key] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_config.py::test_slurmdbd_permissions - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_tini_is_installed - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_slurm_user_group_exists - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_python_is_installed[3.6.15] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_python_is_installed[3.7.12] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_python_is_installed[3.8.12] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_python_is_installed[3.9.9] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_python_is_installed[3.10.0] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_slurmd_version - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_mariadb_is_listening - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_slurmdbd_is_listening - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_slurmctld_is_listening - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_container.py::test_slurmd_is_listening - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurm.py::test_partitions_are_up[normal] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurm.py::test_partitions_are_up[debug] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurm.py::test_job_can_run[normal] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurm.py::test_job_can_run[debug] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurmrestapi.py::test_unauthorized - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurmrestapi.py::test_slurm_ping[slurm] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurmrestapi.py::test_submit_job[slurm] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurmrestapi.py::test_slurmdb_jobs[slurm] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurmrestapi.py::test_slurm_ping[root] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurmrestapi.py::test_submit_job[root] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ERROR tests/test_slurmrestapi.py::test_slurmdb_jobs[root] - subprocess.CalledProcessError: Command '['docker', 'run', '-d', '-it', '-h', 'slurmctl', '--cap-add', 'sys_admin', 'docker-centos7-slurm:test']' returned non-zero exit status 126.\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   | ============================== 36 errors in 3.04s ==============================\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build]   \u274c  Failure - Main Run Tests\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build] exitcode '1': failure\n[f7b6110c-c6b3-492a-ae45-8ddcdbd41753/Build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'Build' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/giovtorres-docker-centos7-slurm/.github/workflows/build-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 268.33161783218384
    }
}